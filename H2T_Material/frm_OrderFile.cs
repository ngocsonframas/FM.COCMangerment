using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using  System.Data.OleDb;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using H2T_BaseSys;
using System.Collections;
using System.Threading;
using Microsoft.Office.Interop.Excel;

namespace H2T_Material
{
    public partial class frm_OrderFile : H2T_BaseSys.FrmBase
    {
        #region copy & paste to mutilcell
        private string ClipboardData
        {
            get
            {
                IDataObject iData = Clipboard.GetDataObject();
                if (iData == null) return "";

                if (iData.GetDataPresent(DataFormats.Text))
                    return (string)iData.GetData(DataFormats.Text);
                return "";
            }
            set { Clipboard.SetDataObject(value); }
        }
        private void AddRowGrvH_Ori(string data, int rowHandle)
        {
            if (data == string.Empty) return;
            string[] rowData = data.Split('\t');
            int column = grvH_Ori.FocusedColumn.VisibleIndex;
            for (int i = 0; i < rowData.Length; i++)
            {
                if (i >= grvH_Ori.VisibleColumns.Count) break;
                grvH_Ori.SetRowCellValue(rowHandle, grvH_Ori.VisibleColumns[column + i], rowData[i]);
            }
        }
        #endregion
        public frm_OrderFile()
        {
            InitializeComponent();
            info = new Inf_Order();
            cls = new Cls_Order();
        }
        #region Declare 
        Cls_HamTuTao clsHam = new Cls_HamTuTao();
        DataSet dsH_Or = new DataSet();
        DataSet dsC_Or = new DataSet();
        DataSet dsH_Con = new DataSet();
        DataSet dsC_Con = new DataSet();
        private Inf_Order info;
        private Cls_Order cls;

        #endregion
        private void frm_OrderFile_Load(object sender, EventArgs e)
        {
            //MessageBox.Show("VNT1");
            //AllowFind = false;
            AllowCopyObject = false;
            SetCaptionRevision = "Convert";
            SetCaptionPrint = "Clear db";
            SetCaptionFind = "Export";
            #region define connect data winline
            if (mod_Material.gsCompanyCode=="VNT1")
            {
              
                if (cls.ConnectDataBase() == false)
                {
                    MessageBox.Show("Connect to winline fail!");
                }
                else
                {
                    #region Define Voucher Type
                    List<RecordVTCode> listVT = new List<RecordVTCode>();
                    listVT.Add(new RecordVTCode() { IDCCode = "1", NameCCode = "Sales Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "121", NameCCode = "Claim Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "111", NameCCode = "Sample Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "123", NameCCode = "Claim Sample" });
                    var vTCodes = from rec in listVT
                                  select rec;
                    if (vTCodes.Count() > 0)
                        lkupVT.Properties.DataSource = vTCodes.ToList();
                    lkupVT.Properties.DisplayMember = "NameCCode";
                    lkupVT.Properties.ValueMember = "IDCCode";
                    lkupVT.EditValue = "1";
                    #endregion
                }
            }
            if (mod_Material.gsCompanyCode == "1FFH")
            {
                if (cls.ConnectDataBaseFZ() == false)
                {
                    MessageBox.Show("Connect to winline fail!");
                }
                else
                {
                    #region Define Voucher Type
                    List<RecordVTCode> listVT = new List<RecordVTCode>();
                    listVT.Add(new RecordVTCode() { IDCCode = "1", NameCCode = "Sales Order" });
                    var vTCodes = from rec in listVT
                                  select rec;
                    if (vTCodes.Count() > 0)
                        lkupVT.Properties.DataSource = vTCodes.ToList();
                    lkupVT.Properties.DisplayMember = "NameCCode";
                    lkupVT.Properties.ValueMember = "IDCCode";
                    lkupVT.EditValue = "1";
                    #endregion
                }
            }
            if (mod_Material.gsCompanyCode == "05FI")
            {
                if (cls.ConnectDataBaseIndo() == false)
                {
                    MessageBox.Show("Connect to winline fail!");
                }
                else
                {
                    #region Define Voucher Type
                    List<RecordVTCode> listVT = new List<RecordVTCode>();
                    listVT.Add(new RecordVTCode() { IDCCode = "1", NameCCode = "Sales Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "2", NameCCode = "Claim Order" });
                    var vTCodes = from rec in listVT
                                  select rec;
                    if (vTCodes.Count() > 0)
                        lkupVT.Properties.DataSource = vTCodes.ToList();
                    lkupVT.Properties.DisplayMember = "NameCCode";
                    lkupVT.Properties.ValueMember = "IDCCode";
                    lkupVT.EditValue = "1";
                    #endregion
                }
            }
            if (mod_Material.gsCompanyCode == "KVT2")
            {

                if (cls.ConnectDataBaseKV() == false)
                {
                    MessageBox.Show("Connect to winline fail!");
                }
                else
                {
                    #region Define Voucher Type
                    List<RecordVTCode> listVT = new List<RecordVTCode>();
                    listVT.Add(new RecordVTCode() { IDCCode = "1", NameCCode = "Sales Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "121", NameCCode = "Claim Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "111", NameCCode = "Sample Order" });
                    listVT.Add(new RecordVTCode() { IDCCode = "123", NameCCode = "Claim Sample" });
                    var vTCodes = from rec in listVT
                                  select rec;
                    if (vTCodes.Count() > 0)
                        lkupVT.Properties.DataSource = vTCodes.ToList();
                    lkupVT.Properties.DisplayMember = "NameCCode";
                    lkupVT.Properties.ValueMember = "IDCCode";
                    lkupVT.EditValue = "1";
                    #endregion
                }
            }
            #endregion
            #region Khou tao Record FSCode  
            List<RecordFSCode> list = new List<RecordFSCode>();
            list.Add(new RecordFSCode() { IDCCode = "1404", NameCCode = "2017" });
            list.Add(new RecordFSCode() { IDCCode = "1416", NameCCode = "2018" });
            list.Add(new RecordFSCode() { IDCCode = "1428", NameCCode = "2019" });
            var recs = from rec in list
                       select rec;
            if (recs.Count() > 0)
            lke_FsYearCode.Properties.DataSource = recs.ToList();
            lke_FsYearCode.Properties.DisplayMember = "NameCCode";
            lke_FsYearCode.Properties.ValueMember = "IDCCode";
            lke_FsYearCode.EditValue = "1428";
            #endregion
        
        }
        class RecordFSCode
        {
            public string IDCCode { get; set; }
            public string NameCCode { get; set; }
        }
        class RecordVTCode
        {
            public string IDCCode { get; set; }
            public string NameCCode { get; set; }
        }
        protected override void PerformFind()
        {
            try
            {
                #region get openFileDialog
                OpenFileDialog openFileDialog1 = new OpenFileDialog();

                openFileDialog1.InitialDirectory = @"C:\";

                openFileDialog1.Title = "Browse Excel Addidas tempalte Files";

                openFileDialog1.CheckFileExists = true;

                openFileDialog1.CheckPathExists = true;

                openFileDialog1.DefaultExt = "xls";

                openFileDialog1.Filter = "Excel 2003 files (*.xls)|*.xls";

                openFileDialog1.FilterIndex = 2;

                openFileDialog1.RestoreDirectory = true;

                openFileDialog1.ReadOnlyChecked = true;

                openFileDialog1.ShowReadOnly = true;

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    txtExpFile.Text = openFileDialog1.FileName;
                    // focus tab
                    TabPage t = tb1.TabPages[2];
                    tb1.SelectedTab = t; //go to tab
                }
                else
                {
                    return;
                }
                #endregion
            }
            catch (Exception ex)
            {
                return;
            }
            System.Data.DataTable dtOr_All = new System.Data.DataTable();
            if (txtSheetName.Text=="")
            {
                MessageBox.Show("Please entry sheet name excel !","Warning",MessageBoxButtons.OK,MessageBoxIcon.Warning,MessageBoxDefaultButton.Button1);
            }
            else
            {
                dtOr_All = GetDataTabletFromCSVFile(txtExpFile.Text, ".xls", "Yes", txtSheetName.Text);
            }
            ExportPODownload(dtOr_All);
            #region bo
            //if (chkPODownload.Checked==true)
            //{
                
            //}
            //else
            //{
            //    ExportPO(dtOr_All);
            //}
            #endregion
            base.PerformFind();
        }
        private void ExportPODownload(System.Data.DataTable dtOr_All)
        {
            
            // get data into dttemp
            #region define table teporary
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn OrderNumberColumn;
            DataColumn VersionColumn;
            DataColumn LineCenterColumn;
            DataColumn RowNoColumn;
            dt = new System.Data.DataTable();
            OrderNumberColumn = new DataColumn("OrderNumberH", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            RowNoColumn = new DataColumn("RowNo", Type.GetType("System.Int32"));

            dt.Columns.Add(OrderNumberColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(LineCenterColumn);
            dt.Columns.Add(RowNoColumn);
            //--------------------------------------------------
            DataRow drE; System.Data.DataTable dtE;
            DataColumn OrderNumberHColumn;
            DataColumn VersionHColumn;
            DataColumn ETDColumn;
            dtE = new System.Data.DataTable();
            OrderNumberHColumn = new DataColumn("OrderNumberH", Type.GetType("System.String"));
            VersionHColumn = new DataColumn("VersionH", Type.GetType("System.String"));
            ETDColumn = new DataColumn("ETD", Type.GetType("System.DateTime"));

            dtE.Columns.Add(OrderNumberHColumn);
            dtE.Columns.Add(VersionHColumn);
            dtE.Columns.Add(ETDColumn);

            #endregion
            //dr = dt.NewRow();
            int f_point = -1;

            //dr["Version"] = dtOr_All.Rows[9][9].ToString();
            //dr["OrderNumberH"] = dtOr_All.Rows[7][9].ToString();
            #region get Ordernumber , version, line , row
            for (int i = 0; i < dtOr_All.Rows.Count; i++)
            {

                if (dtOr_All.Rows[i][52].ToString().Trim() == "Description / Supplier Material Name")//[4]
                {
                    f_point = i;
                }
                else if (dtOr_All.Columns[52].Caption.Trim() == "Description / Supplier Material Name" && i == 0)
                {
                    f_point = i;
                }
                if (i > f_point && f_point > -1)
                {
                    if (dtOr_All.Rows[i][52].ToString() == "")
                    {
                        break;
                    }

                    dr = dt.NewRow();
                    dr["Version"] = dtOr_All.Rows[i][3].ToString();//[9][9]
                    dr["OrderNumberH"] = dtOr_All.Rows[i][1].ToString();//[7][9]
                    dr["LineCenter"] = dtOr_All.Rows[i][50].ToString();
                    dr["RowNo"] = i;
                    dt.Rows.Add(dr);
                }
            }
            #endregion
            #region set data into excel
            DataSet dsETD = new DataSet();
            try
            {
                #region define Excel setting
                string Filepath = txtExpFile.Text;
                string SheetName = "";
                if (txtSheetName.Text == "")
                {
                    MessageBox.Show("Please entry sheet name excel !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                    return;
                }
                else
                {
                    SheetName = txtSheetName.Text;
                }
                // Microsoft.Office.Interop.Excel.Application xlApp;
                Microsoft.Office.Interop.Excel.Workbook xlWorkBook;
                Microsoft.Office.Interop.Excel._Worksheet xlWorkSheet;
                // Microsoft.Office.Interop.Excel.Range xlRange = null;
                object misValue = Type.Missing;

                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                xlWorkBook = xlApp.Workbooks.Add(Filepath);

                // xlWorkBook = xlApp.Workbooks.Open(Filepath, misValue, false, misValue, misValue, misValue, true, misValue, misValue, misValue, misValue, misValue, false, misValue, misValue);
                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets[SheetName];

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.ActiveSheet;

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets.get_Item(SheetName);
                xlWorkSheet.Activate();
                #endregion
                System.Data.DataTable dt_Group = new System.Data.DataTable();

                dt_Group = dt.AsEnumerable()
       .GroupBy(r => new { Col1 = r["OrderNumberH"] })
       .Select(g => g.OrderBy(r => r["LineCenter"]).First())
       .CopyToDataTable();

                //get ETD for dt_Group
                if (dt_Group.Rows.Count>0)
                {
                    progressBar2.Minimum = 0;
                    progressBar2.Value = 0;
                    progressBar2.Maximum = 100;
                    for (int e = 0; e < dt_Group.Rows.Count; e++)
                    {
                        DataSet DsE = new DataSet();
                        DsE = info.ExportETDTemplateAdidas(dt_Group.Rows[e]["OrderNumberH"].ToString(), dt_Group.Rows[e]["Version"].ToString(), lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                        if (DsE.Tables[0].Rows.Count>0)
                        {
                            drE = dtE.NewRow();
                            drE["OrderNumberH"] = DsE.Tables[0].Rows[0]["OrderNumberH"].ToString();//[9][9]
                            drE["VersionH"] = DsE.Tables[0].Rows[0]["Version"].ToString();//[7][9]
                            drE["ETD"] = DsE.Tables[0].Rows[0]["DeliveryDate"].ToString();
                            dtE.Rows.Add(drE);
                        }
                        int percents = (e * 100) / dt_Group.Rows.Count;
                        progressBar2.Value = percents;
                    }
                }

                if (dt.Rows.Count > 0)
                {
                    DataSet dsDT = new DataSet();
                    dsDT = info.GetDateTimeGMTServer();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        //if (dt.Rows[0]["LineCenter"].ToString().Trim() != "")
                        //{
                           // dsETD = info.ExportETDTemplateAdidas(dt.Rows[0]["OrderNumberH"].ToString(), dt.Rows[0]["Version"].ToString(), lke_FsYearCode.EditValue.ToString());
                            DataRow[] foundRows;
                            if (dtE.Rows.Count > 0)
                            {
                                foundRows = dtE.Select("OrderNumberH = '" + dt.Rows[i]["OrderNumberH"].ToString().Trim() + "'");
                                if (foundRows.Length > 0)
                                {
                                    for (int f = 0; f < foundRows.Length; f++)
                                    {
                                        //SetDataintoExcel(txtExpFile.Text, long.Parse(dt.Rows[i]["RowNo"].ToString()), foundRows[f]["SellerConfDeliDate"].ToString(), foundRows[f]["SellerUpdaDeliDate"].ToString(),
                                        //    foundRows[f]["ConfDeliQty"].ToString(), foundRows[f]["UpdaDeliQty"].ToString(),
                                        //    foundRows[f]["SellerConfDeliDateLast"].ToString(), foundRows[f]["SellerUpdaDeliDateLast"].ToString(),
                                        //    foundRows[f]["ConfDeliQtyLast"].ToString(), foundRows[f]["UpdaDeliQtyLast"].ToString());
                                        DateTime da_date = new DateTime();
                                        string daStr = "";
                                        try
                                        {
                                            da_date = Convert.ToDateTime(foundRows[f]["ETD"].ToString());
                                            daStr = da_date.ToString("yyyy-MM-dd");
                                        }
                                        catch
                                        {
                                            return;
                                        }
                                        xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 75 + 1] = daStr;
                                        if (daStr != "")
                                        {
                                            if (dsDT.Tables[0].Rows.Count>0)
	                                        {
                                                xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 2 + 1] = dsDT.Tables[0].Rows[0][0].ToString();
	                                        }
                                        }
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 26 + 1] = foundRows[f]["SellerUpdaDeliDate"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 27 + 1] = foundRows[f]["ConfDeliQty"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 28 + 1] = foundRows[f]["UpdaDeliQty"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 29 + 1] = foundRows[f]["SellerConfDeliDateLast"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 30 + 1] = foundRows[f]["SellerUpdaDeliDateLast"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 31 + 1] = foundRows[f]["ConfDeliQtyLast"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 32 + 1] = foundRows[f]["UpdaDeliQtyLast"].ToString();
                                   }
                                }
                            }
                        //}
                    }
                }
                if (Filepath != null || Filepath != "")
                {
                    try
                    {
                        xlApp.ActiveWorkbook.SaveAs(Filepath);
                        xlApp.Quit();

                        xlWorkSheet = null;
                        xlWorkBook = null;
                        xlApp = null;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Can not save file [" + ex.Message + "]");
                    }
                }
                else
                {
                    xlApp.Visible = true;
                }
                MessageBox.Show("Fill data into PO Adidas template successfully!");
                progressBar2.Value = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            #endregion
        }
   
        private void ExportPO(System.Data.DataTable dtOr_All)
        {
            // get data into dttemp
            #region define table teporary
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn OrderNumberColumn;
            DataColumn VersionColumn;
            DataColumn LineCenterColumn;
            DataColumn RowNoColumn;
            DataColumn OrderNumberCenterColumn;

            dt = new System.Data.DataTable();
            OrderNumberColumn = new DataColumn("OrderNumberH", Type.GetType("System.String"));
            OrderNumberCenterColumn = new DataColumn("OrderNumberC", Type.GetType("System.String")); 
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            RowNoColumn = new DataColumn("RowNo", Type.GetType("System.Int32"));

            dt.Columns.Add(OrderNumberColumn);
            dt.Columns.Add(OrderNumberCenterColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(LineCenterColumn);
            dt.Columns.Add(RowNoColumn);

            #endregion
            dr = dt.NewRow();
            int f_point = -1;

            dr["Version"] = dtOr_All.Rows[9][9].ToString();
            dr["OrderNumberH"] = dtOr_All.Rows[7][9].ToString();

            #region get Ordernumber , version, line , row
            for (int i = 0; i < dtOr_All.Rows.Count; i++)
            {

                if (dtOr_All.Rows[i][3].ToString().Trim() == "Line#")
                {
                    f_point = i;
                }
                if (i > f_point && f_point > -1)
                {
                    if (dtOr_All.Rows[i][5].ToString() == "")
                    {
                        break;
                    }
                    dr["LineCenter"] = dtOr_All.Rows[i][3].ToString();
                    dr["RowNo"] = i;
                    dr["OrderNumberC"] = dtOr_All.Rows[i][33].ToString();
                    dt.Rows.Add(dr);

                    dr = dt.NewRow();
                    dr["Version"] = dtOr_All.Rows[9][9].ToString();
                    //dr["OrderNumberC"] = dtOr_All.Rows[i][33].ToString();
                }
            }
            #endregion
            #region set data into excel
            DataSet dsETD = new DataSet();
            try
            {
                #region define Excel setting
                string Filepath = txtExpFile.Text;
                string SheetName = "PO";
                // Microsoft.Office.Interop.Excel.Application xlApp;
                Microsoft.Office.Interop.Excel.Workbook xlWorkBook;
                Microsoft.Office.Interop.Excel._Worksheet xlWorkSheet;
                // Microsoft.Office.Interop.Excel.Range xlRange = null;
                object misValue = Type.Missing;

                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                xlWorkBook = xlApp.Workbooks.Add(Filepath);

                // xlWorkBook = xlApp.Workbooks.Open(Filepath, misValue, false, misValue, misValue, misValue, true, misValue, misValue, misValue, misValue, misValue, false, misValue, misValue);
                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets[SheetName];

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.ActiveSheet;

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets.get_Item(SheetName);
                xlWorkSheet.Activate();
                #endregion
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dsETD = info.ExportETDTemplateAdidas(dt.Rows[i]["OrderNumberH"].ToString() == "" ? dt.Rows[i]["OrderNumberC"].ToString() : dt.Rows[i]["OrderNumberH"].ToString() + " / " + dt.Rows[i]["OrderNumberC"].ToString(),
                          dt.Rows[i]["Version"].ToString(), lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                        if (dt.Rows[i]["OrderNumberC"].ToString().Trim() != "") //LineCenter
                        {
                            DataRow[] foundRows;
                            if (dsETD.Tables[0].Rows.Count > 0)
                            {
                                foundRows = dsETD.Tables[0].Select("OrderNumberH = '" + dt.Rows[i]["OrderNumberC"].ToString().Trim() + "'"); //LineCenter
                                if (foundRows.Length > 0)
                                {
                                    for (int f = 0; f < foundRows.Length; f++)
                                    {
                                        //SetDataintoExcel(txtExpFile.Text, long.Parse(dt.Rows[i]["RowNo"].ToString()), foundRows[f]["SellerConfDeliDate"].ToString(), foundRows[f]["SellerUpdaDeliDate"].ToString(),
                                        //    foundRows[f]["ConfDeliQty"].ToString(), foundRows[f]["UpdaDeliQty"].ToString(),
                                        //    foundRows[f]["SellerConfDeliDateLast"].ToString(), foundRows[f]["SellerUpdaDeliDateLast"].ToString(),
                                        //    foundRows[f]["ConfDeliQtyLast"].ToString(), foundRows[f]["UpdaDeliQtyLast"].ToString());
                                        xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 25 + 1] = foundRows[f]["DeliveryDate"].ToString();//foundRows[f]["SellerConfDeliDate"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 26 + 1] = foundRows[f]["SellerUpdaDeliDate"].ToString();
                                        xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 27 + 1] = foundRows[f]["QtyShipped"].ToString();//foundRows[f]["ConfDeliQty"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 28 + 1] = foundRows[f]["UpdaDeliQty"].ToString();
                                        //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 29 + 1] = foundRows[f]["SellerConfDeliDateLast"].ToString();
                                       // xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 30 + 1] = foundRows[f]["SellerUpdaDeliDateLast"].ToString();
                                       // xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 31 + 1] = foundRows[f]["ConfDeliQtyLast"].ToString();
                                      //  xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 32 + 1] = foundRows[f]["UpdaDeliQtyLast"].ToString();
                                    }
                                }
                            }
                        }
                    }
                }
                if (Filepath != null || Filepath != "")
                {
                    try
                    {
                        xlApp.ActiveWorkbook.SaveAs(Filepath);
                        xlApp.Quit();

                        xlWorkSheet = null;
                        xlWorkBook = null;
                        xlApp = null;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Can not save file [" + ex.Message + "]");
                    }
                }
                else
                {
                    xlApp.Visible = true;
                }
                MessageBox.Show("Fill data into PO Adidas template successfully!");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            #endregion
        }
        private void SetDataintoExcel(string PathFile, long rowno, string SellerConfDeliDate, string SellerUpdaDeliDate, string ConfDeliQty, string UpdaDeliQty,
        string SellerConfDeliDateLast, string SellerUpdaDeliDateLast, string ConfDeliQtyLast, string UpdaDeliQtyLast)
        {
            try
            {

                //System.Data.DataTable dt = new System.Data.DataTable();
                //if (dt == null || dt.Columns.Count == 0)
                //{
                //    throw new Exception("ExportToExcel: Null or empty input table!\n");
                //}
                string Filepath = PathFile;
                string SheetName = "PO Template - FTW no formula";
                // Microsoft.Office.Interop.Excel.Application xlApp;
                Microsoft.Office.Interop.Excel.Workbook xlWorkBook;
                Microsoft.Office.Interop.Excel._Worksheet xlWorkSheet;
                // Microsoft.Office.Interop.Excel.Range xlRange = null;
                object misValue = Type.Missing;

                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                xlWorkBook = xlApp.Workbooks.Add(Filepath);

                // xlWorkBook = xlApp.Workbooks.Open(Filepath, misValue, false, misValue, misValue, misValue, true, misValue, misValue, misValue, misValue, misValue, false, misValue, misValue);
                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets[SheetName];

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.ActiveSheet;

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets.get_Item(SheetName);
                xlWorkSheet.Activate();

                xlApp.Cells[rowno + 2, 25 + 1] = SellerConfDeliDate;
                xlApp.Cells[rowno + 2, 26 + 1] = SellerUpdaDeliDate;
                xlApp.Cells[rowno + 2, 27 + 1] = ConfDeliQty;
                xlApp.Cells[rowno + 2, 28 + 1] = UpdaDeliQty;
                xlApp.Cells[rowno + 2, 29 + 1] = SellerConfDeliDateLast;
                xlApp.Cells[rowno + 2, 30 + 1] = SellerUpdaDeliDateLast;
                xlApp.Cells[rowno + 2, 31 + 1] = ConfDeliQtyLast;
                xlApp.Cells[rowno + 2, 32 + 1] = UpdaDeliQtyLast;

                if (Filepath != null || Filepath != "")
                {
                    try
                    {
                        xlApp.ActiveWorkbook.SaveAs(Filepath);
                        xlApp.Quit();

                        xlWorkSheet = null;
                        xlWorkBook = null;
                        xlApp = null;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Can not save file [" + ex.Message + "]");
                    }
                }
                else
                {
                    xlApp.Visible = true;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        protected override void PerformRevision()
        {
            splashScreenManager1.ShowWaitForm();
            Thread.Sleep(50);
            // PO Download New 
            if (rdVerticalDL.Checked == true)
            {
                ConvertDataVerticalSizeDL();
            }
            else if (rdHorizontalDL.Checked == true)
            {
                ConvertDataHorizontalSizeDL();
            }
            else if (rdGroupSizeDL.Checked == true)
            {
                ConvertDataGroupSizeDL();
            }
            #region cancel
            //if (chkPODownload.Checked==true)
            //{
            //    ConvertData1linePODownload();
            //   // if (chkSizeGroup.Checked == true)
            //   // {
            //   //     ConvertDataGroupSizeG();
            //   // }
            //   // else
            //   // {
            //   //     if (chkGroup.Checked == true)
            //   //     {
            //   //         ConvertDataGroupSizeOrderN();
            //   //     }
            //   // }
            //}
            //else
            //{
            //    if (chkLine.Checked == true)
            //    {
            //        if (chkSizeGroup.Checked == true)
            //        {
            //            ConvertData1line_SizeG();
            //        }
            //        else
            //        {
            //            ConvertData1line();
            //        }

            //    }
            //    else
            //    {
            //if (chkSizeGroup.Checked == true)
            //{
            //    ConvertDataGroupSizeG();
            //}
            //else
            //{
            //    if (chkGroup.Checked == true)
            //    {
            //        ConvertDataGroupSizeOrderN();
            //    }
            //    else
            //    {
            //        ConvertDataGroup();
            //    }

            //}
            //    }
            //}
            #endregion

            #region grv Header Con
            clsHam.CreateGrid(dsH_Con.Tables[0], grvH_Con);
            clsHam.SetDataSourceGrid(grdH_Con, dsH_Con);
            grvH_Con.BestFitColumns();
            #endregion
            #region grv Center Con
            clsHam.CreateGrid(dsC_Con.Tables[0], grvC_Con);
            clsHam.SetDataSourceGrid(grdC_Con, dsC_Con);
            grvC_Con.BestFitColumns();
            #endregion


            if (txtErrorList.Text.Trim() != "")
            {
                if (MessageBox.Show("this file had error .Would you like to see these error ?", "Error", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                {
                    TabPage t = tb1.TabPages[3];
                    tb1.SelectedTab = t; //go to tab
                }
                else
                {
                    TabPage t = tb1.TabPages[1];
                    tb1.SelectedTab = t; //go to tab
                }
            }
            else
            {
                TabPage t = tb1.TabPages[1];
                tb1.SelectedTab = t; //go to tab
            }
            base.PerformRevision();
            splashScreenManager1.CloseWaitForm();
        }
        private void ConvertDataGroupSizeDL()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            //DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            //DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;

            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            //TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));

            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            //dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            //dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);

            dtH.Columns.Add(T1SupplierNameColumn);
            dtH.Columns.Add(T1AddressL1Column);
            dtH.Columns.Add(T1AddressCountryColumn);
            dtH.Columns.Add(Contact_BuyerColumn);
            dtH.Columns.Add(ShipTo_T1FactoryNameColumn);
            dtH.Columns.Add(T1AddressL1_ShipToColumn);
            dtH.Columns.Add(T1AddressCountry_ShipToColumn);
            dtH.Columns.Add(PaymentTermTextColumn);
            dtH.Columns.Add(CountryofOriginColumn);
            #endregion
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["OrderNumber"] })
   .Select(g => g.OrderBy(r => r["LineID"]).First())
   .CopyToDataTable();

            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count > 0)
                {
                    for (int t = 0; t < dt_Group.Rows.Count; t++)
                    {
                        string s_OrderNumber = dt_Group.Rows[t]["OrderNumber"].ToString();
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {

                            drH = dtH.NewRow();
                            drH["VOUCHERKEY"] = t + 1;
                            drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                            #region Account info
                            DataSet dstmp = new DataSet();
                            dstmp = info.LoadAccount_DeliveryV5(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (dstmp.Tables[0].Rows.Count == 2)
                            {
                                drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                            }
                            else
                            {
                                drH["InvoiceName"] = "";
                                drH["InvoiceStreet"] = "";
                                drH["InvoiceStreet2"] = "";
                                drH["InvoiceCity"] = "";
                                drH["CountryInvoiceAddress"] = "";
                                drH["DeliveryName"] = "";
                                drH["DeliveryStreet"] = "";
                                drH["DeliveryCity"] = "";
                                drH["CountryDeliveryAddress"] = "";
                            }
                            #endregion
                            drH["SerialNo"] = "";
                            //drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                            drH["FCdate"] = "";
                            if (mod_Material.gsCompanyCode == "05FI")
                            {
                                drH["TextLine4_OrderDate"] = String.Format("{0:MM-dd-yyyy}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                            }
                            else
                            {
                                drH["TextLine4_OrderDate"] = String.Format("{0:d}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString())); ;
                            }

                            drH["OrderNo"] = "";
                            drH["OrderConfirmationDate"] = "";
                            if (dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() == "")
                            {
                                drH["TextLine3_PONo"] = s_OrderNumber;
                            }
                            else
                            {
                                drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() + " / " + s_OrderNumber;
                            }

                            //drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                            drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                            //drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                            drH["VoucherType"] = 1;
                            // get Boxtype theo product code
                            if (chkHel.Checked == true)
                            {
                                drH["OrderType"] = "BX5";
                            }
                            else
                            {
                                DataSet dstmp_BoxType = new DataSet();
                                dstmp_BoxType = info.LoadBoxTypeMainProductv5(dsC_Or.Tables[0].Rows[t]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[t]["ArticleNumberAd"].ToString().Replace(",", "").Trim(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                {
                                    drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                }
                            }

                            drH["PriceList"] = 1;
                            if (dt_Group.Rows[t]["SellerConfDeliDate"].ToString() == "")
                            {
                                drH["TextLine1_ETD"] = "";
                            }
                            else
                            {
                                try
                                {
                                    drH["TextLine1_ETD"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(dt_Group.Rows[t]["SellerConfDeliDate"].ToString()));
                                }
                                catch (Exception ex)
                                {
                                    drH["TextLine1_ETD"] = "";
                                }

                            }
                            //drH["TextLine1_ETD"] = "";
                            if (mod_Material.gsCompanyCode == "05FI" || mod_Material.gsCompanyCode == "VNT1")
                            {
                                if (dt_Group.Rows[t]["BuyerReqDate"].ToString() == "")
                                {
                                    drH["TextLine2"] = "";
                                }
                                else
                                {
                                    try
                                    {
                                        drH["TextLine2"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(dt_Group.Rows[t]["BuyerReqDate"].ToString()));
                                    }
                                    catch (Exception ex)
                                    {
                                        drH["TextLine2"] = "";

                                    }
                                }
                            }
                            else
                            {
                               // drH["TextLine2"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(dt_Group.Rows[t]["BuyerReqDate"].ToString()));
                                drH["TextLine2"] = "";
                            }
                            drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                            if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText1_Incoterm"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText1_Incoterm"] = "0";
                            }
                            if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText3_ShipBy"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText3_ShipBy"] = "0";
                            }
                            drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                            drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                            drH["T1SupplierName"] = dsH_Or.Tables[0].Rows[i]["T1SupplierName"].ToString();
                            drH["T1AddressL1"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1"].ToString();
                            drH["T1AddressCountry"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry"].ToString();
                            drH["Contact_Buyer"] = dsH_Or.Tables[0].Rows[i]["Contact_Buyer"].ToString();
                            drH["ShipTo_T1FactoryName"] = dsH_Or.Tables[0].Rows[i]["ShipTo_T1FactoryName"].ToString();
                            drH["T1AddressL1_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1_ShipTo"].ToString();
                            drH["T1AddressCountry_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry_ShipTo"].ToString();
                            drH["PaymentTerm"] = dsH_Or.Tables[0].Rows[i]["PaymentTerm"].ToString();
                            drH["CountryofOrigin"] = dsH_Or.Tables[0].Rows[i]["CountryofOrigin"].ToString();

                            dtH.Rows.Add(drH);
                        }
                    }
                }

                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn SizeGroupColumn;
            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;

            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));
            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            dtC.Columns.Add(UnitPriceAdColumn);

            dtC.Columns.Add(SizeGroupColumn);
            dtC.Columns.Add(MaterialColorColumn);
            dtC.Columns.Add(UOMColumn);
            dtC.Columns.Add(AdidasPlanDateColumn);
            dtC.Columns.Add(AdidasOrderNumberColumn);

            dtC.Columns.Add(AdditionalOpt1Column);
            dtC.Columns.Add(AdditionalOpt2Column);
            dtC.Columns.Add(AdditionalOpt3Column);
            dtC.Columns.Add(AdditionalOpt4Column);
            dtC.Columns.Add(AdditionalOpt5Column);

            #endregion
            #region xu ly center
            progressBar1.Minimum = 0;
            progressBar1.Value = 0;
            progressBar1.Maximum = 100;
            for (int c = 0; c < dt_Group.Rows.Count; c++)
            {
                // tim` nhung line cua order number tuong ung' de set line number va` set product code
                DataRow[] dtRows;
                // dtRows = dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                dtRows = dsC_Or.Tables[0].Select("OrderNumber = '" + dt_Group.Rows[c]["OrderNumber"].ToString() + "'");
                long totalqty = 0;
                totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());
                // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());

                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                    int line = 1;
                    double SumValue = 0;
                    for (int o = 0; o < dtRows.Length; o++)
                    {


                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                        // int soline = 0;// so line = so size
                        int vtSize = 0;
                        //string str_Size_Qty_Price = "";

                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region xu ly main product (ko update total value)
                        //if (o == 0)
                        //{
                        //    DataSet ds_Product = new DataSet();
                        //    ds_Product = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                        //    if (ds_Product.Tables[0].Rows.Count > 0)
                        //    {
                        //        drC["VOUCHERKEY"] = c + 1;
                        //        drC["FileType"] = "1";
                        //        drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                        //        drC["QtyShipped"] = totalqty;
                        //        drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                        //        drC["Ext1"] = "";
                        //        drC["Ext2"] = "";
                        //        drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                        //        drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                        //        drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                        //        drC["PriceUnit"] = 0;
                        //        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                        //        drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                        //        //drC["TotalValue"] = totalValue;
                        //        drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                        //        drC["LineNumber"] = 1;
                        //        drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                        //        drC["PositionText"] = "";
                        //        drC["DeliveryDate"] = "";
                        //        drC["Confirmeddeldate"] = "";
                        //        drC["Ref"] = dtRows[o]["Ref"].ToString();
                        //        drC["Season"] = dtRows[o]["Season"].ToString();
                        //        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                        //        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                        //        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                        //        drC["CRD"] = dtRows[o]["CRD"].ToString();

                        //        dtC.Rows.Add(drC);
                        //    }
                        //}
                        #endregion
                        #region lay data cho size-qty-price
                        // dang lam den day
                        DataSet ds_Size = new DataSet();
                        if (dtRows[o]["MainProduct"].ToString() != "")
                        {
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceGroupSizeHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePriceGroupSize(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                DataSet ds_ProductColorSize = new DataSet();
                                ds_ProductColorSize = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                                {
                                    string ProductNmber = "";
                                    ProductNmber = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    DataRow[] dtRows_Old;
                                    dtRows_Old = dtC.Select("OrderNumber = '" + dtRows[o]["OrderNumber"].ToString() + "' and ProductNumber ='" + ProductNmber + "' and Ext1 = '" + dtRows[o]["ColorCode"].ToString() + "' and Ext2 ='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (dtRows_Old.Length > 0)
                                    {
                                        dtRows_Old[0]["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) + int.Parse(dtRows_Old[0]["QtyShipped"].ToString());
                                        dtRows_Old[0]["TotalValue"] = (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString())) + Double.Parse(dtRows_Old[0]["TotalValue"].ToString());
                                       // SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                    }
                                    else
                                    {
                                        #region set 
                                        drC = dtC.NewRow();
                                        drC["VOUCHERKEY"] = c + 1;
                                        drC["FileType"] = "1";
                                        drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString());
                                        drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                        drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                        drC["Ext2"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                        drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                        drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                        drC["PriceUnit"] = double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                        drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                        drC["TotalValue"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        //SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                        drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                        drC["LineNumber"] = line;// +1;
                                        drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                        drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                        drC["DeliveryDate"] = dtRows[o]["SellerConfDeliDate"].ToString();
                                        drC["Confirmeddeldate"] = "";
                                        drC["Ref"] = dtRows[o]["Ref"].ToString();
                                        drC["Season"] = dtRows[o]["Season"].ToString();
                                        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                        drC["CRD"] = dtRows[o]["CRD"].ToString();

                                        drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                        drC["SellerConfDeliDate"] = dtRows[o]["SellerConfDeliDate"].ToString();
                                        drC["SellUpdaDeliDate"] = "";
                                        drC["ConfDeliQty"] = 0;
                                        drC["UpdaDeliQty"] = 0;
                                        drC["SellerConfDeliDateLast"] = "";
                                        drC["SellerUpdaDeliDateLast"] = "";
                                        drC["ConfDeliQtyLast"] = 0;
                                        drC["UpdaDeliQtyLast"] = 0;
                                        drC["UnitPriceAdidas"] = dtRows[o]["UnitPriceAdidas"].ToString();

                                        drC["SizeGroup"] = dtRows[o]["SizeGroup"].ToString();
                                        drC["MaterialColor"] = dtRows[o]["MaterialColor"].ToString();
                                        drC["UOM"] = dtRows[o]["UOM"].ToString();
                                        drC["AdidasPlanDate"] = dtRows[o]["AdidasPlanDate"].ToString();
                                        drC["AdidasOrderNumber"] = dtRows[o]["AdidasOrderNumber"].ToString();

                                        drC["AdditionalOpt1"] = dtRows[o]["AdditionalOpt1"].ToString();
                                        drC["AdditionalOpt2"] = dtRows[o]["AdditionalOpt2"].ToString();
                                        drC["AdditionalOpt3"] = dtRows[o]["AdditionalOpt3"].ToString();
                                        drC["AdditionalOpt4"] = dtRows[o]["AdditionalOpt4"].ToString();
                                        drC["AdditionalOpt5"] = dtRows[o]["AdditionalOpt5"].ToString();
                                        #endregion
                                        dtC.Rows.Add(drC);
                                        line++;
                                    }
                                }
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dt_Group.Rows[c]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],SizeCode[" + dtRows[o]["SizeGroup"].ToString() + "] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dt_Group.Rows[c]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],SizeCode[" + dtRows[o]["SizeGroup"].ToString() + "] on Original Tab";
                                }
                            }
                        }
                        #endregion

                        #region xu ly update totalvalue
                        //for (int k = 0; k < dtC.Rows.Count; k++)
                        //{
                        //    if (dtC.Rows[k]["OrderNumber"].ToString() == dt_Group.Rows[c]["OrderNumber"].ToString())
                        //    {
                        //        dtC.Rows[k]["TotalValue"] = SumValue;
                        //        break;
                        //    }
                        //}
                        #endregion
                    }

                }
                int percents = (c * 100) / dt_Group.Rows.Count;
                progressBar1.Value = percents;
            }
            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
            // check error
           // --header
            System.Data.DataTable dt_CheckH = new System.Data.DataTable();

            dt_CheckH = dsH_Con.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["VoucherKey"] })
   .Select(g => g.OrderBy(r => r["VoucherKey"]).First())
   .CopyToDataTable();
            System.Data.DataTable dt_CheckC = new System.Data.DataTable();
        
            if (dsC_Con.Tables[0].Rows.Count > 0)
            {
                //---center
                dt_CheckC = dsC_Con.Tables[0].AsEnumerable()
       .GroupBy(r => new { Col1 = r["VoucherKey"] })
       .Select(g => g.OrderBy(r => r["VoucherKey"]).First())
       .CopyToDataTable();

                int SoVKH = 0, SoVKC = 0;
                if (dt_CheckH.Rows.Count > 0)
                {
                    SoVKH = dt_CheckH.Rows.Count;
                }
                if (dt_CheckC.Rows.Count > 0)
                {
                    SoVKC = dt_CheckC.Rows.Count;
                }

                if (SoVKH != SoVKC)
                {
                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check total order number between Header and Center [Header:" + SoVKH + "],[Center:" + SoVKC + "] on Converted Tab";
                }
            }
            else
            {
                MessageBox.Show("Please check Center data!");

            }
          
        }
        private void ConvertDataHorizontalSizeDL()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            //DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            //DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;

            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            //TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));

            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            //dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            //dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);

            dtH.Columns.Add(T1SupplierNameColumn);
            dtH.Columns.Add(T1AddressL1Column);
            dtH.Columns.Add(T1AddressCountryColumn);
            dtH.Columns.Add(Contact_BuyerColumn);
            dtH.Columns.Add(ShipTo_T1FactoryNameColumn);
            dtH.Columns.Add(T1AddressL1_ShipToColumn);
            dtH.Columns.Add(T1AddressCountry_ShipToColumn);
            dtH.Columns.Add(PaymentTermTextColumn);
            dtH.Columns.Add(CountryofOriginColumn);

            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count > 0)
                {
                    for (int p = 0; p < dsC_Or.Tables[0].Rows.Count; p++)
                    {
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {
                            if (p == i)
                            {
                                drH = dtH.NewRow();
                                drH["VOUCHERKEY"] = p + 1;
                                drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                                #region Account info
                                DataSet dstmp = new DataSet();
                                dstmp = info.LoadAccount_DeliveryV5(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                if (dstmp.Tables[0].Rows.Count == 2)
                                {
                                    drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                    drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                    drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                    drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                    drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                    drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                    drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                    drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                    drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                                }
                                else
                                {
                                    drH["InvoiceName"] = "";
                                    drH["InvoiceStreet"] = "";
                                    drH["InvoiceStreet2"] = "";
                                    drH["InvoiceCity"] = "";
                                    drH["CountryInvoiceAddress"] = "";
                                    drH["DeliveryName"] = "";
                                    drH["DeliveryStreet"] = "";
                                    drH["DeliveryCity"] = "";
                                    drH["CountryDeliveryAddress"] = "";
                                }
                                #endregion
                                drH["SerialNo"] = "";
                                //drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                                drH["FCdate"] = "";
                                if (mod_Material.gsCompanyCode == "05FI")
                                {
                                    drH["TextLine4_OrderDate"] = String.Format("{0:MM-dd-yyyy}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                                }
                                else
                                {
                                    //drH["TextLine4_OrderDate"] = String.Format("{0:MM-dd-yyyy}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                                    drH["TextLine4_OrderDate"] = String.Format("{0:d}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                                }
                                drH["OrderNo"] = "";
                                drH["OrderConfirmationDate"] = "";
                                drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                                drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                                //drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                                drH["VoucherType"] = lkupVT.EditValue.ToString().Trim();
                                // get Boxtype theo product code
                                if (chkHel.Checked == true)
                                {
                                    drH["OrderType"] = "BX5";
                                }
                                else
                                {
                                    DataSet dstmp_BoxType = new DataSet();
                                    dstmp_BoxType = info.LoadBoxTypeMainProductv5(dsC_Or.Tables[0].Rows[p]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[p]["ArticleNumberAd"].ToString().Replace(",", "").Trim(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                    if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                    {
                                        drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                    }
                                }
                                string str_ETD = "";
                                DataRow[] OrderRows;
                                OrderRows = dsC_Or.Tables[0].Select("OrderNumber ='" + dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString().Trim() + "'");
                                if (OrderRows.Length>0)
                                {
                                    str_ETD = OrderRows[0]["SellerConfDeliDate"].ToString().Trim();
                                }
                                else
                                {
                                    str_ETD = "";
                                }
                                drH["PriceList"] = 1;
                                if (str_ETD == "")
                                {
                                    drH["TextLine1_ETD"] = "";
                                }
                                else
                                {
                                    try
                                    {
                                        drH["TextLine1_ETD"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(str_ETD));
                                    }
                                    catch (Exception ex)
                                    {
                                        drH["TextLine1_ETD"] = "";
                                    }
                                }
                                if (mod_Material.gsCompanyCode == "05FI" || mod_Material.gsCompanyCode == "VNT1" )
                                {
                                    if (OrderRows[0]["BuyerReqDate"].ToString().Trim() == "")
                                    {
                                        drH["TextLine2"] = "";
                                    }
                                    else
                                    {
                                        try
                                        {
                                            drH["TextLine2"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(OrderRows[0]["BuyerReqDate"].ToString().Trim()));
                                        }
                                        catch (Exception ex)
                                        {
                                            drH["TextLine2"] = "";

                                        }
                                    }

                                   
                                }
                                else
                                {
                                    drH["TextLine2"] = "";
                                }
                                drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                                if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                                {
                                    String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                    if (str.Length > 0)
                                    {
                                        drH["FreeText1_Incoterm"] = str[0];
                                    }
                                }
                                else
                                {
                                    drH["FreeText1_Incoterm"] = "0";
                                }
                                if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                                {
                                    String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                    if (str.Length > 0)
                                    {
                                        drH["FreeText3_ShipBy"] = str[0];
                                    }
                                }
                                else
                                {
                                    drH["FreeText3_ShipBy"] = "0";
                                }
                                drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                                drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                                drH["T1SupplierName"] = dsH_Or.Tables[0].Rows[i]["T1SupplierName"].ToString();
                                drH["T1AddressL1"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1"].ToString();
                                drH["T1AddressCountry"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1"].ToString();
                                drH["Contact_Buyer"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry"].ToString();
                                drH["ShipTo_T1FactoryName"] = dsH_Or.Tables[0].Rows[i]["ShipTo_T1FactoryName"].ToString();
                                drH["T1AddressL1_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1_ShipTo"].ToString();
                                drH["T1AddressCountry_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry_ShipTo"].ToString();
                                drH["PaymentTerm"] = dsH_Or.Tables[0].Rows[i]["PaymentTerm"].ToString();
                                drH["CountryofOrigin"] = dsH_Or.Tables[0].Rows[i]["CountryofOrigin"].ToString();

                                dtH.Rows.Add(drH);
                            }
                        }
                    }
                }

                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn SizeGroupColumn;
            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;

            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));
            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            dtC.Columns.Add(UnitPriceAdColumn);

            dtC.Columns.Add(SizeGroupColumn);
            dtC.Columns.Add(MaterialColorColumn);
            dtC.Columns.Add(UOMColumn);
            dtC.Columns.Add(AdidasPlanDateColumn);
            dtC.Columns.Add(AdidasOrderNumberColumn);

            dtC.Columns.Add(AdditionalOpt1Column);
            dtC.Columns.Add(AdditionalOpt2Column);
            dtC.Columns.Add(AdditionalOpt3Column);
            dtC.Columns.Add(AdditionalOpt4Column);
            dtC.Columns.Add(AdditionalOpt5Column);
            #endregion
            #region xu ly center

            // tim` nhung line cua order number tuong ung' de set line number va` set product code
            DataRow[] dtRows;
            dtRows = dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
            // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());
            if (dtRows.Length > 0)
            {
                progressBar1.Minimum = 0;
                progressBar1.Value = 0;
                progressBar1.Maximum = 100;
                for (int o = 0; o < dtRows.Length; o++)
                {
                    int line = 1;
                    double SumValue = 0;
                    //int totalqty = 0;
                    //double totalValue = 0;
                    drC = dtC.NewRow();
                    //xu ly product color size truoc
                    // int soline = 0;// so line = so size
                    int vtSize = 0;
                    //string str_Size_Qty_Price = "";

                    DataSet ds_Size = new DataSet();
                    System.Data.DataTable dttempSizeQtyPrice;
                    DataRow drtempSizeQtyPrice;

                    #region tao bang tam sizecode,qty,price

                    dttempSizeQtyPrice = new System.Data.DataTable();
                    DataColumn SizeCodetmpColumn;
                    DataColumn QtytmpColumn;
                    DataColumn PricetmpColumn;
                    SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                    QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                    PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                    dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                    dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                    dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                    #endregion
                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                    #region get size
                    if (dtRows[o]["MainProduct"].ToString() != "")
                    {
                        #region SizeK1
                        if (int.Parse(dtRows[o]["SizeK1"].ToString()) > 0)
                        {
                            vtSize = 1;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString()); //int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + 
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }


                                //totalValue = totalValue +
                                //    (int.Parse(dtRows[o]["SizeK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK1"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK1] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK1] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK1_5
                        if (int.Parse(dtRows[o]["SizeK1_5"].ToString()) > 0)
                        {
                            vtSize = 2;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue +
                                //(int.Parse(dtRows[o]["SizeK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK1_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK1_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK2
                        if (int.Parse(dtRows[o]["SizeK2"].ToString()) > 0)
                        {
                            vtSize = 3;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK2"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK2_5
                        if (int.Parse(dtRows[o]["SizeK2_5"].ToString()) > 0)
                        {
                            vtSize = 4;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK3
                        if (int.Parse(dtRows[o]["SizeK3"].ToString()) > 0)
                        {
                            vtSize = 5;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK3"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK2_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK3_5
                        if (int.Parse(dtRows[o]["SizeK3_5"].ToString()) > 0)
                        {
                            vtSize = 6;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK3_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK3_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK4
                        if (int.Parse(dtRows[o]["SizeK4"].ToString()) > 0)
                        {
                            vtSize = 7;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                    // sizecode,qty,price
                                    DataRow[] foundRows_SizeK1;
                                    if (dttempSizeQtyPrice.Rows.Count > 0)
                                    {
                                        foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                        if (foundRows_SizeK1.Length > 0) // da co
                                        {
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4"].ToString());
                                        }
                                        else // chua co
                                        {
                                            drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                            drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                            drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                            dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                        }
                                    }
                                    else
                                    {
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                    //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                    //totalqty = totalqty + int.Parse(dtRows[o]["SizeK4"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK4] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK4] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK4_5
                        if (int.Parse(dtRows[o]["SizeK4_5"].ToString()) > 0)
                        {
                            vtSize = 8;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK4_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK4_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK5
                        if (int.Parse(dtRows[o]["SizeK5"].ToString()) > 0)
                        {
                            vtSize = 9;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK5_5
                        if (int.Parse(dtRows[o]["SizeK5_5"].ToString()) > 0)
                        {
                            vtSize = 10;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK5_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK5_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK6
                        if (int.Parse(dtRows[o]["SizeK6"].ToString()) > 0)
                        {
                            vtSize = 11;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK6"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK6] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK6] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK6_5
                        if (int.Parse(dtRows[o]["SizeK6_5"].ToString()) > 0)
                        {
                            vtSize = 12;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK6_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK6_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK7
                        if (int.Parse(dtRows[o]["SizeK7"].ToString()) > 0)
                        {
                            vtSize = 13;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK7"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK7] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK7] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK7_5
                        if (int.Parse(dtRows[o]["SizeK7_5"].ToString()) > 0)
                        {
                            vtSize = 14;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK7_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK7_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK8
                        if (int.Parse(dtRows[o]["SizeK8"].ToString()) > 0)
                        {
                            vtSize = 15;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK8"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK8] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK8] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK8_5
                        if (int.Parse(dtRows[o]["SizeK8_5"].ToString()) > 0)
                        {
                            vtSize = 16;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK8_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK8_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK9
                        if (int.Parse(dtRows[o]["SizeK9"].ToString()) > 0)
                        {
                            vtSize = 17;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK9"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK9] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK9] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK9_5
                        if (int.Parse(dtRows[o]["SizeK9_5"].ToString()) > 0)
                        {
                            vtSize = 18;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK9] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK9] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK10
                        if (int.Parse(dtRows[o]["SizeK10"].ToString()) > 0)
                        {
                            vtSize = 19;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK10"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK10] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK10] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK10_5
                        if (int.Parse(dtRows[o]["SizeK10_5"].ToString()) > 0)
                        {
                            vtSize = 20;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK10_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK10_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK11
                        if (int.Parse(dtRows[o]["SizeK11"].ToString()) > 0)
                        {
                            vtSize = 21;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK11"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK11] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK11] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK11_5
                        if (int.Parse(dtRows[o]["SizeK11_5"].ToString()) > 0)
                        {
                            vtSize = 22;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK11_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK11_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK12
                        if (int.Parse(dtRows[o]["SizeK12"].ToString()) > 0)
                        {
                            vtSize = 23;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK12"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK12] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK12] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK12_5
                        if (int.Parse(dtRows[o]["SizeK12_5"].ToString()) > 0)
                        {
                            vtSize = 24;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK12_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK12_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK13
                        if (int.Parse(dtRows[o]["SizeK13"].ToString()) > 0)
                        {
                            vtSize = 25;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK13"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK13] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK13] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeK13_5
                        if (int.Parse(dtRows[o]["SizeK13_5"].ToString()) > 0)
                        {
                            vtSize = 26;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK13_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeK13_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK1
                        if (int.Parse(dtRows[o]["SizeUK1"].ToString()) > 0)
                        {
                            vtSize = 27;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK1"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK1] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK1] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK1_5
                        if (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) > 0)
                        {
                            vtSize = 28;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK1_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK1_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK2
                        if (int.Parse(dtRows[o]["SizeUK2"].ToString()) > 0)
                        {
                            vtSize = 29;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK2"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK2] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK2] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK2_5
                        if (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) > 0)
                        {
                            vtSize = 30;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK2_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK2_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK3
                        if (int.Parse(dtRows[o]["SizeUK3"].ToString()) > 0)
                        {
                            vtSize = 31;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK3"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK3] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK3] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK3_5
                        if (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) > 0)
                        {
                            vtSize = 32;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK3_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK3_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK4
                        if (int.Parse(dtRows[o]["SizeUK4"].ToString()) > 0)
                        {
                            vtSize = 33;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK4"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK4] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK4] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK4_5
                        if (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) > 0)
                        {
                            vtSize = 34;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK4_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK4_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK5
                        if (int.Parse(dtRows[o]["SizeUK5"].ToString()) > 0)
                        {
                            vtSize = 35;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK5_5
                        if (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) > 0)
                        {
                            vtSize = 36;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK5_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK5_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK6
                        if (int.Parse(dtRows[o]["SizeUK6"].ToString()) > 0)
                        {
                            vtSize = 37;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK6"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK6] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK6] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK6_5
                        if (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) > 0)
                        {
                            vtSize = 38;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK6_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK6_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK7
                        if (int.Parse(dtRows[o]["SizeUK7"].ToString()) > 0)
                        {
                            vtSize = 39;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK7"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK7] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK7] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK7_5
                        if (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) > 0)
                        {
                            vtSize = 40;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK7_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK7_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK8
                        if (int.Parse(dtRows[o]["SizeUK8"].ToString()) > 0)
                        {
                            vtSize = 41;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK8"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK8] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK8] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK8_5
                        if (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) > 0)
                        {
                            vtSize = 42;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK8_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK8_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK9
                        if (int.Parse(dtRows[o]["SizeUK9"].ToString()) > 0)
                        {
                            vtSize = 43;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK9"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK9] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK9] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK9_5
                        if (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) > 0)
                        {
                            vtSize = 44;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK9_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK9_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK10
                        if (int.Parse(dtRows[o]["SizeUK10"].ToString()) > 0)
                        {
                            vtSize = 45;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK10"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK10] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK10] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK10_5
                        if (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) > 0)
                        {
                            vtSize = 46;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK10_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK10_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK11
                        if (int.Parse(dtRows[o]["SizeUK11"].ToString()) > 0)
                        {
                            vtSize = 47;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK11"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK11] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK11] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK11_5
                        if (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) > 0)
                        {
                            vtSize = 48;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK11_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK11_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK12
                        if (int.Parse(dtRows[o]["SizeUK12"].ToString()) > 0)
                        {
                            vtSize = 49;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK12"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK12] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK12] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK12_5
                        if (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) > 0)
                        {
                            vtSize = 50;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK12_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK12_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK13
                        if (int.Parse(dtRows[o]["SizeUK13"].ToString()) > 0)
                        {
                            vtSize = 51;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK13"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK13] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK13] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK13_5
                        if (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) > 0)
                        {
                            vtSize = 52;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK13_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK13_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK14
                        if (int.Parse(dtRows[o]["SizeUK14"].ToString()) > 0)
                        {
                            vtSize = 53;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK14"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK14] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK14] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK14_5
                        if (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) > 0)
                        {
                            vtSize = 54;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK14_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK14_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK15
                        if (int.Parse(dtRows[o]["SizeUK15"].ToString()) > 0)
                        {
                            vtSize = 55;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK15"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK15] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK15] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK15_5
                        if (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) > 0)
                        {
                            vtSize = 56;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK15_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK15_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK16
                        if (int.Parse(dtRows[o]["SizeUK16"].ToString()) > 0)
                        {
                            vtSize = 57;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK16"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK16] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK16] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK16_5
                        if (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) > 0)
                        {
                            vtSize = 58;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK16_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK16_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK17
                        if (int.Parse(dtRows[o]["SizeUK17"].ToString()) > 0)
                        {
                            vtSize = 59;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK17"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK17] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK17] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK17_5
                        if (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) > 0)
                        {
                            vtSize = 60;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK17_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK17_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK18
                        if (int.Parse(dtRows[o]["SizeUK18"].ToString()) > 0)
                        {
                            vtSize = 61;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK18"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK18] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK18] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK18_5
                        if (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) > 0)
                        {
                            vtSize = 62;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK18_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK18_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK19
                        if (int.Parse(dtRows[o]["SizeUK19"].ToString()) > 0)
                        {
                            vtSize = 63;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK19"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK19] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK19] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK19_5
                        if (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) > 0)
                        {
                            vtSize = 64;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK19_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK19_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK20
                        if (int.Parse(dtRows[o]["SizeUK20"].ToString()) > 0)
                        {
                            vtSize = 65;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK20"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK20] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK20] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK20_5
                        if (int.Parse(dtRows[o]["SizeUK20_5"].ToString()) > 0)
                        {
                            vtSize = 66;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK20_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK20_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK20_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK21
                        if (int.Parse(dtRows[o]["SizeUK21"].ToString()) > 0)
                        {
                            vtSize = 67;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK21"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK21"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK21"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK21"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK21"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK21] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK21] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK21_5
                        if (int.Parse(dtRows[o]["SizeUK21_5"].ToString()) > 0)
                        {
                            vtSize = 68;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK21_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK21_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK21_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK21_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK21_5"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK21_5] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK21_5] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region SizeUK22
                        if (int.Parse(dtRows[o]["SizeUK22"].ToString()) > 0)
                        {
                            vtSize = 69;
                            //get sizeMold winline
                            ds_Size = info.LoadSizeProductCodePriceV5Horizontal(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK22"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK22"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK22"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                //totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK22"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                //totalqty = totalqty + int.Parse(dtRows[o]["SizeUK22"].ToString());
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK22] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dtRows[o]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],Size[SizeUK22] on Original Tab";
                                }
                            }
                        }
                        #endregion
                    }
                    #endregion
                    #region xu ly main product (ko update total value)
                    //if (o >= 0)
                    //{
                    //    DataSet ds_Product = new DataSet();
                    //    ds_Product = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                    //    if (ds_Product.Tables[0].Rows.Count > 0)
                    //    {
                    //        drC["VOUCHERKEY"] = o + 1;
                    //        drC["FileType"] = "1";
                    //        drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                    //        drC["QtyShipped"] = totalqty;//dtRows[o]["C006-QtyShip"].ToString();
                    //        drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                    //        drC["Ext1"] = "";
                    //        drC["Ext2"] = "";
                    //        drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                    //        drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                    //        drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                    //        drC["PriceUnit"] = 0;
                    //        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                    //        drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                    //        drC["TotalValue"] = totalValue;
                    //        drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                    //        drC["LineNumber"] = 1;
                    //        drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                    //        drC["PositionText"] = "";
                    //        drC["DeliveryDate"] = "";
                    //        drC["Confirmeddeldate"] = "";
                    //        drC["Ref"] = dtRows[o]["Ref"].ToString();
                    //        drC["Season"] = dtRows[o]["Season"].ToString();
                    //        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                    //        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                    //        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                    //        drC["CRD"] = dtRows[o]["CRD"].ToString();

                    //        dtC.Rows.Add(drC);
                    //    }
                    //}
                    #endregion
                    #region lay data cho size-qty-price

                    if (dttempSizeQtyPrice.Rows.Count > 0)
                    {
                        for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                        {

                            DataSet ds_ProductColorSize = new DataSet();
                            ds_ProductColorSize = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString()
                                , lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                            {
                                drC = dtC.NewRow();
                                drC["VOUCHERKEY"] = o + 1;
                                drC["FileType"] = "1";
                                drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                drC["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                                drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                drC["Ext2"] = dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                drC["PriceUnit"] = double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                drC["TotalValue"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                drC["LineNumber"] = line;//+1
                                drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                drC["DeliveryDate"] = dtRows[o]["SellerConfDeliDate"].ToString();
                                drC["Confirmeddeldate"] = "";
                                drC["Ref"] = dtRows[o]["Ref"].ToString();
                                drC["Season"] = dtRows[o]["Season"].ToString();
                                drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                drC["CRD"] = dtRows[o]["CRD"].ToString();

                                drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                drC["SellerConfDeliDate"] = dtRows[o]["SellerConfDeliDate"].ToString();
                                drC["SellUpdaDeliDate"] = "";
                                drC["ConfDeliQty"] = 0;
                                drC["UpdaDeliQty"] = 0;
                                drC["SellerConfDeliDateLast"] = "";
                                drC["SellerUpdaDeliDateLast"] = "";
                                drC["ConfDeliQtyLast"] = 0;
                                drC["UpdaDeliQtyLast"] = 0;
                                drC["UnitPriceAdidas"] = dtRows[o]["UnitPriceAdidas"].ToString();

                                drC["SizeGroup"] = dtRows[o]["SizeGroup"].ToString();
                                drC["MaterialColor"] = dtRows[o]["MaterialColor"].ToString();
                                drC["UOM"] = dtRows[o]["UOM"].ToString();
                                drC["AdidasPlanDate"] = dtRows[o]["AdidasPlanDate"].ToString();
                                drC["AdidasOrderNumber"] = dtRows[o]["AdidasOrderNumber"].ToString();

                                drC["AdditionalOpt1"] = dtRows[o]["AdditionalOpt1"].ToString();
                                drC["AdditionalOpt2"] = dtRows[o]["AdditionalOpt2"].ToString();
                                drC["AdditionalOpt3"] = dtRows[o]["AdditionalOpt3"].ToString();
                                drC["AdditionalOpt4"] = dtRows[o]["AdditionalOpt4"].ToString();
                                drC["AdditionalOpt5"] = dtRows[o]["AdditionalOpt5"].ToString();
                                dtC.Rows.Add(drC);
                                line++;
                            }
                        }
                    }
                    #endregion
                    #region xu ly update totalvalue
                    //for (int k = 0; k < dtC.Rows.Count; k++)
                    //{
                    //    if (dtC.Rows[k]["TotalValue"].ToString() == "")
                    //    {
                    //        dtC.Rows[k]["TotalValue"] = SumValue;
                    //        break;
                    //    }
                    //}
                    #endregion

                    int percents = (o * 100) / dtRows.Length;
                    progressBar1.Value = percents;
                }

            }

            dsC_Con.Tables.Add(dtC);

            progressBar1.Value = 0;
            #endregion
            #endregion
        }
        private void ConvertDataVerticalSizeDL()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            //DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            //DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            //TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            //dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            //dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);

            dtH.Columns.Add(T1SupplierNameColumn);
            dtH.Columns.Add(T1AddressL1Column);
            dtH.Columns.Add(T1AddressCountryColumn);
            dtH.Columns.Add(Contact_BuyerColumn);
            dtH.Columns.Add(ShipTo_T1FactoryNameColumn);
            dtH.Columns.Add(T1AddressL1_ShipToColumn);
            dtH.Columns.Add(T1AddressCountry_ShipToColumn);
            dtH.Columns.Add(PaymentTermTextColumn);
            dtH.Columns.Add(CountryofOriginColumn);
            #endregion
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable().GroupBy(r => new { Col1 = r["OrderNumber"] }).Select(g => g.OrderBy(r => r["LineID"]).First()).CopyToDataTable();

            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count > 0)
                {
                    for (int t = 0; t < dt_Group.Rows.Count; t++)
                    {
                        string s_OrderNumber = dt_Group.Rows[t]["OrderNumber"].ToString();
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {

                            drH = dtH.NewRow();
                            drH["VOUCHERKEY"] =t + 1;
                            drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                            #region Account info
                            DataSet dstmp = new DataSet();
                            dstmp = info.LoadAccount_DeliveryV5(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (dstmp.Tables[0].Rows.Count == 2)
                            {
                                drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                            }
                            else
                            {
                                drH["InvoiceName"] = "";
                                drH["InvoiceStreet"] = "";
                                drH["InvoiceStreet2"] = "";
                                drH["InvoiceCity"] = "";
                                drH["CountryInvoiceAddress"] = "";
                                drH["DeliveryName"] = "";
                                drH["DeliveryStreet"] = "";
                                drH["DeliveryCity"] = "";
                                drH["CountryDeliveryAddress"] = "";
                            }
                            #endregion
                            drH["SerialNo"] = "";
                            //drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                            drH["FCdate"] = "";
                            if (mod_Material.gsCompanyCode == "05FI")
                            {
                                drH["TextLine4_OrderDate"] = String.Format("{0:MM-dd-yyyy}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                            }
                            else
                            {
                                drH["TextLine4_OrderDate"] = String.Format("{0:d}", DateTime.Parse(dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString()));
                            }
                            drH["OrderNo"] = "";
                            drH["OrderConfirmationDate"] = "";
                            if (dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() == "")
                            {
                                drH["TextLine3_PONo"] = s_OrderNumber;
                            }
                            else
                            {
                                drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() + " / " + s_OrderNumber;
                            }

                            //drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                            drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                            //drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                            drH["VoucherType"] = lkupVT.EditValue.ToString().Trim();
                            // get Boxtype theo product code
                            if (chkHel.Checked == true)
                            {
                                drH["OrderType"] = "BX5";
                            }
                            else
                            {
                                DataSet dstmp_BoxType = new DataSet();
                                dstmp_BoxType = info.LoadBoxTypeMainProductv5(dsC_Or.Tables[0].Rows[t]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[t]["ArticleNumberAd"].ToString().Replace(",", "").Trim(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                {
                                    drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                }
                            }

                            drH["PriceList"] = 1;
                            if (dt_Group.Rows[t]["SellerConfDeliDate"].ToString()=="")
                            {
                                drH["TextLine1_ETD"] = "";
                            }
                            else
                            {
                                try
                                {
                                    drH["TextLine1_ETD"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(dt_Group.Rows[t]["SellerConfDeliDate"].ToString()));
                                }
                                catch (Exception ex)
                                {
                                    drH["TextLine1_ETD"] = "";
                                }
                              
                            }
                            if (mod_Material.gsCompanyCode == "05FI" || mod_Material.gsCompanyCode == "VNT1")
                            {
                                if (dt_Group.Rows[t]["BuyerReqDate"].ToString() == "")
                                {
                                    drH["TextLine2"] = "";
                                }
                                else
                                {
                                    try
                                    {
                                        drH["TextLine2"] = String.Format("{0:MM/dd/yyyy}", DateTime.Parse(dt_Group.Rows[t]["BuyerReqDate"].ToString()));
                                    }
                                    catch (Exception ex)
                                    {
                                        drH["TextLine2"] = "";

                                    }
                                }
                                
                            }
                            else
                            {
                                drH["TextLine2"] = "";
                            }

                            drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                            if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText1_Incoterm"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText1_Incoterm"] = "0";
                            }
                            if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText3_ShipBy"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText3_ShipBy"] = "0";
                            }
                            drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                            drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                            drH["T1SupplierName"] = dsH_Or.Tables[0].Rows[i]["T1SupplierName"].ToString();
                            drH["T1AddressL1"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1"].ToString();
                            drH["T1AddressCountry"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry"].ToString();
                            drH["Contact_Buyer"] = dsH_Or.Tables[0].Rows[i]["Contact_Buyer"].ToString();
                            drH["ShipTo_T1FactoryName"] = dsH_Or.Tables[0].Rows[i]["ShipTo_T1FactoryName"].ToString();
                            drH["T1AddressL1_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressL1_ShipTo"].ToString();
                            drH["T1AddressCountry_ShipTo"] = dsH_Or.Tables[0].Rows[i]["T1AddressCountry_ShipTo"].ToString();
                            drH["PaymentTerm"] = dsH_Or.Tables[0].Rows[i]["PaymentTerm"].ToString();
                            drH["CountryofOrigin"] = dsH_Or.Tables[0].Rows[i]["CountryofOrigin"].ToString();
                            dtH.Rows.Add(drH);
                        }
                    }
                }

                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn SizeGroupColumn;
            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;

            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));
            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));

            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            dtC.Columns.Add(UnitPriceAdColumn);

            dtC.Columns.Add(SizeGroupColumn);
            dtC.Columns.Add(MaterialColorColumn);
            dtC.Columns.Add(UOMColumn);
            dtC.Columns.Add(AdidasPlanDateColumn);
            dtC.Columns.Add(AdidasOrderNumberColumn);

            dtC.Columns.Add(AdditionalOpt1Column);
            dtC.Columns.Add(AdditionalOpt2Column);
            dtC.Columns.Add(AdditionalOpt3Column);
            dtC.Columns.Add(AdditionalOpt4Column);
            dtC.Columns.Add(AdditionalOpt5Column);
            #endregion
            #region xu ly center
            progressBar1.Minimum = 0;
            progressBar1.Value = 0;
            progressBar1.Maximum = 100;
             for (int c = 0; c < dt_Group.Rows.Count; c++)
            {
                // tim` nhung line cua order number tuong ung' de set line number va` set product code
                DataRow[] dtRows;
               // dtRows = dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                dtRows =  dsC_Or.Tables[0].Select("OrderNumber = '" + dt_Group.Rows[c]["OrderNumber"].ToString() + "'");
                long totalqty = 0;
                totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());
                // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());

                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                    int line = 1;
                    double SumValue = 0;
                    for (int o = 0; o < dtRows.Length; o++)
                    {

                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                        // int soline = 0;// so line = so size
                        int vtSize = 0;
                        //string str_Size_Qty_Price = "";

                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region xu ly main product (ko update total value)
                        //if (o == 0)
                        //{
                        //    DataSet ds_Product = new DataSet();
                        //    ds_Product = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString(),lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                        //    if (ds_Product.Tables[0].Rows.Count > 0)
                        //    {
                        //        drC["VOUCHERKEY"] = c + 1;
                        //        drC["FileType"] = "1";
                        //        drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                        //        drC["QtyShipped"] = totalqty;
                        //        drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                        //        drC["Ext1"] = "";
                        //        drC["Ext2"] = "";
                        //        drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                        //        drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                        //        drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                        //        drC["PriceUnit"] = 0;
                        //        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                        //        drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                        //        //drC["TotalValue"] = totalValue;
                        //        drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                        //        drC["LineNumber"] = 1;
                        //        drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                        //        drC["PositionText"] = "";
                        //        drC["DeliveryDate"] = "";
                        //        drC["Confirmeddeldate"] = "";
                        //        drC["Ref"] = dtRows[o]["Ref"].ToString();
                        //        drC["Season"] = dtRows[o]["Season"].ToString();
                        //        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                        //        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                        //        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                        //        drC["CRD"] = dtRows[o]["CRD"].ToString();

                        //        dtC.Rows.Add(drC);
                        //    }
                        //}
                        #endregion
                        #region lay data cho size-qty-price
                       // dang lam den day
                        DataSet ds_Size = new DataSet();
                        if (dtRows[o]["MainProduct"].ToString() != "")
                        {
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceVerticalSizeHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["VerticalSize"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePriceVerticalSize(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["VerticalSize"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                DataSet ds_ProductColorSize = new DataSet();
                                ds_ProductColorSize = info.LoadCenterOCListV5Horizontal(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                                {
                                    string ProductNmber = "";
                                    ProductNmber = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    DataRow[] dtRows_Old;
                                    dtRows_Old = dtC.Select("OrderNumber = '" + dtRows[o]["OrderNumber"].ToString() + "' and ProductNumber ='" + ProductNmber + "' and Ext1 = '" + dtRows[o]["ColorCode"].ToString() + "' and Ext2 ='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (dtRows_Old.Length > 0)
                                    {
                                        dtRows_Old[0]["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) + int.Parse(dtRows_Old[0]["QtyShipped"].ToString());
                                        dtRows_Old[0]["TotalValue"] = (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString())) + Double.Parse(dtRows_Old[0]["TotalValue"].ToString());
                                       // SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                    }
                                    else
                                    {
                                        drC = dtC.NewRow();
                                        drC["VOUCHERKEY"] = c + 1;
                                        drC["FileType"] = "1";
                                        drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString());
                                        drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                        drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                        drC["Ext2"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                        drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                        drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                        drC["PriceUnit"] = double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                        drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                        drC["TotalValue"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        //SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                        drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                        drC["LineNumber"] = line;//+ 1
                                        drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                        drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                        drC["DeliveryDate"] = dtRows[o]["SellerConfDeliDate"].ToString();
                                        drC["Confirmeddeldate"] = "";
                                        drC["Ref"] = dtRows[o]["Ref"].ToString();
                                        drC["Season"] = dtRows[o]["Season"].ToString();
                                        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                        drC["CRD"] = dtRows[o]["CRD"].ToString();

                                        drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                        drC["SellerConfDeliDate"] = dtRows[o]["SellerConfDeliDate"].ToString(); ;
                                        drC["SellUpdaDeliDate"] = "";
                                        drC["ConfDeliQty"] = 0;
                                        drC["UpdaDeliQty"] = 0;
                                        drC["SellerConfDeliDateLast"] = "";
                                        drC["SellerUpdaDeliDateLast"] = "";
                                        drC["ConfDeliQtyLast"] = 0;
                                        drC["UpdaDeliQtyLast"] = 0;
                                        drC["UnitPriceAdidas"] = dtRows[o]["UnitPriceAdidas"].ToString();

                                        drC["SizeGroup"] = dtRows[o]["SizeGroup"].ToString();
                                        drC["MaterialColor"] = dtRows[o]["MaterialColor"].ToString();
                                        drC["UOM"] = dtRows[o]["UOM"].ToString();
                                        drC["AdidasPlanDate"] = dtRows[o]["AdidasPlanDate"].ToString();
                                        drC["AdidasOrderNumber"] = dtRows[o]["AdidasOrderNumber"].ToString();

                                        drC["AdditionalOpt1"] = dtRows[o]["AdditionalOpt1"].ToString();
                                        drC["AdditionalOpt2"] = dtRows[o]["AdditionalOpt2"].ToString();
                                        drC["AdditionalOpt3"] = dtRows[o]["AdditionalOpt3"].ToString();
                                        drC["AdditionalOpt4"] = dtRows[o]["AdditionalOpt4"].ToString();
                                        drC["AdditionalOpt5"] = dtRows[o]["AdditionalOpt5"].ToString();
                                        dtC.Rows.Add(drC);
                                        line++;
                                    }
                                }
                            }
                            else
                            {
                                if (txtErrorList.Text.Trim() == "")
                                {
                                    txtErrorList.Text = "Please Check Order Number[" + dt_Group.Rows[c]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                        + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],SizeCode[" + dtRows[o]["VerticalSize"].ToString() + "] on Original Tab";
                                }
                                else
                                {
                                    txtErrorList.Text = txtErrorList.Text + Environment.NewLine + "Please Check Order Number[" + dt_Group.Rows[c]["OrderNumber"].ToString() + "],ProductCode[" + dtRows[o]["MainProduct"].ToString()
                                            + "],ColorCode[" + dtRows[o]["ColorCode"].ToString() + "],SizeCode[" + dtRows[o]["VerticalSize"].ToString() + "] on Original Tab";
                                }
                            }
                        }
                        #endregion
                        #region xu ly update totalvalue
                        //for (int k = 0; k < dtC.Rows.Count; k++)
                        //{
                        //    if (dtC.Rows[k]["OrderNumber"].ToString() == dt_Group.Rows[c]["OrderNumber"].ToString())
                        //    {
                        //        dtC.Rows[k]["TotalValue"] = SumValue;
                        //        break;
                        //    }
                        //}
                        #endregion
                    }

                }
                int percents = (c * 100) / dt_Group.Rows.Count;
                progressBar1.Value = percents;
             }
            dsC_Con.Tables.Add(dtC);
            progressBar1.Value = 0;
            #endregion
            #endregion
        }
        private void ConvertData1linePODownload()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count > 0)
                {
                    for (int p = 0; p < dsC_Or.Tables[0].Rows.Count; p++)
                    {
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {
                            if (p==i)
                            {
                                drH = dtH.NewRow();
                                drH["VOUCHERKEY"] = p + 1;
                                drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                                #region Account info
                                DataSet dstmp = new DataSet();
                                dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                                if (dstmp.Tables[0].Rows.Count == 2)
                                {
                                    drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                    drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                    drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                    drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                    drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                    drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                    drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                    drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                    drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                                }
                                else
                                {
                                    drH["InvoiceName"] = "";
                                    drH["InvoiceStreet"] = "";
                                    drH["InvoiceStreet2"] = "";
                                    drH["InvoiceCity"] = "";
                                    drH["CountryInvoiceAddress"] = "";
                                    drH["DeliveryName"] = "";
                                    drH["DeliveryStreet"] = "";
                                    drH["DeliveryCity"] = "";
                                    drH["CountryDeliveryAddress"] = "";
                                }
                                #endregion
                                drH["SerialNo"] = "";
                                drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                                drH["FCdate"] = "";
                                drH["TextLine4_OrderDate"] = "";
                                drH["OrderNo"] = "";
                                drH["OrderConfirmationDate"] = "";
                                drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                                drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                                drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                                drH["VoucherType"] = 1;
                                // get Boxtype theo product code
                                if (chkHel.Checked == true)
                                {
                                    drH["OrderType"] = "BX5";
                                }
                                else
                                {
                                    DataSet dstmp_BoxType = new DataSet();
                                    dstmp_BoxType = info.LoadBoxTypeMainProduct(dsC_Or.Tables[0].Rows[p]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[p]["ArticleNumberAd"].ToString().Replace(",", ""));
                                    if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                    {
                                        drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                    }
                                }

                                drH["PriceList"] = 1;
                                drH["TextLine1_ETD"] = "";
                                drH["TextLine2"] = "";
                                drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                                if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                                {
                                    String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                    if (str.Length > 0)
                                    {
                                        drH["FreeText1_Incoterm"] = str[0];
                                    }
                                }
                                else
                                {
                                    drH["FreeText1_Incoterm"] = "0";
                                }
                                if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                                {
                                    String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                    if (str.Length > 0)
                                    {
                                        drH["FreeText3_ShipBy"] = str[0];
                                    }
                                }
                                else
                                {
                                    drH["FreeText3_ShipBy"] = "0";
                                }
                                drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                                drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                                dtH.Rows.Add(drH);
                            }

                        }
                    }
                }

                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region xu ly center

            // tim` nhung line cua order number tuong ung' de set line number va` set product code
            DataRow[] dtRows;
            dtRows = dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
            long totalqty = 0;
            // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());


            double totalValue = 0;
            if (dtRows.Length > 0)
            {

                for (int o = 0; o < dtRows.Length; o++)
                {
                    int line = 1;
                    double SumValue = 0;
                    drC = dtC.NewRow();
                    //xu ly product color size truoc
                    // int soline = 0;// so line = so size
                    int vtSize = 0;
                    //string str_Size_Qty_Price = "";

                    DataSet ds_Size = new DataSet();
                    System.Data.DataTable dttempSizeQtyPrice;
                    DataRow drtempSizeQtyPrice;

                    #region tao bang tam sizecode,qty,price
                    dttempSizeQtyPrice = new System.Data.DataTable();
                    DataColumn SizeCodetmpColumn;
                    DataColumn QtytmpColumn;
                    DataColumn PricetmpColumn;
                    SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                    QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                    PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                    dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                    dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                    dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                    #endregion
                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                    #region get size
                    #region SizeK1
                    if (int.Parse(dtRows[o]["SizeK1"].ToString()) > 0)
                    {
                        vtSize = 1;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString()); //int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + 
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }


                            totalValue = totalValue +
                                (int.Parse(dtRows[o]["SizeK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK1_5
                    if (int.Parse(dtRows[o]["SizeK1_5"].ToString()) > 0)
                    {
                        vtSize = 2;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue +
                            (int.Parse(dtRows[o]["SizeK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK2
                    if (int.Parse(dtRows[o]["SizeK2"].ToString()) > 0)
                    {
                        vtSize = 3;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK2_5
                    if (int.Parse(dtRows[o]["SizeK2_5"].ToString()) > 0)
                    {
                        vtSize = 4;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK3
                    if (int.Parse(dtRows[o]["SizeK3"].ToString()) > 0)
                    {
                        vtSize = 5;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK3_5
                    if (int.Parse(dtRows[o]["SizeK3_5"].ToString()) > 0)
                    {
                        vtSize = 6;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK4
                    if (int.Parse(dtRows[o]["SizeK4"].ToString()) > 0)
                    {
                        vtSize = 7;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                    }
                    #endregion
                    #region SizeK4_5
                    if (int.Parse(dtRows[o]["SizeK4_5"].ToString()) > 0)
                    {
                        vtSize = 8;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK5
                    if (int.Parse(dtRows[o]["SizeK5"].ToString()) > 0)
                    {
                        vtSize = 9;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK5_5
                    if (int.Parse(dtRows[o]["SizeK5_5"].ToString()) > 0)
                    {
                        vtSize = 10;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }

                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK6
                    if (int.Parse(dtRows[o]["SizeK6"].ToString()) > 0)
                    {
                        vtSize = 11;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK6_5
                    if (int.Parse(dtRows[o]["SizeK6_5"].ToString()) > 0)
                    {
                        vtSize = 12;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK7
                    if (int.Parse(dtRows[o]["SizeK7"].ToString()) > 0)
                    {
                        vtSize = 13;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK7_5
                    if (int.Parse(dtRows[o]["SizeK7_5"].ToString()) > 0)
                    {
                        vtSize = 14;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK8
                    if (int.Parse(dtRows[o]["SizeK8"].ToString()) > 0)
                    {
                        vtSize = 15;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK8_5
                    if (int.Parse(dtRows[o]["SizeK8_5"].ToString()) > 0)
                    {
                        vtSize = 16;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK9
                    if (int.Parse(dtRows[o]["SizeK9"].ToString()) > 0)
                    {
                        vtSize = 17;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK9_5
                    if (int.Parse(dtRows[o]["SizeK9_5"].ToString()) > 0)
                    {
                        vtSize = 18;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK10
                    if (int.Parse(dtRows[o]["SizeK10"].ToString()) > 0)
                    {
                        vtSize = 19;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK10_5
                    if (int.Parse(dtRows[o]["SizeK10_5"].ToString()) > 0)
                    {
                        vtSize = 20;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK11
                    if (int.Parse(dtRows[o]["SizeK11"].ToString()) > 0)
                    {
                        vtSize = 21;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK11_5
                    if (int.Parse(dtRows[o]["SizeK11_5"].ToString()) > 0)
                    {
                        vtSize = 22;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK12
                    if (int.Parse(dtRows[o]["SizeK12"].ToString()) > 0)
                    {
                        vtSize = 23;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK12_5
                    if (int.Parse(dtRows[o]["SizeK12_5"].ToString()) > 0)
                    {
                        vtSize = 24;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK13
                    if (int.Parse(dtRows[o]["SizeK13"].ToString()) > 0)
                    {
                        vtSize = 25;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeK13_5
                    if (int.Parse(dtRows[o]["SizeK13_5"].ToString()) > 0)
                    {
                        vtSize = 26;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK1
                    if (int.Parse(dtRows[o]["SizeUK1"].ToString()) > 0)
                    {
                        vtSize = 27;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK1_5
                    if (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) > 0)
                    {
                        vtSize = 28;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK2
                    if (int.Parse(dtRows[o]["SizeUK2"].ToString()) > 0)
                    {
                        vtSize = 29;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK2_5
                    if (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) > 0)
                    {
                        vtSize = 30;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK3
                    if (int.Parse(dtRows[o]["SizeUK3"].ToString()) > 0)
                    {
                        vtSize = 31;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK3_5
                    if (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) > 0)
                    {
                        vtSize = 32;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }

                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK4
                    if (int.Parse(dtRows[o]["SizeUK4"].ToString()) > 0)
                    {
                        vtSize = 33;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK4_5
                    if (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) > 0)
                    {
                        vtSize = 34;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK5
                    if (int.Parse(dtRows[o]["SizeUK5"].ToString()) > 0)
                    {
                        vtSize = 35;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }

                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK5_5
                    if (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) > 0)
                    {
                        vtSize = 36;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK6
                    if (int.Parse(dtRows[o]["SizeUK6"].ToString()) > 0)
                    {
                        vtSize = 37;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK6_5
                    if (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) > 0)
                    {
                        vtSize = 38;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK7
                    if (int.Parse(dtRows[o]["SizeUK7"].ToString()) > 0)
                    {
                        vtSize = 39;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK7_5
                    if (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) > 0)
                    {
                        vtSize = 40;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK8
                    if (int.Parse(dtRows[o]["SizeUK8"].ToString()) > 0)
                    {
                        vtSize = 41;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK8_5
                    if (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) > 0)
                    {
                        vtSize = 42;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK9
                    if (int.Parse(dtRows[o]["SizeUK9"].ToString()) > 0)
                    {
                        vtSize = 43;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK9_5
                    if (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) > 0)
                    {
                        vtSize = 44;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK10
                    if (int.Parse(dtRows[o]["SizeUK10"].ToString()) > 0)
                    {
                        vtSize = 45;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK10_5
                    if (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) > 0)
                    {
                        vtSize = 46;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK11
                    if (int.Parse(dtRows[o]["SizeUK11"].ToString()) > 0)
                    {
                        vtSize = 47;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK11_5
                    if (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) > 0)
                    {
                        vtSize = 48;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK12
                    if (int.Parse(dtRows[o]["SizeUK12"].ToString()) > 0)
                    {
                        vtSize = 49;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK12_5
                    if (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) > 0)
                    {
                        vtSize = 50;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK13
                    if (int.Parse(dtRows[o]["SizeUK13"].ToString()) > 0)
                    {
                        vtSize = 51;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK13_5
                    if (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) > 0)
                    {
                        vtSize = 52;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK14
                    if (int.Parse(dtRows[o]["SizeUK14"].ToString()) > 0)
                    {
                        vtSize = 53;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK14_5
                    if (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) > 0)
                    {
                        vtSize = 54;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK15
                    if (int.Parse(dtRows[o]["SizeUK15"].ToString()) > 0)
                    {
                        vtSize = 55;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK15_5
                    if (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) > 0)
                    {
                        vtSize = 56;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK16
                    if (int.Parse(dtRows[o]["SizeUK16"].ToString()) > 0)
                    {
                        vtSize = 57;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK16_5
                    if (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) > 0)
                    {
                        vtSize = 58;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK17
                    if (int.Parse(dtRows[o]["SizeUK17"].ToString()) > 0)
                    {
                        vtSize = 59;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK17_5
                    if (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) > 0)
                    {
                        vtSize = 60;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK18
                    if (int.Parse(dtRows[o]["SizeUK18"].ToString()) > 0)
                    {
                        vtSize = 61;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK18_5
                    if (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) > 0)
                    {
                        vtSize = 62;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK19
                    if (int.Parse(dtRows[o]["SizeUK19"].ToString()) > 0)
                    {
                        vtSize = 63;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK19_5
                    if (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) > 0)
                    {
                        vtSize = 64;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #region SizeUK20
                    if (int.Parse(dtRows[o]["SizeUK20"].ToString()) > 0)
                    {
                        vtSize = 65;
                        //get sizeMold winline
                        ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                        if (ds_Size.Tables[0].Rows.Count > 0)
                        {
                            // sizecode,qty,price
                            DataRow[] foundRows_SizeK1;
                            if (dttempSizeQtyPrice.Rows.Count > 0)
                            {
                                foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                if (foundRows_SizeK1.Length > 0) // da co
                                {
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20"].ToString());
                                }
                                else // chua co
                                {
                                    drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                            }
                            else
                            {
                                drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                            }
                            totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                        }
                    }
                    #endregion
                    #endregion
                    #region xu ly main product (ko update total value)
                    if (o >= 0)
                    {
                        DataSet ds_Product = new DataSet();
                        ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                        if (ds_Product.Tables[0].Rows.Count > 0)
                        {
                            drC["VOUCHERKEY"] = o + 1;
                            drC["FileType"] = "1";
                            drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                            drC["QtyShipped"] = dtRows[o]["C006-QtyShip"].ToString();
                            drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                            drC["Ext1"] = "";
                            drC["Ext2"] = "";
                            drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                            drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                            drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                            drC["PriceUnit"] = 0;
                            drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                            drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                            //drC["TotalValue"] = totalValue;
                            drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                            drC["LineNumber"] = 1;
                            drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                            drC["PositionText"] = "";
                            drC["DeliveryDate"] = "";
                            drC["Confirmeddeldate"] = "";
                            drC["Ref"] = dtRows[o]["Ref"].ToString();
                            drC["Season"] = dtRows[o]["Season"].ToString();
                            drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                            drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                            drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                            drC["CRD"] = dtRows[o]["CRD"].ToString();

                            dtC.Rows.Add(drC);
                        }
                    }
                    #endregion
                    #region lay data cho size-qty-price

                    if (dttempSizeQtyPrice.Rows.Count > 0)
                    {
                        for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                        {
                            DataSet ds_ProductColorSize = new DataSet();
                            ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString());
                            if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                            {
                                drC = dtC.NewRow();
                                drC["VOUCHERKEY"] = o + 1;
                                drC["FileType"] = "1";
                                drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                drC["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                                drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                drC["Ext2"] = dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                drC["PriceUnit"] = double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                drC["TotalValue"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                drC["LineNumber"] = line + 1;
                                drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                drC["DeliveryDate"] = "";
                                drC["Confirmeddeldate"] = "";
                                drC["Ref"] = dtRows[o]["Ref"].ToString();
                                drC["Season"] = dtRows[o]["Season"].ToString();
                                drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                drC["CRD"] = dtRows[o]["CRD"].ToString();

                                drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                drC["SellerConfDeliDate"] = "";
                                drC["SellUpdaDeliDate"] = "";
                                drC["ConfDeliQty"] = 0;
                                drC["UpdaDeliQty"] = 0;
                                drC["SellerConfDeliDateLast"] = "";
                                drC["SellerUpdaDeliDateLast"] = "";
                                drC["ConfDeliQtyLast"] = 0;
                                drC["UpdaDeliQtyLast"] = 0;


                                dtC.Rows.Add(drC);
                                line++;
                            }
                        }
                    }
                    #endregion
                    #region xu ly update totalvalue
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        if (dtC.Rows[k]["TotalValue"].ToString() == "")
                        {
                            dtC.Rows[k]["TotalValue"] = SumValue;
                            break;
                        }
                    }
                    #endregion
                }

            }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        }
        private void ConvertData1line_SizeG()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count > 0)
                {
                    for (int p = 0; p < dsC_Or.Tables[0].Rows.Count; p++)
                    {
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {
                            drH = dtH.NewRow();
                            drH["VOUCHERKEY"] = p + 1;
                            drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                            DataSet dstmp = new DataSet();
                            dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                            if (dstmp.Tables[0].Rows.Count == 2)
                            {
                                drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                            }
                            else
                            {
                                drH["InvoiceName"] = "";
                                drH["InvoiceStreet"] = "";
                                drH["InvoiceStreet2"] = "";
                                drH["InvoiceCity"] = "";
                                drH["CountryInvoiceAddress"] = "";
                                drH["DeliveryName"] = "";
                                drH["DeliveryStreet"] = "";
                                drH["DeliveryCity"] = "";
                                drH["CountryDeliveryAddress"] = "";
                            }

                            drH["SerialNo"] = "";
                            drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                            drH["FCdate"] = "";
                            drH["TextLine4_OrderDate"] = dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString();
                            drH["OrderNo"] = "";
                            drH["OrderConfirmationDate"] = "";
                            drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                            drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                            drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                            drH["VoucherType"] = 1;
                            // get Boxtype theo product code
                            if (chkHel.Checked == true)
                            {
                                drH["OrderType"] = "BX5";
                            }
                            else
                            {
                                DataSet dstmp_BoxType = new DataSet();
                                dstmp_BoxType = info.LoadBoxTypeMainProduct(dsC_Or.Tables[0].Rows[p]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[p]["ArticleNumberAd"].ToString().Replace(",", ""));
                                if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                {
                                    drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                }
                            }

                            drH["PriceList"] = 1;
                            drH["TextLine1_ETD"] = "";
                            drH["TextLine2"] = "";
                            drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                            if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText1_Incoterm"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText1_Incoterm"] = "0";
                            }
                            if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText3_ShipBy"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText3_ShipBy"] = "0";
                            }
                            drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                            drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                            dtH.Rows.Add(drH);
                        }
                    }
                }

                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region xu ly center

            // tim` nhung line cua order number tuong ung' de set line number va` set product code
            DataRow[] dtRows;
            dtRows = dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
            int totalqty = 0;
            // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());
            //totalqty = dsC_Or.Tables[0].AsEnumerable().Sum(row => row.Field<int>("C006-QtyShip"));

            double totalValue = 0;
            if (dtRows.Length > 0)
            {

                for (int o = 0; o < dtRows.Length; o++)
                {
                    int line = 1;
                    double SumValue = 0;
                    drC = dtC.NewRow();
                    //xu ly product color size truoc
                    // int soline = 0;// so line = so size
                    int vtSize = 0;
                    //string str_Size_Qty_Price = "";

                    #region xu ly main product (ko update total value)
                    if (o >= 0)
                    {
                        DataSet ds_Product = new DataSet();
                        ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                        if (ds_Product.Tables[0].Rows.Count > 0)
                        {
                            drC["VOUCHERKEY"] = o + 1;
                            drC["FileType"] = "1";
                            drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                            drC["QtyShipped"] = dtRows[o]["C006-QtyShip"].ToString();//totalqty;
                            drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                            drC["Ext1"] = "";
                            drC["Ext2"] = "";
                            drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                            drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                            drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                            drC["PriceUnit"] = 0;
                            drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                            drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                            //drC["TotalValue"] = totalValue;
                            drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                            drC["LineNumber"] = 1;
                            drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                            drC["PositionText"] = "";
                            drC["DeliveryDate"] = "";
                            drC["Confirmeddeldate"] = "";
                            drC["Ref"] = dtRows[o]["Ref"].ToString();
                            drC["Season"] = dtRows[o]["Season"].ToString();
                            drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                            drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                            drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                            drC["CRD"] = dtRows[o]["CRD"].ToString();
                            drC["LineCenter"] = "";

                            dtC.Rows.Add(drC);
                        }
                    }
                    #endregion
                    #region lay data cho size-qty-price
                    DataSet ds_Size = new DataSet();
                    if (chkHel.Checked==true)
                    {
                        ds_Size = info.LoadSizeProductCodePriceSizeGHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString());
                    }
                    else
                    {
                        ds_Size = info.LoadSizeProductCodePriceSizeG(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString());
                    }
                    
                    //if (dttempSizeQtyPrice.Rows.Count > 0)
                    //{
                    //    for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                    //    {
                    if (ds_Size.Tables[0].Rows.Count>0)
                    {
                        DataSet ds_ProductColorSize = new DataSet();
                        ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString());
                        if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                        {
                            drC = dtC.NewRow();
                            drC["VOUCHERKEY"] = o + 1;
                            drC["FileType"] = "1";
                            drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                            drC["QtyShipped"] = dtRows[o]["C006-QtyShip"].ToString(); //int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                            drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                            drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                            drC["Ext2"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();//dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                            drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                            drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                            drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                            drC["PriceUnit"] = double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()); ;// double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                            drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                            drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                            drC["TotalValue"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                            SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                            drC["LineNumber"] = line + 1;
                            drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                            drC["PositionText"] = dtRows[o]["Ref"].ToString();
                            drC["DeliveryDate"] = "";
                            drC["Confirmeddeldate"] = "";
                            drC["Ref"] = dtRows[o]["Ref"].ToString();
                            drC["Season"] = dtRows[o]["Season"].ToString();
                            drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                            drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                            drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                            drC["CRD"] = dtRows[o]["CRD"].ToString();

                            drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                            drC["SellerConfDeliDate"] = "";
                            drC["SellUpdaDeliDate"] = "";
                            drC["ConfDeliQty"] = 0;
                            drC["UpdaDeliQty"] = 0;
                            drC["SellerConfDeliDateLast"] = "";
                            drC["SellerUpdaDeliDateLast"] = "";
                            drC["ConfDeliQtyLast"] = 0;
                            drC["UpdaDeliQtyLast"] = 0;


                            dtC.Rows.Add(drC);
                            line++;
                        }
                    }
                    //    }
                    //}
                    #endregion
                    #region xu ly update totalvalue
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        if (dtC.Rows[k]["TotalValue"].ToString() == "")
                        {
                            dtC.Rows[k]["TotalValue"] = SumValue;
                            break;
                        }
                    }
                    #endregion
                }

            }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        } 
        private void ConvertData1line()
        {
            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {
                if (dsC_Or.Tables[0].Rows.Count>0)
                {
                    for (int p = 0; p < dsC_Or.Tables[0].Rows.Count; p++)
                    {
                        for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                        {
                            drH = dtH.NewRow();
                            drH["VOUCHERKEY"] = p + 1;
                            drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                            DataSet dstmp = new DataSet();
                            dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                            if (dstmp.Tables[0].Rows.Count == 2)
                            {
                                drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                                drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                                drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                                drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                                drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                                drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                                drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                                drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                                drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                            }
                            else
                            {
                                drH["InvoiceName"] = "";
                                drH["InvoiceStreet"] = "";
                                drH["InvoiceStreet2"] = "";
                                drH["InvoiceCity"] = "";
                                drH["CountryInvoiceAddress"] = "";
                                drH["DeliveryName"] = "";
                                drH["DeliveryStreet"] = "";
                                drH["DeliveryCity"] = "";
                                drH["CountryDeliveryAddress"] = "";
                            }

                            drH["SerialNo"] = "";
                            drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                            drH["FCdate"] = "";
                            drH["TextLine4_OrderDate"] = "";
                            drH["OrderNo"] = "";
                            drH["OrderConfirmationDate"] = "";
                            drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString();// +" / " + dsC_Or.Tables[0].Rows[p]["OrderNumber"].ToString().Trim();
                            drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                            drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                            drH["VoucherType"] = 1;
                            // get Boxtype theo product code
                            if (chkHel.Checked == true)
                            {
                                drH["OrderType"] = "BX5";
                            }
                            else
                            {
                                DataSet dstmp_BoxType = new DataSet();
                                dstmp_BoxType = info.LoadBoxTypeMainProduct(dsC_Or.Tables[0].Rows[p]["MainProduct"].ToString(), dsC_Or.Tables[0].Rows[p]["ArticleNumberAd"].ToString().Replace(",",""));
                                if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                                {
                                    drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                                }
                            }

                            drH["PriceList"] = 1;
                            drH["TextLine1_ETD"] = "";
                            drH["TextLine2"] = "";
                            drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();
                            
                            if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString()!="")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                                if (str.Length>0)
	                                {
                                        drH["FreeText1_Incoterm"] = str[0];
	                                }
                            }
                            else
                            {
                                drH["FreeText1_Incoterm"] = "0";
                            }
                            if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                            {
                                String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                                if (str.Length > 0)
                                {
                                    drH["FreeText3_ShipBy"] = str[0];
                                }
                            }
                            else
                            {
                                drH["FreeText3_ShipBy"] = "0";
                            }
                            drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                            drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                            dtH.Rows.Add(drH);
                        }
                    }
                }
                    
                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;

            DataColumn LineCenterColumn;
            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);

            dtC.Columns.Add(LineCenterColumn);
            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region xu ly center

                // tim` nhung line cua order number tuong ung' de set line number va` set product code
                DataRow[] dtRows;
                dtRows =  dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                long totalqty = 0;
               // totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());

               
                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                   
                    for (int o = 0; o < dtRows.Length; o++)
                    {
                        int line = 1;
                        double SumValue = 0;
                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                       // int soline = 0;// so line = so size
                        int vtSize = 0;
                        //string str_Size_Qty_Price = "";

                        DataSet ds_Size = new DataSet();
                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region get size
                        #region SizeK1
                        if (int.Parse(dtRows[o]["SizeK1"].ToString()) > 0)
                        {
                            vtSize = 1;
                            //get sizeMold winline
                            if (chkHel.Checked==true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString()); //int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + 
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }


                                totalValue = totalValue +
                                    (int.Parse(dtRows[o]["SizeK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK1_5
                        if (int.Parse(dtRows[o]["SizeK1_5"].ToString()) > 0)
                        {
                            vtSize = 2;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue +
                                (int.Parse(dtRows[o]["SizeK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK2
                        if (int.Parse(dtRows[o]["SizeK2"].ToString()) > 0)
                        {
                            vtSize = 3;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK2_5
                        if (int.Parse(dtRows[o]["SizeK2_5"].ToString()) > 0)
                        {
                            vtSize = 4;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK3
                        if (int.Parse(dtRows[o]["SizeK3"].ToString()) > 0)
                        {
                            vtSize = 5;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK3_5
                        if (int.Parse(dtRows[o]["SizeK3_5"].ToString()) > 0)
                        {
                            vtSize = 6;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK4
                        if (int.Parse(dtRows[o]["SizeK4"].ToString()) > 0)
                        {
                            vtSize = 7;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                                if (ds_Size.Tables[0].Rows.Count > 0)
                                {
                                    // sizecode,qty,price
                                    DataRow[] foundRows_SizeK1;
                                    if (dttempSizeQtyPrice.Rows.Count > 0)
                                    {
                                        foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                        if (foundRows_SizeK1.Length > 0) // da co
                                        {
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4"].ToString());
                                        }
                                        else // chua co
                                        {
                                            drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                            drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                            drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                            dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                        }
                                    }
                                    else
                                    {
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                    totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                }
                            }
                        }
                        #endregion
                        #region SizeK4_5
                        if (int.Parse(dtRows[o]["SizeK4_5"].ToString()) > 0)
                        {
                            vtSize = 8;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK5
                        if (int.Parse(dtRows[o]["SizeK5"].ToString()) > 0)
                        {
                            vtSize = 9;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK5_5
                        if (int.Parse(dtRows[o]["SizeK5_5"].ToString()) > 0)
                        {
                            vtSize = 10;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK6
                        if (int.Parse(dtRows[o]["SizeK6"].ToString()) > 0)
                        {
                            vtSize = 11;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK6_5
                        if (int.Parse(dtRows[o]["SizeK6_5"].ToString()) > 0)
                        {
                            vtSize = 12;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK7
                        if (int.Parse(dtRows[o]["SizeK7"].ToString()) > 0)
                        {
                            vtSize = 13;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK7_5
                        if (int.Parse(dtRows[o]["SizeK7_5"].ToString()) > 0)
                        {
                            vtSize = 14;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK8
                        if (int.Parse(dtRows[o]["SizeK8"].ToString()) > 0)
                        {
                            vtSize = 15;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK8_5
                        if (int.Parse(dtRows[o]["SizeK8_5"].ToString()) > 0)
                        {
                            vtSize = 16;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK9
                        if (int.Parse(dtRows[o]["SizeK9"].ToString()) > 0)
                        {
                            vtSize = 17;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK9_5
                        if (int.Parse(dtRows[o]["SizeK9_5"].ToString()) > 0)
                        {
                            vtSize = 18;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK10
                        if (int.Parse(dtRows[o]["SizeK10"].ToString()) > 0)
                        {
                            vtSize = 19;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK10_5
                        if (int.Parse(dtRows[o]["SizeK10_5"].ToString()) > 0)
                        {
                            vtSize = 20;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK11
                        if (int.Parse(dtRows[o]["SizeK11"].ToString()) > 0)
                        {
                            vtSize = 21;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK11_5
                        if (int.Parse(dtRows[o]["SizeK11_5"].ToString()) > 0)
                        {
                            vtSize = 22;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK12
                        if (int.Parse(dtRows[o]["SizeK12"].ToString()) > 0)
                        {
                            vtSize = 23;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK12_5
                        if (int.Parse(dtRows[o]["SizeK12_5"].ToString()) > 0)
                        {
                            vtSize = 24;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK13
                        if (int.Parse(dtRows[o]["SizeK13"].ToString()) > 0)
                        {
                            vtSize = 25;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK13_5
                        if (int.Parse(dtRows[o]["SizeK13_5"].ToString()) > 0)
                        {
                            vtSize = 26;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK1
                        if (int.Parse(dtRows[o]["SizeUK1"].ToString()) > 0)
                        {
                            vtSize = 27;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK1_5
                        if (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) > 0)
                        {
                            vtSize = 28;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK2
                        if (int.Parse(dtRows[o]["SizeUK2"].ToString()) > 0)
                        {
                            vtSize = 29;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK2_5
                        if (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) > 0)
                        {
                            vtSize = 30;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK3
                        if (int.Parse(dtRows[o]["SizeUK3"].ToString()) > 0)
                        {
                            vtSize = 31;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK3_5
                        if (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) > 0)
                        {
                            vtSize = 32;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK4
                        if (int.Parse(dtRows[o]["SizeUK4"].ToString()) > 0)
                        {
                            vtSize = 33;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK4_5
                        if (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) > 0)
                        {
                            vtSize = 34;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK5
                        if (int.Parse(dtRows[o]["SizeUK5"].ToString()) > 0)
                        {
                            vtSize = 35;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK5_5
                        if (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) > 0)
                        {
                            vtSize = 36;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK6
                        if (int.Parse(dtRows[o]["SizeUK6"].ToString()) > 0)
                        {
                            vtSize = 37;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK6_5
                        if (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) > 0)
                        {
                            vtSize = 38;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK7
                        if (int.Parse(dtRows[o]["SizeUK7"].ToString()) > 0)
                        {
                            vtSize = 39;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK7_5
                        if (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) > 0)
                        {
                            vtSize = 40;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK8
                        if (int.Parse(dtRows[o]["SizeUK8"].ToString()) > 0)
                        {
                            vtSize = 41;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK8_5
                        if (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) > 0)
                        {
                            vtSize = 42;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK9
                        if (int.Parse(dtRows[o]["SizeUK9"].ToString()) > 0)
                        {
                            vtSize = 43;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK9_5
                        if (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) > 0)
                        {
                            vtSize = 44;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK10
                        if (int.Parse(dtRows[o]["SizeUK10"].ToString()) > 0)
                        {
                            vtSize = 45;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK10_5
                        if (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) > 0)
                        {
                            vtSize = 46;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK11
                        if (int.Parse(dtRows[o]["SizeUK11"].ToString()) > 0)
                        {
                            vtSize = 47;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK11_5
                        if (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) > 0)
                        {
                            vtSize = 48;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK12
                        if (int.Parse(dtRows[o]["SizeUK12"].ToString()) > 0)
                        {
                            vtSize = 49;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK12_5
                        if (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) > 0)
                        {
                            vtSize = 50;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK13
                        if (int.Parse(dtRows[o]["SizeUK13"].ToString()) > 0)
                        {
                            vtSize = 51;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK13_5
                        if (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) > 0)
                        {
                            vtSize = 52;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK14
                        if (int.Parse(dtRows[o]["SizeUK14"].ToString()) > 0)
                        {
                            vtSize = 53;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK14_5
                        if (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) > 0)
                        {
                            vtSize = 54;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK15
                        if (int.Parse(dtRows[o]["SizeUK15"].ToString()) > 0)
                        {
                            vtSize = 55;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK15_5
                        if (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) > 0)
                        {
                            vtSize = 56;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK16
                        if (int.Parse(dtRows[o]["SizeUK16"].ToString()) > 0)
                        {
                            vtSize = 57;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK16_5
                        if (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) > 0)
                        {
                            vtSize = 58;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK17
                        if (int.Parse(dtRows[o]["SizeUK17"].ToString()) > 0)
                        {
                            vtSize = 59;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK17_5
                        if (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) > 0)
                        {
                            vtSize = 60;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK18
                        if (int.Parse(dtRows[o]["SizeUK18"].ToString()) > 0)
                        {
                            vtSize = 61;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK18_5
                        if (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) > 0)
                        {
                            vtSize = 62;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK19
                        if (int.Parse(dtRows[o]["SizeUK19"].ToString()) > 0)
                        {
                            vtSize = 63;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK19_5
                        if (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) > 0)
                        {
                            vtSize = 64;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK20
                        if (int.Parse(dtRows[o]["SizeUK20"].ToString()) > 0)
                        {
                            vtSize = 65;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #endregion
                        #region xu ly main product (ko update total value)
                        if (o >= 0)
                        {
                            DataSet ds_Product = new DataSet();
                            ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                            if (ds_Product.Tables[0].Rows.Count > 0)
                            {
                                drC["VOUCHERKEY"] = o + 1;
                                drC["FileType"] = "1";
                                drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                                drC["QtyShipped"] = dtRows[o]["C006-QtyShip"].ToString();
                                drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                                drC["Ext1"] = "";
                                drC["Ext2"] = "";
                                drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                                drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                drC["PriceUnit"] = 0;
                                drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                                //drC["TotalValue"] = totalValue;
                                drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                drC["LineNumber"] = 1;
                                drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                                drC["PositionText"] = "";
                                drC["DeliveryDate"] = "";
                                drC["Confirmeddeldate"] = "";
                                drC["Ref"] = dtRows[o]["Ref"].ToString();
                                drC["Season"] = dtRows[o]["Season"].ToString();
                                drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                drC["CRD"] = dtRows[o]["CRD"].ToString();

                                dtC.Rows.Add(drC);
                            }
                        }
                        #endregion
                        #region lay data cho size-qty-price

                        if (dttempSizeQtyPrice.Rows.Count > 0)
                        {
                            for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                            {
                                DataSet ds_ProductColorSize = new DataSet();
                                ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString());
                                if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                                {
                                    drC = dtC.NewRow();
                                    drC["VOUCHERKEY"] = o + 1;
                                    drC["FileType"] = "1";
                                    drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                    drC["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                                    drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                    drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                    drC["Ext2"] = dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                    drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                    drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                    drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                    drC["PriceUnit"] = double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                    drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                    drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                    drC["TotalValue"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                    SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                    drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                    drC["LineNumber"] = line + 1;
                                    drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                    drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                    drC["DeliveryDate"] = "";
                                    drC["Confirmeddeldate"] = "";
                                    drC["Ref"] = dtRows[o]["Ref"].ToString();
                                    drC["Season"] = dtRows[o]["Season"].ToString();
                                    drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                    drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                    drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                    drC["CRD"] = dtRows[o]["CRD"].ToString();

                                    drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                    drC["SellerConfDeliDate"] = "";
                                    drC["SellUpdaDeliDate"] = "";
                                    drC["ConfDeliQty"] = 0;
                                    drC["UpdaDeliQty"] = 0;
                                    drC["SellerConfDeliDateLast"] = "";
                                    drC["SellerUpdaDeliDateLast"] = "";
                                    drC["ConfDeliQtyLast"] = 0;
                                    drC["UpdaDeliQtyLast"] = 0;


                                    dtC.Rows.Add(drC);
                                    line++;
                                }
                            }
                        }
                        #endregion
                        #region xu ly update totalvalue
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            if (dtC.Rows[k]["TotalValue"].ToString() == "")
                            {
                                dtC.Rows[k]["TotalValue"] = SumValue;
                                break;
                            }
                        }
                        #endregion
                    }
                  
                }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        }
        private void ConvertDataGroupSizeOrderN() // size ngang
        {
            // so OC
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["OrderNumber"] })
   .Select(g => g.OrderBy(r => r["LineID"]).First())
   .CopyToDataTable();

            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {

                // create line header number = line center number after to group by Order  number
                for (int t = 0; t < dt_Group.Rows.Count; t++)
                {

                    string s_OrderNumber = dt_Group.Rows[t]["OrderNumber"].ToString();
                    for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                    {
                        drH = dtH.NewRow();
                        drH["VOUCHERKEY"] = t + 1;
                        drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                        DataSet dstmp = new DataSet();
                        dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                        if (dstmp.Tables[0].Rows.Count == 2)
                        {
                            drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                            drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                            drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                            drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                            drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                            drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                            drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                            drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                            drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                        }
                        else
                        {
                            drH["InvoiceName"] = "";
                            drH["InvoiceStreet"] = "";
                            drH["InvoiceStreet2"] = "";
                            drH["InvoiceCity"] = "";
                            drH["CountryInvoiceAddress"] = "";
                            drH["DeliveryName"] = "";
                            drH["DeliveryStreet"] = "";
                            drH["DeliveryCity"] = "";
                            drH["CountryDeliveryAddress"] = "";
                        }

                        drH["SerialNo"] = "";
                        drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                        drH["FCdate"] = "";
                        drH["TextLine4_OrderDate"] = dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString();
                        drH["OrderNo"] = "";
                        drH["OrderConfirmationDate"] = "";
                        if (dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString()=="")
                        {
                            drH["TextLine3_PONo"] = s_OrderNumber;
                        }
                        else
                        {
                            drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() + " / " + s_OrderNumber;
                        }
                        drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                        drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                        drH["VoucherType"] = 1;
                        // get Boxtype theo product code
                        if (chkHel.Checked == true)
                        {
                            drH["OrderType"] = "BX5";
                        }
                        else
                        {
                            DataSet dstmp_BoxType = new DataSet();
                            dstmp_BoxType = info.LoadBoxTypeMainProduct(dt_Group.Rows[i]["MainProduct"].ToString(), dt_Group.Rows[i]["ArticleNumberAd"].ToString());
                            if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                            {
                                drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                            }
                        }

                        drH["PriceList"] = 1;
                        drH["TextLine1_ETD"] = "";
                        drH["TextLine2"] = "";
                        drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                        if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText1_Incoterm"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText1_Incoterm"] = "0";
                        }
                        if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText3_ShipBy"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText3_ShipBy"] = "0";
                        }
                        drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                        drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                        dtH.Rows.Add(drH);

                    }
                }
                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));
            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));

            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);
            dtC.Columns.Add(LineCenterColumn);

            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region xu ly center
            for (int c = 0; c < dt_Group.Rows.Count; c++)
            {
                // tim` nhung line cua order number tuong ung' de set line number va` set product code


                DataRow[] dtRows;
                dtRows = chkLine.Checked == false ? dsC_Or.Tables[0].Select("OrderNumber = '" + dt_Group.Rows[c]["OrderNumber"].ToString() + "'") : dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                long totalqty = 0,totalqty_Auto=0;
                totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());

                int line = 1;
                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                    double SumValue = 0;
                    for (int o = 0; o < dtRows.Length; o++)
                    {
                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                        int soline = 0;// so line = so size
                        int vtSize = 0;
                        string str_Size_Qty_Price = "";

                        DataSet ds_Size = new DataSet();
                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region get size
                        #region SizeK1
                        if (int.Parse(dtRows[o]["SizeK1"].ToString()) > 0)
                        {
                            vtSize = 1;
                            //get sizeMold winline
                            if (chkHel.Checked==true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString()); //int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + 
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }


                                totalValue = totalValue +(int.Parse(dtRows[o]["SizeK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK1"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK1_5
                        if (int.Parse(dtRows[o]["SizeK1_5"].ToString()) > 0)
                        {
                            vtSize = 2;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue +
                                (int.Parse(dtRows[o]["SizeK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK2
                        if (int.Parse(dtRows[o]["SizeK2"].ToString()) > 0)
                        {
                            vtSize = 3;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK2"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK2_5
                        if (int.Parse(dtRows[o]["SizeK2_5"].ToString()) > 0)
                        {
                            vtSize = 4;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK3
                        if (int.Parse(dtRows[o]["SizeK3"].ToString()) > 0)
                        {
                            vtSize = 5;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK3"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK3_5
                        if (int.Parse(dtRows[o]["SizeK3_5"].ToString()) > 0)
                        {
                            vtSize = 6;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK4
                        if (int.Parse(dtRows[o]["SizeK4"].ToString()) > 0)
                        {
                            vtSize = 7;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                                if (ds_Size.Tables[0].Rows.Count > 0)
                                {
                                    // sizecode,qty,price
                                    DataRow[] foundRows_SizeK1;
                                    if (dttempSizeQtyPrice.Rows.Count > 0)
                                    {
                                        foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                        if (foundRows_SizeK1.Length > 0) // da co
                                        {
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4"].ToString());
                                        }
                                        else // chua co
                                        {
                                            drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                            drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                            drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                            dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                        }
                                    }
                                    else
                                    {
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                    totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                    totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK4"].ToString());
                                }
                            }
                        }
                        #endregion
                        #region SizeK4_5
                        if (int.Parse(dtRows[o]["SizeK4_5"].ToString()) > 0)
                        {
                            vtSize = 8;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK5
                        if (int.Parse(dtRows[o]["SizeK5"].ToString()) > 0)
                        {
                            vtSize = 9;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK5_5
                        if (int.Parse(dtRows[o]["SizeK5_5"].ToString()) > 0)
                        {
                            vtSize = 10;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK6
                        if (int.Parse(dtRows[o]["SizeK6"].ToString()) > 0)
                        {
                            vtSize = 11;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK6"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK6_5
                        if (int.Parse(dtRows[o]["SizeK6_5"].ToString()) > 0)
                        {
                            vtSize = 12;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK7
                        if (int.Parse(dtRows[o]["SizeK7"].ToString()) > 0)
                        {
                            vtSize = 13;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK7"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK7_5
                        if (int.Parse(dtRows[o]["SizeK7_5"].ToString()) > 0)
                        {
                            vtSize = 14;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK8
                        if (int.Parse(dtRows[o]["SizeK8"].ToString()) > 0)
                        {
                            vtSize = 15;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK8"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK8_5
                        if (int.Parse(dtRows[o]["SizeK8_5"].ToString()) > 0)
                        {
                            vtSize = 16;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK9
                        if (int.Parse(dtRows[o]["SizeK9"].ToString()) > 0)
                        {
                            vtSize = 17;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK9"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK9_5
                        if (int.Parse(dtRows[o]["SizeK9_5"].ToString()) > 0)
                        {
                            vtSize = 18;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK10
                        if (int.Parse(dtRows[o]["SizeK10"].ToString()) > 0)
                        {
                            vtSize = 19;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK10"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK10_5
                        if (int.Parse(dtRows[o]["SizeK10_5"].ToString()) > 0)
                        {
                            vtSize = 20;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK11
                        if (int.Parse(dtRows[o]["SizeK11"].ToString()) > 0)
                        {
                            vtSize = 21;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK11"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK11_5
                        if (int.Parse(dtRows[o]["SizeK11_5"].ToString()) > 0)
                        {
                            vtSize = 22;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK12
                        if (int.Parse(dtRows[o]["SizeK12"].ToString()) > 0)
                        {
                            vtSize = 23;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK12"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK12_5
                        if (int.Parse(dtRows[o]["SizeK12_5"].ToString()) > 0)
                        {
                            vtSize = 24;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK13
                        if (int.Parse(dtRows[o]["SizeK13"].ToString()) > 0)
                        {
                            vtSize = 25;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK13"].ToString());
                            }
                        }
                        #endregion
                        #region SizeK13_5
                        if (int.Parse(dtRows[o]["SizeK13_5"].ToString()) > 0)
                        {
                            vtSize = 26;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK1
                        if (int.Parse(dtRows[o]["SizeUK1"].ToString()) > 0)
                        {
                            vtSize = 27;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK1"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK1_5
                        if (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) > 0)
                        {
                            vtSize = 28;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK2
                        if (int.Parse(dtRows[o]["SizeUK2"].ToString()) > 0)
                        {
                            vtSize = 29;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK2"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK2_5
                        if (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) > 0)
                        {
                            vtSize = 30;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK3
                        if (int.Parse(dtRows[o]["SizeUK3"].ToString()) > 0)
                        {
                            vtSize = 31;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK3"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK3_5
                        if (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) > 0)
                        {
                            vtSize = 32;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK4
                        if (int.Parse(dtRows[o]["SizeUK4"].ToString()) > 0)
                        {
                            vtSize = 33;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK4"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK4_5
                        if (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) > 0)
                        {
                            vtSize = 34;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK5
                        if (int.Parse(dtRows[o]["SizeUK5"].ToString()) > 0)
                        {
                            vtSize = 35;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK5_5
                        if (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) > 0)
                        {
                            vtSize = 36;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK6
                        if (int.Parse(dtRows[o]["SizeUK6"].ToString()) > 0)
                        {
                            vtSize = 37;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK6"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK6_5
                        if (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) > 0)
                        {
                            vtSize = 38;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK7
                        if (int.Parse(dtRows[o]["SizeUK7"].ToString()) > 0)
                        {
                            vtSize = 39;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK7"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK7_5
                        if (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) > 0)
                        {
                            vtSize = 40;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK8
                        if (int.Parse(dtRows[o]["SizeUK8"].ToString()) > 0)
                        {
                            vtSize = 41;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK8"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK8_5
                        if (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) > 0)
                        {
                            vtSize = 42;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK9
                        if (int.Parse(dtRows[o]["SizeUK9"].ToString()) > 0)
                        {
                            vtSize = 43;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK9"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK9_5
                        if (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) > 0)
                        {
                            vtSize = 44;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK10
                        if (int.Parse(dtRows[o]["SizeUK10"].ToString()) > 0)
                        {
                            vtSize = 45;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK10"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK10_5
                        if (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) > 0)
                        {
                            vtSize = 46;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK11
                        if (int.Parse(dtRows[o]["SizeUK11"].ToString()) > 0)
                        {
                            vtSize = 47;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK11"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK11_5
                        if (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) > 0)
                        {
                            vtSize = 48;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK12
                        if (int.Parse(dtRows[o]["SizeUK12"].ToString()) > 0)
                        {
                            vtSize = 49;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK12"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK12_5
                        if (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) > 0)
                        {
                            vtSize = 50;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK13
                        if (int.Parse(dtRows[o]["SizeUK13"].ToString()) > 0)
                        {
                            vtSize = 51;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK13"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK13_5
                        if (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) > 0)
                        {
                            vtSize = 52;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK14
                        if (int.Parse(dtRows[o]["SizeUK14"].ToString()) > 0)
                        {
                            vtSize = 53;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK14"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK14_5
                        if (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) > 0)
                        {
                            vtSize = 54;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK15
                        if (int.Parse(dtRows[o]["SizeUK15"].ToString()) > 0)
                        {
                            vtSize = 55;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK15"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK15_5
                        if (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) > 0)
                        {
                            vtSize = 56;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK16
                        if (int.Parse(dtRows[o]["SizeUK16"].ToString()) > 0)
                        {
                            vtSize = 57;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK16"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK16_5
                        if (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) > 0)
                        {
                            vtSize = 58;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK17
                        if (int.Parse(dtRows[o]["SizeUK17"].ToString()) > 0)
                        {
                            vtSize = 59;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK17"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK17_5
                        if (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) > 0)
                        {
                            vtSize = 60;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK18
                        if (int.Parse(dtRows[o]["SizeUK18"].ToString()) > 0)
                        {
                            vtSize = 61;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK18"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK18_5
                        if (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) > 0)
                        {
                            vtSize = 62;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK19
                        if (int.Parse(dtRows[o]["SizeUK19"].ToString()) > 0)
                        {
                            vtSize = 63;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK19"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK19_5
                        if (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) > 0)
                        {
                            vtSize = 64;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                            }
                        }
                        #endregion
                        #region SizeUK20
                        if (int.Parse(dtRows[o]["SizeUK20"].ToString()) > 0)
                        {
                            vtSize = 65;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                totalqty_Auto = totalqty_Auto + int.Parse(dtRows[o]["SizeUK20"].ToString());
                            }
                        }
                        #endregion
                        #endregion
                        #region xu ly main product (ko update total value)
                        if (o == 0)
                        {
                            DataSet ds_Product = new DataSet();
                            ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                            if (ds_Product.Tables[0].Rows.Count > 0)
                            {
                                drC["VOUCHERKEY"] = c + 1;
                                drC["FileType"] = "1";
                                drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                                drC["QtyShipped"] = totalqty == 0 ? totalqty_Auto : totalqty;//dtRows[o]["C006-QtyShip"].ToString();
                                drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                                drC["Ext1"] = "";
                                drC["Ext2"] = "";
                                drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                                drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                drC["PriceUnit"] = 0;
                                drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                                //drC["TotalValue"] = totalValue;
                                drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                drC["LineNumber"] = 1;
                                drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                                drC["PositionText"] = "";
                                drC["DeliveryDate"] = "";
                                drC["Confirmeddeldate"] = "";
                                drC["Ref"] = dtRows[o]["Ref"].ToString();
                                drC["Season"] = dtRows[o]["Season"].ToString();
                                drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                drC["CRD"] = dtRows[o]["CRD"].ToString();

                                dtC.Rows.Add(drC);
                            }
                        }
                        #endregion
                        #region lay data cho size-qty-price

                        if (dttempSizeQtyPrice.Rows.Count > 0)
                        {
                            for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                            {
                                DataSet ds_ProductColorSize = new DataSet();

                                ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString());

                                if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                                {
                                    string ProductNmber = "";
                                    ProductNmber = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                    DataRow[] dtRows_Old;
                                    dtRows_Old = dtC.Select("OrderNumber = '" + dtRows[o]["OrderNumber"].ToString() + "' and ProductNumber ='" + ProductNmber + "' and Ext1 = '" + dtRows[o]["ColorCode"].ToString() + "' and Ext2 ='" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString() + "'");
                                    if (dtRows_Old.Length>0)
                                    {
                                        dtRows_Old[0]["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) + int.Parse(dtRows_Old[0]["QtyShipped"].ToString());
                                        dtRows_Old[0]["TotalValue"] = (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString())) + Double.Parse(dtRows_Old[0]["TotalValue"].ToString());
                                        SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                    }
                                    else
                                    {
                                        drC = dtC.NewRow();
                                        drC["VOUCHERKEY"] = c + 1;
                                        drC["FileType"] = "1";
                                        drC["ProductNumber"] = ProductNmber;
                                        drC["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                                        drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                        drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                        drC["Ext2"] = dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                        drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                        drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                        drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                        drC["PriceUnit"] = double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                        drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                        drC["TotalValue"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                        SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                        drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                        drC["LineNumber"] = line + 1;
                                        drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                        drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                        drC["DeliveryDate"] = "";
                                        drC["Confirmeddeldate"] = "";
                                        drC["Ref"] = dtRows[o]["Ref"].ToString();
                                        drC["Season"] = dtRows[o]["Season"].ToString();
                                        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                        drC["CRD"] = dtRows[o]["CRD"].ToString();

                                        drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                        drC["SellerConfDeliDate"] = "";
                                        drC["SellUpdaDeliDate"] = "";
                                        drC["ConfDeliQty"] = 0;
                                        drC["UpdaDeliQty"] = 0;
                                        drC["SellerConfDeliDateLast"] = "";
                                        drC["SellerUpdaDeliDateLast"] = "";
                                        drC["ConfDeliQtyLast"] = 0;
                                        drC["UpdaDeliQtyLast"] = 0;
                                        dtC.Rows.Add(drC);
                                        line++;
                                    }

                                }
                            }
                        }
                        #endregion
                    }
                    #region xu ly update totalvalue
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        if (dtC.Rows[k]["OrderNumber"].ToString() == dt_Group.Rows[c]["OrderNumber"].ToString() && dtC.Rows[k]["TotalValue"].ToString() == "")
                        {
                            dtC.Rows[k]["TotalValue"] = SumValue;
                            break;
                        }
                    }
                    #endregion
                }
            }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        }
        private void ConvertDataGroup()
        {
            // so OC
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["OrderNumber"] })
   .Select(g => g.OrderBy(r => r["LineID"]).First())
   .CopyToDataTable();

            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion 
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count>0)
            {
               
                // create line header number = line center number after to group by Order  number
                for (int t = 0; t < dt_Group.Rows.Count; t++)
                {

                    string s_OrderNumber = dt_Group.Rows[t]["OrderNumber"].ToString();
                    for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                    {
                        drH = dtH.NewRow();
                        drH["VOUCHERKEY"] = t + 1;
                        drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                        DataSet dstmp = new DataSet();
                        dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                        if (dstmp.Tables[0].Rows.Count == 2)
                        {
                            drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                            drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                            drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                            drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                            drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                            drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                            drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                            drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                            drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                        }
                        else
                        {
                            drH["InvoiceName"] = "";
                            drH["InvoiceStreet"] = "";
                            drH["InvoiceStreet2"] = "";
                            drH["InvoiceCity"] = "";
                            drH["CountryInvoiceAddress"] = "";
                            drH["DeliveryName"] = "";
                            drH["DeliveryStreet"] = "";
                            drH["DeliveryCity"] = "";
                            drH["CountryDeliveryAddress"] = "";
                        }

                        drH["SerialNo"] = "";
                        drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                        drH["FCdate"] = "";
                        drH["TextLine4_OrderDate"] = dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString() ;
                        drH["OrderNo"] = "";
                        drH["OrderConfirmationDate"] = "";
                        drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() + " / " + s_OrderNumber;
                        drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                        drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                        drH["VoucherType"] = 1;
                        // get Boxtype theo product code
                        if (chkHel.Checked==true)
                        {
                            drH["OrderType"] = "BX5";
                        }
                        else
                        {
                            DataSet dstmp_BoxType = new DataSet();
                            dstmp_BoxType = info.LoadBoxTypeMainProduct(dt_Group.Rows[i]["MainProduct"].ToString(), dt_Group.Rows[i]["ArticleNumberAd"].ToString());
                            if (dstmp_BoxType.Tables[0].Rows.Count>0)
                            {
                                drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                            }
                        }

                        drH["PriceList"] = 1;
                        drH["TextLine1_ETD"] = "";
                        drH["TextLine2"] = "";
                        drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                        if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText1_Incoterm"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText1_Incoterm"] = "0";
                        }
                        if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText3_ShipBy"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText3_ShipBy"] = "0";
                        }
                        drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                        drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                        dtH.Rows.Add(drH);

                    }
                }
                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));
            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));

            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);
            dtC.Columns.Add(LineCenterColumn);

            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion 
            #region xu ly center
            for (int c = 0; c < dt_Group.Rows.Count; c++)
            {
                // tim` nhung line cua order number tuong ung' de set line number va` set product code


                DataRow[] dtRows;
                dtRows = chkLine.Checked == false ? dsC_Or.Tables[0].Select("OrderNumber = '" + dt_Group.Rows[c]["OrderNumber"].ToString() + "'") : dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                long totalqty = 0;
                totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());
                
                int line = 1;
                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                    double SumValue = 0;
                    for (int o = 0; o < dtRows.Length; o++)
                    {
                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                        int soline = 0;// so line = so size
                        int vtSize = 0;
                        string str_Size_Qty_Price = "";

                        DataSet ds_Size = new DataSet();
                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region get size
                        #region SizeK1
                        if (int.Parse(dtRows[o]["SizeK1"].ToString()) > 0)
                        {
                            vtSize = 1;
                            //get sizeMold winline
                            if (chkHel.Checked==true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }

                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString()); //int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + 
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }


                                totalValue = totalValue +
                                    (int.Parse(dtRows[o]["SizeK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK1_5
                        if (int.Parse(dtRows[o]["SizeK1_5"].ToString()) > 0)
                        {
                            vtSize = 2;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue +
                                (int.Parse(dtRows[o]["SizeK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK2
                        if (int.Parse(dtRows[o]["SizeK2"].ToString()) > 0)
                        {
                            vtSize = 3;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =int.Parse(dtRows[o]["SizeK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK2_5
                        if (int.Parse(dtRows[o]["SizeK2_5"].ToString()) > 0)
                        {
                            vtSize = 4;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK3
                        if (int.Parse(dtRows[o]["SizeK3"].ToString()) > 0)
                        {
                            vtSize = 5;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =int.Parse(dtRows[o]["SizeK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK3_5
                        if (int.Parse(dtRows[o]["SizeK3_5"].ToString()) > 0)
                        {
                            vtSize = 6;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK4
                        if (int.Parse(dtRows[o]["SizeK4"].ToString()) > 0)
                        {
                            vtSize = 7;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                                if (ds_Size.Tables[0].Rows.Count > 0)
                                {
                                    // sizecode,qty,price
                                    DataRow[] foundRows_SizeK1;
                                    if (dttempSizeQtyPrice.Rows.Count > 0)
                                    {
                                        foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                        if (foundRows_SizeK1.Length > 0) // da co
                                        {
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4"].ToString());
                                        }
                                        else // chua co
                                        {
                                            drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                            drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                            drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                            drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                            dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                        }
                                    }
                                    else
                                    {
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                    totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                }
                            }
                        }
                        #endregion
                        #region SizeK4_5
                        if (int.Parse(dtRows[o]["SizeK4_5"].ToString()) > 0)
                        {
                            vtSize = 8;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK5
                        if (int.Parse(dtRows[o]["SizeK5"].ToString()) > 0)
                        {
                            vtSize = 9;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK5_5
                        if (int.Parse(dtRows[o]["SizeK5_5"].ToString()) > 0)
                        {
                            vtSize = 10;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK6
                        if (int.Parse(dtRows[o]["SizeK6"].ToString()) > 0)
                        {
                            vtSize = 11;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK6_5
                        if (int.Parse(dtRows[o]["SizeK6_5"].ToString()) > 0)
                        {
                            vtSize = 12;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK7
                        if (int.Parse(dtRows[o]["SizeK7"].ToString()) > 0)
                        {
                            vtSize = 13;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK7_5
                        if (int.Parse(dtRows[o]["SizeK7_5"].ToString()) > 0)
                        {
                            vtSize = 14;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK8
                        if (int.Parse(dtRows[o]["SizeK8"].ToString()) > 0)
                        {
                            vtSize = 15;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK8_5
                        if (int.Parse(dtRows[o]["SizeK8_5"].ToString()) > 0)
                        {
                            vtSize = 16;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK9
                        if (int.Parse(dtRows[o]["SizeK9"].ToString()) > 0)
                        {
                            vtSize = 17;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK9_5
                        if (int.Parse(dtRows[o]["SizeK9_5"].ToString()) > 0)
                        {
                            vtSize = 18;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK10
                        if (int.Parse(dtRows[o]["SizeK10"].ToString()) > 0)
                        {
                            vtSize = 19;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK10_5
                        if (int.Parse(dtRows[o]["SizeK10_5"].ToString()) > 0)
                        {
                            vtSize = 20;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK11
                        if (int.Parse(dtRows[o]["SizeK11"].ToString()) > 0)
                        {
                            vtSize = 21;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK11_5
                        if (int.Parse(dtRows[o]["SizeK11_5"].ToString()) > 0)
                        {
                            vtSize = 22;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK12
                        if (int.Parse(dtRows[o]["SizeK12"].ToString()) > 0)
                        {
                            vtSize = 23;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK12_5
                        if (int.Parse(dtRows[o]["SizeK12_5"].ToString()) > 0)
                        {
                            vtSize = 24;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK13
                        if (int.Parse(dtRows[o]["SizeK13"].ToString()) > 0)
                        {
                            vtSize = 25;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeK13_5
                        if (int.Parse(dtRows[o]["SizeK13_5"].ToString()) > 0)
                        {
                            vtSize = 26;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK1
                        if (int.Parse(dtRows[o]["SizeUK1"].ToString()) > 0)
                        {
                            vtSize = 27;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK1"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK1_5
                        if (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) > 0)
                        {
                            vtSize = 28;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK1_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK1_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK2
                        if (int.Parse(dtRows[o]["SizeUK2"].ToString()) > 0)
                        {
                            vtSize = 29;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK2"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK2_5
                        if (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) > 0)
                        {
                            vtSize = 30;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK2_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK2_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK3
                        if (int.Parse(dtRows[o]["SizeUK3"].ToString()) > 0)
                        {
                            vtSize = 31;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK3_5
                        if (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) > 0)
                        {
                            vtSize = 32;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK3_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK3_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK4
                        if (int.Parse(dtRows[o]["SizeUK4"].ToString()) > 0)
                        {
                            vtSize = 33;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK4"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK4_5
                        if (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) > 0)
                        {
                            vtSize = 34;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK4_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK4_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK5
                        if (int.Parse(dtRows[o]["SizeUK5"].ToString()) > 0)
                        {
                            vtSize = 35;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }

                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK5_5
                        if (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) > 0)
                        {
                            vtSize = 36;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK5_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK5_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK6
                        if (int.Parse(dtRows[o]["SizeUK6"].ToString()) > 0)
                        {
                            vtSize = 37;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK6"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK6_5
                        if (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) > 0)
                        {
                            vtSize = 38;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK6_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK6_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK7
                        if (int.Parse(dtRows[o]["SizeUK7"].ToString()) > 0)
                        {
                            vtSize = 39;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK7"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK7_5
                        if (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) > 0)
                        {
                            vtSize = 40;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK7_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK7_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK8
                        if (int.Parse(dtRows[o]["SizeUK8"].ToString()) > 0)
                        {
                            vtSize = 41;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK8_5
                        if (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) > 0)
                        {
                            vtSize = 42;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK8_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK8_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK9
                        if (int.Parse(dtRows[o]["SizeUK9"].ToString()) > 0)
                        {
                            vtSize = 43;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK9"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK9_5
                        if (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) > 0)
                        {
                            vtSize = 44;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK9_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK9_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK10
                        if (int.Parse(dtRows[o]["SizeUK10"].ToString()) > 0)
                        {
                            vtSize = 45;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK10_5
                        if (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) > 0)
                        {
                            vtSize = 46;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK10_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK10_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK11
                        if (int.Parse(dtRows[o]["SizeUK11"].ToString()) > 0)
                        {
                            vtSize = 47;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK11_5
                        if (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) > 0)
                        {
                            vtSize = 48;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK11_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK11_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK12
                        if (int.Parse(dtRows[o]["SizeUK12"].ToString()) > 0)
                        {
                            vtSize = 49;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK12_5
                        if (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) > 0)
                        {
                            vtSize = 50;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK12_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK12_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK13
                        if (int.Parse(dtRows[o]["SizeUK13"].ToString()) > 0)
                        {
                            vtSize = 51;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK13_5
                        if (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) > 0)
                        {
                            vtSize = 52;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK13_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK13_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK14
                        if (int.Parse(dtRows[o]["SizeUK14"].ToString()) > 0)
                        {
                            vtSize = 53;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =int.Parse(dtRows[o]["SizeUK14"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK14_5
                        if (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) > 0)
                        {
                            vtSize = 54;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK14_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK14_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK15
                        if (int.Parse(dtRows[o]["SizeUK15"].ToString()) > 0)
                        {
                            vtSize = 55;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK15"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK15_5
                        if (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) > 0)
                        {
                            vtSize = 56;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK15_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK15_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK16
                        if (int.Parse(dtRows[o]["SizeUK16"].ToString()) > 0)
                        {
                            vtSize = 57;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK16_5
                        if (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) > 0)
                        {
                            vtSize = 58;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK16_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK16_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK17
                        if (int.Parse(dtRows[o]["SizeUK17"].ToString()) > 0)
                        {
                            vtSize = 59;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK17_5
                        if (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) > 0)
                        {
                            vtSize = 60;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK17_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK17_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK18
                        if (int.Parse(dtRows[o]["SizeUK18"].ToString()) > 0)
                        {
                            vtSize = 61;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK18_5
                        if (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) > 0)
                        {
                            vtSize = 62;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK18_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK18_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK19
                        if (int.Parse(dtRows[o]["SizeUK19"].ToString()) > 0)
                        {
                            vtSize = 63;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK19_5
                        if (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) > 0)
                        {
                            vtSize = 64;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK19_5"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK19_5"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #region SizeUK20
                        if (int.Parse(dtRows[o]["SizeUK20"].ToString()) > 0)
                        {
                            vtSize = 65;
                            //get sizeMold winline
                            if (chkHel.Checked == true)
                            {
                                ds_Size = info.LoadSizeProductCodePriceHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            else
                            {
                                ds_Size = info.LoadSizeProductCodePrice(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), vtSize);
                            }
                            if (ds_Size.Tables[0].Rows.Count > 0)
                            {
                                // sizecode,qty,price
                                DataRow[] foundRows_SizeK1;
                                if (dttempSizeQtyPrice.Rows.Count > 0)
                                {
                                    foundRows_SizeK1 = dttempSizeQtyPrice.Select("SizeCodetmp='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (foundRows_SizeK1.Length > 0) // da co
                                    {
                                        drtempSizeQtyPrice["Qtytmp"] = int.Parse(drtempSizeQtyPrice["Qtytmp"].ToString()) + int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    }
                                    else // chua co
                                    {
                                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                                        drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drtempSizeQtyPrice["Qtytmp"] =  int.Parse(dtRows[o]["SizeUK20"].ToString());
                                        drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                        dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                    }
                                }
                                else
                                {
                                    drtempSizeQtyPrice["SizeCodetmp"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    drtempSizeQtyPrice["Qtytmp"] = int.Parse(dtRows[o]["SizeUK20"].ToString());
                                    drtempSizeQtyPrice["Pricetmp"] = ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString();
                                    dttempSizeQtyPrice.Rows.Add(drtempSizeQtyPrice);
                                }
                                totalValue = totalValue + (int.Parse(dtRows[o]["SizeUK20"].ToString()) * double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                            }
                        }
                        #endregion
                        #endregion
                        #region xu ly main product (ko update total value)
                            if (o == 0)
                            {
                                DataSet ds_Product = new DataSet();
                                ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                                if (ds_Product.Tables[0].Rows.Count > 0)
                                {
                                    drC["VOUCHERKEY"] = c + 1;
                                    drC["FileType"] = "1";
                                    drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                                    drC["QtyShipped"] = totalqty;//dtRows[o]["C006-QtyShip"].ToString();
                                    drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                                    drC["Ext1"] = "";
                                    drC["Ext2"] = "";
                                    drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                                    drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                    drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                    drC["PriceUnit"] = 0;
                                    drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                    drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                                    //drC["TotalValue"] = totalValue;
                                    drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                    drC["LineNumber"] = 1;
                                    drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                                    drC["PositionText"] = "";
                                    drC["DeliveryDate"] = "";
                                    drC["Confirmeddeldate"] = "";
                                    drC["Ref"] = dtRows[o]["Ref"].ToString();
                                    drC["Season"] = dtRows[o]["Season"].ToString();
                                    drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                    drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                    drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                    drC["CRD"] = dtRows[o]["CRD"].ToString();

                                    dtC.Rows.Add(drC);
                                }
                            }
                        #endregion
                        #region lay data cho size-qty-price

                        if (dttempSizeQtyPrice.Rows.Count > 0)
                        {
                            for (int h = 0; h < dttempSizeQtyPrice.Rows.Count; h++)
                            {
                                DataSet ds_ProductColorSize = new DataSet();
                                ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString());
                                if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                                {
                                    drC = dtC.NewRow();
                                    drC["VOUCHERKEY"] = c + 1;
                                    drC["FileType"] = "1";
                                    drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                    drC["QtyShipped"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString());
                                    drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                    drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                    drC["Ext2"] = dttempSizeQtyPrice.Rows[h]["SizeCodetmp"].ToString();
                                    drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                    drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                    drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                    drC["PriceUnit"] = double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                    drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                    drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                    drC["TotalValue"] = int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString());
                                    SumValue = SumValue + (int.Parse(dttempSizeQtyPrice.Rows[h]["Qtytmp"].ToString()) * Double.Parse(dttempSizeQtyPrice.Rows[h]["Pricetmp"].ToString()));
                                    drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                    drC["LineNumber"] = line + 1;
                                    drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                    drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                    drC["DeliveryDate"] = "";
                                    drC["Confirmeddeldate"] = "";
                                    drC["Ref"] = dtRows[o]["Ref"].ToString();
                                    drC["Season"] = dtRows[o]["Season"].ToString();
                                    drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                    drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                    drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                    drC["CRD"] = dtRows[o]["CRD"].ToString();

                                    drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                    drC["SellerConfDeliDate"] = "";
                                    drC["SellUpdaDeliDate"] = "";
                                    drC["ConfDeliQty"] = 0;
                                    drC["UpdaDeliQty"] = 0;
                                    drC["SellerConfDeliDateLast"] = "";
                                    drC["SellerUpdaDeliDateLast"] = "";
                                    drC["ConfDeliQtyLast"] = 0;
                                    drC["UpdaDeliQtyLast"] = 0;
                                    dtC.Rows.Add(drC);
                                    line++;
                                }
                            }
                        }
                        #endregion
                    }
                    #region xu ly update totalvalue
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        if (dtC.Rows[k]["OrderNumber"].ToString()==dt_Group.Rows[c]["OrderNumber"].ToString() && dtC.Rows[k]["TotalValue"].ToString()=="")
                        {
                            dtC.Rows[k]["TotalValue"] = SumValue;
                            break;
                        }
                    }
                    #endregion
                }
            }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        }
        private void ConvertDataGroupSizeG() // size doc
        {
            // so OC
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["OrderNumber"] })
   .Select(g => g.OrderBy(r => r["LineID"]).First())
   .CopyToDataTable();

            #region data header
            System.Data.DataTable dtH;
            DataRow drH;
            #region define column name
            DataColumn VoucherKeyColumn;
            DataColumn AccNumberColumn;
            DataColumn SerialNoColumn;
            DataColumn InvoiceNameColumn;
            DataColumn InvoiceStreetColumn;
            DataColumn InvoiceStreet2Column;
            DataColumn InvoiceCityColumn;
            DataColumn CountryInvoiceAddressColumn;
            DataColumn NetDaysColumn;
            DataColumn FCdateColumn;
            DataColumn TextLine4_C066_OrderDateColumn;
            DataColumn OrderNoColumn;
            DataColumn OrderConfirmationDateColumn;
            DataColumn TextLine3_C065_PONoColumn;
            DataColumn TextLine5_OrderByColumn;
            DataColumn DeliveryNameColumn;
            DataColumn DeliveryStreetColumn;
            DataColumn DeliveryCityColumn;
            DataColumn CountryDeliveryAddressColumn;
            DataColumn TermsofPaymentColumn;
            DataColumn VoucherTypeColumn;
            DataColumn OrderTypeColumn;
            DataColumn PriceListColumn;
            DataColumn TextLine1_ETDColumn;
            DataColumn TextLine2Column;
            DataColumn AccountShippingAddressColumn;
            DataColumn FreeText1IncotermColumn;
            DataColumn FreeText3ShipByColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column description
            dtH = new System.Data.DataTable();
            VoucherKeyColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            AccNumberColumn = new DataColumn("AccountNumber", Type.GetType("System.String"));
            SerialNoColumn = new DataColumn("SerialNo", Type.GetType("System.String"));
            InvoiceNameColumn = new DataColumn("InvoiceName", Type.GetType("System.String"));
            InvoiceStreetColumn = new DataColumn("InvoiceStreet", Type.GetType("System.String"));
            InvoiceStreet2Column = new DataColumn("InvoiceStreet2", Type.GetType("System.String"));
            InvoiceCityColumn = new DataColumn("InvoiceCity", Type.GetType("System.String"));
            CountryInvoiceAddressColumn = new DataColumn("CountryInvoiceAddress", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("NetDays", Type.GetType("System.Int32"));
            FCdateColumn = new DataColumn("FCdate", Type.GetType("System.String"));
            TextLine4_C066_OrderDateColumn = new DataColumn("TextLine4_OrderDate", Type.GetType("System.String"));
            OrderNoColumn = new DataColumn("OrderNo", Type.GetType("System.String"));
            OrderConfirmationDateColumn = new DataColumn("OrderConfirmationDate", Type.GetType("System.String"));
            TextLine3_C065_PONoColumn = new DataColumn("TextLine3_PONo", Type.GetType("System.String"));
            TextLine5_OrderByColumn = new DataColumn("TextLine5_OrderBy", Type.GetType("System.String"));
            DeliveryNameColumn = new DataColumn("DeliveryName", Type.GetType("System.String"));
            DeliveryStreetColumn = new DataColumn("DeliveryStreet", Type.GetType("System.String"));
            DeliveryCityColumn = new DataColumn("DeliveryCity", Type.GetType("System.String"));
            CountryDeliveryAddressColumn = new DataColumn("CountryDeliveryAddress", Type.GetType("System.String"));
            TermsofPaymentColumn = new DataColumn("TermsofPayment", Type.GetType("System.String"));
            VoucherTypeColumn = new DataColumn("VoucherType", Type.GetType("System.String"));
            OrderTypeColumn = new DataColumn("OrderType", Type.GetType("System.String"));
            PriceListColumn = new DataColumn("PriceList", Type.GetType("System.Int32"));
            TextLine1_ETDColumn = new DataColumn("TextLine1_ETD", Type.GetType("System.String"));
            TextLine2Column = new DataColumn("TextLine2", Type.GetType("System.String"));
            AccountShippingAddressColumn = new DataColumn("AccountShippingAddress", Type.GetType("System.String"));
            FreeText1IncotermColumn = new DataColumn("FreeText1_Incoterm", Type.GetType("System.String"));
            FreeText3ShipByColumn = new DataColumn("FreeText3_ShipBy", Type.GetType("System.String"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region define function adding column into datatable
            dtH.Columns.Add(VoucherKeyColumn);
            dtH.Columns.Add(AccNumberColumn);
            dtH.Columns.Add(SerialNoColumn);
            dtH.Columns.Add(InvoiceNameColumn);
            dtH.Columns.Add(InvoiceStreetColumn);
            dtH.Columns.Add(InvoiceStreet2Column);
            dtH.Columns.Add(InvoiceCityColumn);
            dtH.Columns.Add(CountryInvoiceAddressColumn);
            dtH.Columns.Add(NetDaysColumn);
            dtH.Columns.Add(FCdateColumn);
            dtH.Columns.Add(TextLine4_C066_OrderDateColumn);
            dtH.Columns.Add(OrderNoColumn);
            dtH.Columns.Add(OrderConfirmationDateColumn);
            dtH.Columns.Add(TextLine3_C065_PONoColumn);
            dtH.Columns.Add(TextLine5_OrderByColumn);
            dtH.Columns.Add(DeliveryNameColumn);
            dtH.Columns.Add(DeliveryStreetColumn);
            dtH.Columns.Add(DeliveryCityColumn);
            dtH.Columns.Add(CountryDeliveryAddressColumn);
            dtH.Columns.Add(TermsofPaymentColumn);
            dtH.Columns.Add(VoucherTypeColumn);
            dtH.Columns.Add(OrderTypeColumn);
            dtH.Columns.Add(PriceListColumn);
            dtH.Columns.Add(TextLine1_ETDColumn);
            dtH.Columns.Add(TextLine2Column);
            dtH.Columns.Add(AccountShippingAddressColumn);
            dtH.Columns.Add(FreeText1IncotermColumn);
            dtH.Columns.Add(FreeText3ShipByColumn);
            dtH.Columns.Add(VersionColumn);
            dtH.Columns.Add(PurposeColumn);
            #endregion
            #region set data into header grv
            if (dsH_Or.Tables[0].Rows.Count > 0)
            {

                // create line header number = line center number after to group by Order  number
                for (int t = 0; t < dt_Group.Rows.Count; t++)
                {

                    string s_OrderNumber = dt_Group.Rows[t]["OrderNumber"].ToString();
                    for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
                    {
                        drH = dtH.NewRow();
                        drH["VOUCHERKEY"] = t + 1;
                        drH["AccountNumber"] = dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString();
                        DataSet dstmp = new DataSet();
                        dstmp = info.LoadAccount_Delivery(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(), dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString());
                        if (dstmp.Tables[0].Rows.Count == 2)
                        {
                            drH["InvoiceName"] = dstmp.Tables[0].Rows[0]["InvName"].ToString();
                            drH["InvoiceStreet"] = dstmp.Tables[0].Rows[0]["InvStreet"].ToString();
                            drH["InvoiceStreet2"] = dstmp.Tables[0].Rows[0]["InvStreet2"].ToString();
                            drH["InvoiceCity"] = dstmp.Tables[0].Rows[0]["InvCity"].ToString();
                            drH["CountryInvoiceAddress"] = dstmp.Tables[0].Rows[0]["CountryInvAddress"].ToString();
                            drH["DeliveryName"] = dstmp.Tables[0].Rows[1]["DeliveryName"].ToString();
                            drH["DeliveryStreet"] = dstmp.Tables[0].Rows[1]["DeliveryStreet"].ToString();
                            drH["DeliveryCity"] = dstmp.Tables[0].Rows[1]["DeliveryCity"].ToString();
                            drH["CountryDeliveryAddress"] = dstmp.Tables[0].Rows[1]["CountryDeliveryAddress"].ToString();
                        }
                        else
                        {
                            drH["InvoiceName"] = "";
                            drH["InvoiceStreet"] = "";
                            drH["InvoiceStreet2"] = "";
                            drH["InvoiceCity"] = "";
                            drH["CountryInvoiceAddress"] = "";
                            drH["DeliveryName"] = "";
                            drH["DeliveryStreet"] = "";
                            drH["DeliveryCity"] = "";
                            drH["CountryDeliveryAddress"] = "";
                        }

                        drH["SerialNo"] = "";
                        drH["NetDays"] = dsH_Or.Tables[0].Rows[i]["C037-NetDays"].ToString();
                        drH["FCdate"] = "";
                        drH["TextLine4_OrderDate"] = dsH_Or.Tables[0].Rows[i]["C066-OrderDate"].ToString();
                        drH["OrderNo"] = "";
                        drH["OrderConfirmationDate"] = "";
                        if (dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString()=="")
                        {
                            drH["TextLine3_PONo"] = s_OrderNumber;
                        }
                        else
                        {
                            drH["TextLine3_PONo"] = dsH_Or.Tables[0].Rows[i]["C065-PONo"].ToString() + " / " + s_OrderNumber;
                        }
                        drH["TextLine5_OrderBy"] = dsH_Or.Tables[0].Rows[i]["C067-OrderBy"].ToString();//C067-OrderBy

                        drH["TermsofPayment"] = dsH_Or.Tables[0].Rows[i]["C051-TermofPayment"].ToString();
                        drH["VoucherType"] = 1;
                        // get Boxtype theo product code
                        if (chkHel.Checked == true)
                        {
                            drH["OrderType"] = "BX5";
                        }
                        else
                        {
                            DataSet dstmp_BoxType = new DataSet();
                            dstmp_BoxType = info.LoadBoxTypeMainProduct(dt_Group.Rows[i]["MainProduct"].ToString(), dt_Group.Rows[i]["ArticleNumberAd"].ToString());
                            if (dstmp_BoxType.Tables[0].Rows.Count > 0)
                            {
                                drH["OrderType"] = dstmp_BoxType.Tables[0].Rows[0]["BoxType"];
                            }
                        }

                        drH["PriceList"] = 1;
                        drH["TextLine1_ETD"] = "";
                        drH["TextLine2"] = "";
                        drH["AccountShippingAddress"] = dsH_Or.Tables[0].Rows[i]["AccountShip"].ToString();

                        if (dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["Inconterm"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText1_Incoterm"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText1_Incoterm"] = "0";
                        }
                        if (dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString() != "")
                        {
                            String[] str = dsH_Or.Tables[0].Rows[i]["ShipBy"].ToString().Split(new Char[] { '-' });
                            if (str.Length > 0)
                            {
                                drH["FreeText3_ShipBy"] = str[0];
                            }
                        }
                        else
                        {
                            drH["FreeText3_ShipBy"] = "0";
                        }
                        drH["Version"] = dsH_Or.Tables[0].Rows[i]["Version"].ToString();
                        drH["Purpose"] = dsH_Or.Tables[0].Rows[i]["Purpose"].ToString();

                        dtH.Rows.Add(drH);

                    }
                }
                dsH_Con.Tables.Add(dtH);

            }
            #endregion
            #endregion
            #region data center
            System.Data.DataTable dtC;
            DataRow drC;
            #region define column name
            DataColumn VoucherKeyCColumn;
            DataColumn FileTypeColumn;
            DataColumn ProductNumberColumn;
            DataColumn QtyShippedColumn;
            DataColumn DescriptionColumn;
            DataColumn Ext1Column;
            DataColumn Ext2Column;
            DataColumn CostObjectiveColumn;
            DataColumn VendorProductNoColumn;
            DataColumn VendorProductDescColumn;
            DataColumn PriceUnitColumn;
            DataColumn MainProductNoColumn;
            DataColumn UMColumn;
            DataColumn TotalValueColumn;
            DataColumn RevenueAcctColumn;
            DataColumn LineNumberColumn;
            DataColumn TaxLineColumn;
            DataColumn PositionTextColumn;
            DataColumn DeliveryDateColumn;
            DataColumn ConfirmeddeldateColumn;
            DataColumn RefColumn;
            DataColumn SeasonColumn;
            DataColumn OrderNumberColumn;
            DataColumn ArticleNumberColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            #endregion
            #region define column description
            dtC = new System.Data.DataTable();
            VoucherKeyCColumn = new DataColumn("VOUCHERKEY", Type.GetType("System.Int32"));
            FileTypeColumn = new DataColumn("FileType", Type.GetType("System.String"));
            ProductNumberColumn = new DataColumn("ProductNumber", Type.GetType("System.String"));
            QtyShippedColumn = new DataColumn("QtyShipped", Type.GetType("System.Int32"));
            DescriptionColumn = new DataColumn("Description", Type.GetType("System.String"));
            Ext1Column = new DataColumn("Ext1", Type.GetType("System.String"));
            Ext2Column = new DataColumn("Ext2", Type.GetType("System.String"));
            CostObjectiveColumn = new DataColumn("CostObjective", Type.GetType("System.String"));
            VendorProductNoColumn = new DataColumn("VendorProductNo", Type.GetType("System.String"));
            VendorProductDescColumn = new DataColumn("VendorProductDesc", Type.GetType("System.String"));
            PriceUnitColumn = new DataColumn("PriceUnit", Type.GetType("System.Double"));
            MainProductNoColumn = new DataColumn("MainProductNo", Type.GetType("System.String"));
            UMColumn = new DataColumn("UM", Type.GetType("System.String"));
            TotalValueColumn = new DataColumn("TotalValue", Type.GetType("System.Double"));
            RevenueAcctColumn = new DataColumn("RevenueAcct", Type.GetType("System.String"));
            LineNumberColumn = new DataColumn("LineNumber", Type.GetType("System.Int32"));
            TaxLineColumn = new DataColumn("TaxLine", Type.GetType("System.String"));
            PositionTextColumn = new DataColumn("PositionText", Type.GetType("System.String"));
            DeliveryDateColumn = new DataColumn("DeliveryDate", Type.GetType("System.String"));
            ConfirmeddeldateColumn = new DataColumn("Confirmeddeldate", Type.GetType("System.String"));

            RefColumn = new DataColumn("Ref", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            ArticleNumberColumn = new DataColumn("ArticleNumber", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));
            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));

            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));

            #endregion
            #region define function adding column into datatable
            dtC.Columns.Add(VoucherKeyCColumn);
            dtC.Columns.Add(FileTypeColumn);
            dtC.Columns.Add(ProductNumberColumn);
            dtC.Columns.Add(QtyShippedColumn);
            dtC.Columns.Add(DescriptionColumn);
            dtC.Columns.Add(Ext1Column);
            dtC.Columns.Add(Ext2Column);
            dtC.Columns.Add(CostObjectiveColumn);
            dtC.Columns.Add(VendorProductNoColumn);
            dtC.Columns.Add(VendorProductDescColumn);
            dtC.Columns.Add(PriceUnitColumn);
            dtC.Columns.Add(MainProductNoColumn);
            dtC.Columns.Add(UMColumn);

            dtC.Columns.Add(TotalValueColumn);
            dtC.Columns.Add(RevenueAcctColumn);
            dtC.Columns.Add(LineNumberColumn);
            dtC.Columns.Add(TaxLineColumn);
            dtC.Columns.Add(PositionTextColumn);
            dtC.Columns.Add(DeliveryDateColumn);
            dtC.Columns.Add(ConfirmeddeldateColumn);
            dtC.Columns.Add(RefColumn);
            dtC.Columns.Add(SeasonColumn);
            dtC.Columns.Add(OrderNumberColumn);
            dtC.Columns.Add(ArticleNumberColumn);
            dtC.Columns.Add(BuyerReqDateColumn);
            dtC.Columns.Add(CRDColumn);
            dtC.Columns.Add(LineCenterColumn);

            dtC.Columns.Add(SellerConfDeliDateColumn);
            dtC.Columns.Add(SellUpdaDeliDateColumn);
            dtC.Columns.Add(ConfDeliQtyColumn);
            dtC.Columns.Add(UpdaDeliQtyColumn);
            dtC.Columns.Add(SellerConfDeliDateLastColumn);
            dtC.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC.Columns.Add(ConfDeliQtyLastColumn);
            dtC.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region xu ly center
            for (int c = 0; c < dt_Group.Rows.Count; c++)
            {
                // tim` nhung line cua order number tuong ung' de set line number va` set product code


                DataRow[] dtRows;
                dtRows = chkLine.Checked == false ? dsC_Or.Tables[0].Select("OrderNumber = '" + dt_Group.Rows[c]["OrderNumber"].ToString() + "'") : dsC_Or.Tables[0].Select("", "", DataViewRowState.CurrentRows | DataViewRowState.Deleted);
                long totalqty = 0;
                totalqty = int.Parse(dsC_Or.Tables[0].AsEnumerable().Where(y => y.Field<string>("OrderNumber") == dt_Group.Rows[c]["OrderNumber"].ToString()).Sum(x => x.Field<int>("C006-QtyShip")).ToString());

                int line = 1;
                double totalValue = 0;
                if (dtRows.Length > 0)
                {
                    double SumValue = 0;
                    for (int o = 0; o < dtRows.Length; o++)
                    {
                        drC = dtC.NewRow();
                        //xu ly product color size truoc
                        int soline = 0;// so line = so size
                        int vtSize = 0;
                        string str_Size_Qty_Price = "";

                        System.Data.DataTable dttempSizeQtyPrice;
                        DataRow drtempSizeQtyPrice;

                        #region tao bang tam sizecode,qty,price
                        dttempSizeQtyPrice = new System.Data.DataTable();
                        DataColumn SizeCodetmpColumn;
                        DataColumn QtytmpColumn;
                        DataColumn PricetmpColumn;
                        SizeCodetmpColumn = new DataColumn("SizeCodetmp", Type.GetType("System.String"));
                        QtytmpColumn = new DataColumn("Qtytmp", Type.GetType("System.Int32"));
                        PricetmpColumn = new DataColumn("Pricetmp", Type.GetType("System.Double"));
                        dttempSizeQtyPrice.Columns.Add(SizeCodetmpColumn);
                        dttempSizeQtyPrice.Columns.Add(QtytmpColumn);
                        dttempSizeQtyPrice.Columns.Add(PricetmpColumn);
                        #endregion
                        drtempSizeQtyPrice = dttempSizeQtyPrice.NewRow();
                        #region xu ly main product (ko update total value)
                        if (o == 0)
                        {
                            DataSet ds_Product = new DataSet();
                            ds_Product = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString());
                            if (ds_Product.Tables[0].Rows.Count > 0)
                            {
                                drC["VOUCHERKEY"] = c + 1;
                                drC["FileType"] = "1";
                                drC["ProductNumber"] = ds_Product.Tables[0].Rows[0]["MainProductNo"].ToString();
                                drC["QtyShipped"] = totalqty;//dtRows[o]["C006-QtyShip"].ToString();
                                drC["Description"] = ds_Product.Tables[0].Rows[0]["ProductDescription"].ToString();
                                drC["Ext1"] = "";
                                drC["Ext2"] = "";
                                drC["CostObjective"] = ds_Product.Tables[0].Rows[0]["CostObj"].ToString();
                                drC["VendorProductNo"] = ds_Product.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                drC["VendorProductDesc"] = ds_Product.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                drC["PriceUnit"] = 0;
                                drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                drC["UM"] = ds_Product.Tables[0].Rows[0]["UMSale"].ToString();
                                //drC["TotalValue"] = totalValue;
                                drC["RevenueAcct"] = ds_Product.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                drC["LineNumber"] = 1;
                                drC["TaxLine"] = ds_Product.Tables[0].Rows[0]["TaxLine"].ToString();
                                drC["PositionText"] = "";
                                drC["DeliveryDate"] = "";
                                drC["Confirmeddeldate"] = "";
                                drC["Ref"] = "";// dtRows[o]["Ref"].ToString();
                                drC["Season"] = dtRows[o]["Season"].ToString();
                                drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                drC["CRD"] = dtRows[o]["CRD"].ToString();
                                drC["LineCenter"] = "";

                                dtC.Rows.Add(drC);
                            }
                        }
                        #endregion
                        #region lay data cho size-qty-price

                    DataSet ds_Size = new DataSet();
                    if (chkHel.Checked==true)
                    {
                        ds_Size = info.LoadSizeProductCodePriceSizeGAltHel(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString());
                    }
                    else
                    {
                        ds_Size = info.LoadSizeProductCodePriceSizeGAlt(dtRows[o]["MainProduct"].ToString(), dtRows[o]["ColorCode"].ToString(), dtRows[o]["SizeGroup"].ToString());
                    }
                    if (ds_Size.Tables[0].Rows.Count > 0)
                    {
                        DataSet ds_ProductColorSize = new DataSet();
                        ds_ProductColorSize = info.LoadCenterOCList(dtRows[o]["MainProduct"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString());
                        if (ds_ProductColorSize.Tables[0].Rows.Count > 0)
                        {
                                     string ProductNmber = "";
                                     ProductNmber = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                    DataRow[] dtRows_Old;
                                    dtRows_Old = dtC.Select("OrderNumber = '" + dtRows[o]["OrderNumber"].ToString() + "' and ProductNumber ='" + ProductNmber + "' and Ext1 = '" + dtRows[o]["ColorCode"].ToString() + "' and Ext2 ='" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString() + "'");
                                    if (dtRows_Old.Length > 0)
                                    {
                                        dtRows_Old[0]["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) + int.Parse(dtRows_Old[0]["QtyShipped"].ToString());
                                        dtRows_Old[0]["TotalValue"] = (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString())) + Double.Parse(dtRows_Old[0]["TotalValue"].ToString());
                                        SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                    }
                                    else
                                    {
                                        drC = dtC.NewRow();
                                        drC["VOUCHERKEY"] = c + 1;
                                        drC["FileType"] = "1";
                                        drC["ProductNumber"] = ds_ProductColorSize.Tables[0].Rows[0]["MainProductNo"].ToString() + "-" + dtRows[o]["ColorCode"].ToString() + "-" + ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["QtyShipped"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString());
                                        drC["Description"] = ds_ProductColorSize.Tables[0].Rows[0]["ProductDescription"].ToString();
                                        drC["Ext1"] = dtRows[o]["ColorCode"].ToString();
                                        drC["Ext2"] = ds_Size.Tables[0].Rows[0]["CodeSize"].ToString();
                                        drC["CostObjective"] = ds_ProductColorSize.Tables[0].Rows[0]["CostObj"].ToString();
                                        drC["VendorProductNo"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductNo"].ToString();
                                        drC["VendorProductDesc"] = ds_ProductColorSize.Tables[0].Rows[0]["VendorProductDesc"].ToString();
                                        drC["PriceUnit"] = double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        drC["MainProductNo"] = dtRows[o]["MainProduct"].ToString();
                                        drC["UM"] = ds_ProductColorSize.Tables[0].Rows[0]["UMSale"].ToString();
                                        drC["TotalValue"] = int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString());
                                        SumValue = SumValue + (int.Parse(dtRows[o]["C006-QtyShip"].ToString()) * Double.Parse(ds_Size.Tables[0].Rows[0]["PriceUnit"].ToString()));
                                        drC["RevenueAcct"] = ds_ProductColorSize.Tables[0].Rows[0]["RevenueAcct"].ToString();
                                        drC["LineNumber"] = line + 1;
                                        drC["TaxLine"] = ds_ProductColorSize.Tables[0].Rows[0]["TaxLine"].ToString();
                                        drC["PositionText"] = dtRows[o]["Ref"].ToString();
                                        drC["DeliveryDate"] = "";
                                        drC["Confirmeddeldate"] = "";
                                        drC["Ref"] = dtRows[o]["Ref"].ToString();
                                        drC["Season"] = dtRows[o]["Season"].ToString();
                                        drC["OrderNumber"] = dtRows[o]["OrderNumber"].ToString();
                                        drC["ArticleNumber"] = dtRows[o]["ArticleNumberAd"].ToString();
                                        drC["BuyerReqDate"] = dtRows[o]["BuyerReqDate"].ToString();
                                        drC["CRD"] = dtRows[o]["CRD"].ToString();

                                        drC["LineCenter"] = dtRows[o]["LineCenter"].ToString();
                                        drC["SellerConfDeliDate"] = "";
                                        drC["SellUpdaDeliDate"] = "";
                                        drC["ConfDeliQty"] = 0;
                                        drC["UpdaDeliQty"] = 0;
                                        drC["SellerConfDeliDateLast"] = "";
                                        drC["SellerUpdaDeliDateLast"] = "";
                                        drC["ConfDeliQtyLast"] = 0;
                                        drC["UpdaDeliQtyLast"] = 0;

                                        dtC.Rows.Add(drC);
                                        line++;
                                    }
                        }
                    }
                        #endregion
                    }
                    #region xu ly update totalvalue
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        if (dtC.Rows[k]["OrderNumber"].ToString() == dt_Group.Rows[c]["OrderNumber"].ToString() && dtC.Rows[k]["TotalValue"].ToString() == "")
                        {
                            dtC.Rows[k]["TotalValue"] = SumValue;
                            break;
                        }
                    }
                    #endregion
                }
            }

            dsC_Con.Tables.Add(dtC);

            #endregion
            #endregion
        }
        protected override void PerformSave()
        {
            if (MessageBox.Show("Would you like save data into file .mdb ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
            {
                splashScreenManager1.ShowWaitForm();
                Thread.Sleep(50);
                Savefilemdb();
                splashScreenManager1.CloseWaitForm();
                txtPathfilemdb.Text = "D:\\db.mdb"; //System.Windows.Forms.Application.StartupPath
            }
            base.PerformSave();
           
        }
        private void Savefilemdb()
        {
            try
            {
                insert_dataset(dsH_Con, "Table1", "H", "VOUCHERKEY,AccountNumber,SerialNo,InvoiceName,InvoiceStreet,InvoiceStreet2,InvoiceCity,CountryInvoiceAddress,FCdate,TextLine4,OrderNo,OrderConfirmationDate,TextLine3,TextLine5,DeliveryName,DeliveryStreet,DeliveryCity,CountryDeliveryAddress,VoucherType,OrderType,PriceList,TextLine1,TextLine2,AccountShippingAddress,FreeText1,FreeText3,Version,Purpose,T1SupplierName,T1AddressL1,T1AddressCountry,Contact_Buyer,ShipTo_T1FactoryName,T1AddressL1_ShipTo,T1AddressCountry_ShipTo,PaymentTerm,CountryofOrigin");//
                insert_dataset(dsC_Con, "Table1", "C", "VOUCHERKEY,FileType,ProductNumber,QuantityShipped,Description,Ext1,Ext2,CostObjective,VendorProductNo,VendorProductDesc,PriceUnit,MainProductNo,UM,TotalValue,RevenueAcct,LineNumber,TaxLine,PositionsText,DeliveryDate,Confirmeddeldate,Ref,Season,OrderNumber,Article,BuyerReqDate,CRD,LineCenter,SellerConfDeliDate,SellerUpdaDeliDate,ConfDeliQty,UpdaDeliQty,SellerConfDeliDateLast,SellerUpdaDeliDateLast,ConfDeliQtyLast,UpdaDeliQtyLast,UnitPriceAdidas,SizeGroup,MaterialColor,UOM,AdidasPlanDate,AdidasOrderNumber,AdditionalOpt1,AdditionalOpt2,AdditionalOpt3,AdditionalOpt4,AdditionalOpt5");
                MessageBox.Show("import data into mdb file successfully");
                //PerformCancel();
            }
            catch (Exception ex)
            {
                MessageBox.Show("error system! please contact to IT team.");
            }
        }
        public void insert_dataset(DataSet ds, string ret_table, string table, string fileds)
        {
            ArrayList arr_rec = new ArrayList();

            string[] str_fields = fileds.Split(',');

            for (int i = 0; i < ds.Tables[ret_table].Rows.Count; i++)
            {
                for (int j = 0; j < str_fields.Length; j++)
                {
                    arr_rec.Add(ds.Tables[ret_table].Rows[i].ItemArray[j]);
                }

                insert_table(table, fileds, arr_rec);

                arr_rec.Clear();
            }


        }
        public void insert_table(string table, string fileds, ArrayList arr_data)
        {
            string str_command, str_params;

            string[] str_fields = fileds.Split(',');

            for (int i = 0; i < str_fields.Length; i++)
            {
                str_fields[i] = "@" + str_fields[i].Trim();
            }

            str_params = string.Join(",", str_fields);

            str_command = "INSERT INTO " + table + "(" + fileds + ") values(" + str_params + ")";

            OleDbConnection con = new OleDbConnection();
            //for sql
            //con=new SqlConnection();

            con.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\db.mdb;Persist Security Info=True"; //" + System.Windows.Forms.Application.StartupPath + 
            //for sql
            //con.ConnectionString="server=(local);trusted_connection=yes;database=telephon;";

            OleDbCommand cmd = con.CreateCommand();
            //for sql
            //cmd=new SqlCommand();
            cmd.Connection = con;

            con.Open();

            cmd.CommandText = str_command;

            // cmd.Parameters.AddWithValue("@ACagname", "2");
            for (int i = 0; i < arr_data.Count; i++)
            {
                if (str_fields[i] == "@FCdate" || str_fields[i] == "@OrderConfirmationDate" || str_fields[i] == "@DeliveryDate" || str_fields[i] == "@Confirmeddeldate"
                    || str_fields[i] == "@BuyerReqDate" || str_fields[i] == "@CRD" || str_fields[i] == "@SellerConfDeliDate" || str_fields[i] == "@SellerUpdaDeliDate"
                    || str_fields[i] == "@SellerConfDeliDateLast" || str_fields[i] == "@SellerUpdaDeliDateLast" || str_fields[i] == "@AdidasPlanDate")
                {
                   // cmd.Parameters.Add(Convert.ToString(str_fields[i]), SqlDbType.NVarChar).Value = arr_data[i];
                    if ( arr_data[i].ToString()=="")
                    {
                        cmd.Parameters.Add(Convert.ToString(str_fields[i]), SqlDbType.DateTime).Value = DBNull.Value;
                    }
                    else
                    {
                        cmd.Parameters.Add(Convert.ToString(str_fields[i]), SqlDbType.DateTime).Value = DateTime.Parse(arr_data[i].ToString());
                    }
                }
                else
                {
                    cmd.Parameters.AddWithValue(str_fields[i], arr_data[i]);
                }
             //   
            }

            cmd.ExecuteNonQuery();
            con.Close();

        }
        protected override void PerformPrint()
        {
            try
            {
                #region del H
                using (var myConnection = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\db.mdb;Persist Security Info=True")) //" + System.Windows.Forms.Application.StartupPath + "
                using (var myCommand = myConnection.CreateCommand())
                {

                    myCommand.CommandText = "DELETE FROM [H]";

                    myConnection.Open();
                    myCommand.ExecuteNonQuery();
                }
                #endregion
                #region del C
                using (var myConnection = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\db.mdb;Persist Security Info=True")) //" + System.Windows.Forms.Application.StartupPath + "
                using (var myCommand = myConnection.CreateCommand())
                {

                    myCommand.CommandText = "DELETE FROM [C]";

                    myConnection.Open();
                    myCommand.ExecuteNonQuery();
                }
                #endregion
                MessageBox.Show("Clear data of mdb file successfully ");
            }
            catch (Exception ex)
            {
                MessageBox.Show("error system when clear data on db.mdb! please contact to IT team.");
                throw;
            }

            base.PerformPrint();
        }
        protected override void PerformAdd()
        {
            if (chkNewB.Checked == true)
            {
                AddFileNB();
                if (txtSheetName.Text != "" && txtSheetNameNB.Text != "")
                {
                    if (MessageBox.Show("Would you like to transfer data from PO adidas to COC ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                    {
                        AddFileAdidas();
                    }
                }
            }
            else
            {
                AddFileAdidas();
            }
            base.PerformAdd();

        }
        private void AddFileNB()
        {
            if (txtSheetName.Text == "" || txtSheetNameNB.Text == "")
            {
                MessageBox.Show("Please entry sheet name excel !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
            }
            else
            {
                try
                {

                    #region get openFileDialog for File Adidas
                    OpenFileDialog openFileDialog1 = new OpenFileDialog();

                    openFileDialog1.InitialDirectory = @"C:\";

                    openFileDialog1.Title = "Browse Excel PO Adidas tempalte Files";

                    openFileDialog1.CheckFileExists = true;

                    openFileDialog1.CheckPathExists = true;

                    openFileDialog1.DefaultExt = "xls";

                    openFileDialog1.Filter = "Excel 2003 files (*.xls)|*.xls";

                    openFileDialog1.FilterIndex = 2;

                    openFileDialog1.RestoreDirectory = true;

                    openFileDialog1.ReadOnlyChecked = true;

                    openFileDialog1.ShowReadOnly = true;

                    if (openFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        txtPathFile.Text = openFileDialog1.FileName;
                    }
                    else
                    {
                        return;
                    }
                    #endregion
                    #region get openFileDialog for New Balance
                    OpenFileDialog openFileDialog2 = new OpenFileDialog();

                    openFileDialog2.InitialDirectory = @"C:\";

                    openFileDialog2.Title = "Browse Excel PO New Balance tempalte Files";

                    openFileDialog2.CheckFileExists = true;

                    openFileDialog2.CheckPathExists = true;

                    openFileDialog2.DefaultExt = "xlsm";

                    openFileDialog2.Filter = "Excel Macro Template files (*.xls)|*.xls";

                    openFileDialog2.FilterIndex = 2;

                    openFileDialog2.RestoreDirectory = true;

                    openFileDialog2.ReadOnlyChecked = true;

                    openFileDialog2.ShowReadOnly = true;

                    if (openFileDialog2.ShowDialog() == DialogResult.OK)
                    {
                        txtPathFileNB.Text = openFileDialog2.FileName;
                    }
                    else
                    {
                        return;
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    return;
                }
                //System.Data.DataTable dtOr_All_Adidas = new System.Data.DataTable();
                System.Data.DataTable dtOr_All_NB = new System.Data.DataTable();

                //dtOr_All_Adidas = GetDataTabletFromCSVFile(txtPathFile.Text, ".xls", "Yes", txtSheetName.Text);
                dtOr_All_NB = GetDataTabletFromCSVFile(txtPathFileNB.Text, ".xlsm", "Yes", txtSheetNameNB.Text);
                MoveDataintNB(dtOr_All_NB);

                #region dog tam
                //// PO Download New 
                //if (rdVerticalDL.Checked == true)
                //{
                //    this.TransferData_OrPODowloadVertical(dtOr_All);
                //}
                //else if (rdHorizontalDL.Checked == true)
                //{
                //    this.TransferData_OrPODowloadHorizontal(dtOr_All);
                //}
                //else if (rdGroupSizeDL.Checked == true)
                //{
                //    TransferData_OrPODowloadGroupSizeDL(dtOr_All);
                //}
                //// backgroundWorker1.WorkerReportsProgress = true;
                //// backgroundWorker1.RunWorkerAsync();
                //this.GetdataforGrv_Or();
                //#region grv Header
                //clsHam.CreateGrid(dsH_Or.Tables[0], grvH_Ori);
                //clsHam.SetDataSourceGrid(grdH_Ori, dsH_Or);

                //grvH_Ori.BestFitColumns();
                //grvH_Ori.OptionsSelection.MultiSelect = true;
                //grvH_Ori.OptionsSelection.MultiSelectMode = GridMultiSelectMode.CellSelect;
                //grvH_Ori.OptionsBehavior.CopyToClipboardWithColumnHeaders = false;

                //#endregion
                //#region grv Center
                //clsHam.CreateGrid(dsC_Or.Tables[0], grvC_Ori);
                //clsHam.SetDataSourceGrid(grdC_Ori, dsC_Or);

                //grvC_Ori.BestFitColumns();
                //#endregion
                #endregion
            }

        }
        private void MoveDataintNB(System.Data.DataTable dtOr_All)
        {

            // get data into dttemp
            #region define table teporary
            //System.Data.DataTable dt;
            //DataRow dr;
            //DataColumn OrderNumberColumn;
            //DataColumn VersionColumn;
            //DataColumn LineCenterColumn;
            //DataColumn RowNoColumn;
            //dt = new System.Data.DataTable();
            //OrderNumberColumn = new DataColumn("OrderNumberH", Type.GetType("System.String"));
            //VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            //LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            //RowNoColumn = new DataColumn("RowNo", Type.GetType("System.Int32"));

            //dt.Columns.Add(OrderNumberColumn);
            //dt.Columns.Add(VersionColumn);
            //dt.Columns.Add(LineCenterColumn);
            //dt.Columns.Add(RowNoColumn);
            ////--------------------------------------------------
            //DataRow drE; System.Data.DataTable dtE;
            //DataColumn OrderNumberHColumn;
            //DataColumn VersionHColumn;
            //DataColumn ETDColumn;
            //dtE = new System.Data.DataTable();
            //OrderNumberHColumn = new DataColumn("OrderNumberH", Type.GetType("System.String"));
            //VersionHColumn = new DataColumn("VersionH", Type.GetType("System.String"));
            //ETDColumn = new DataColumn("ETD", Type.GetType("System.DateTime"));

            //dtE.Columns.Add(OrderNumberHColumn);
            //dtE.Columns.Add(VersionHColumn);
            //dtE.Columns.Add(ETDColumn);

            #endregion
            //dr = dt.NewRow();

            //dr["Version"] = dtOr_All.Rows[9][9].ToString();
            //dr["OrderNumberH"] = dtOr_All.Rows[7][9].ToString();
            #region get Ordernumber , version, line , row
            //for (int i = 0; i < dtOr_All.Rows.Count; i++)
            //{

            //    if (dtOr_All.Rows[i][52].ToString().Trim() == "Description / Supplier Material Name")//[4]
            //    {
            //        f_point = i;
            //    }
            //    else if (dtOr_All.Columns[52].Caption.Trim() == "Description / Supplier Material Name" && i == 0)
            //    {
            //        f_point = i;
            //    }
            //    if (i > f_point && f_point > -1)
            //    {
            //        if (dtOr_All.Rows[i][52].ToString() == "")
            //        {
            //            break;
            //        }

            //        dr = dt.NewRow();
            //        dr["Version"] = dtOr_All.Rows[i][3].ToString();//[9][9]
            //        dr["OrderNumberH"] = dtOr_All.Rows[i][1].ToString();//[7][9]
            //        dr["LineCenter"] = dtOr_All.Rows[i][50].ToString();
            //        dr["RowNo"] = i;
            //        dt.Rows.Add(dr);
            //    }
            //}
            #endregion
            #region set data into excel
            try
            {
                #region define Excel setting
                string Filepath = txtPathFile.Text;
                string SheetName = "";
                if (txtSheetName.Text == "")
                {
                    MessageBox.Show("Please entry sheet name excel !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                    return;
                }
                else
                {
                    SheetName = txtSheetName.Text;
                }
                // Microsoft.Office.Interop.Excel.Application xlApp;
                Microsoft.Office.Interop.Excel.Workbook xlWorkBook;
                Microsoft.Office.Interop.Excel._Worksheet xlWorkSheet;
                // Microsoft.Office.Interop.Excel.Range xlRange = null;
                object misValue = Type.Missing;

                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                xlWorkBook = xlApp.Workbooks.Add(Filepath);

                // xlWorkBook = xlApp.Workbooks.Open(Filepath, misValue, false, misValue, misValue, misValue, true, misValue, misValue, misValue, misValue, misValue, false, misValue, misValue);
                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets[SheetName];

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.ActiveSheet;

                xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Sheets.get_Item(SheetName);
                xlWorkSheet.Activate();
                #endregion

                
                //int percents = (e * 100) / dt_Group.Rows.Count;
                //progressBar2.Value = percents;

                if (dtOr_All.Rows.Count > 0)
                {
                    //progressBar2.Minimum = 0;
                    //progressBar2.Value = 0;
                    //progressBar2.Maximum = 100;
                    splashScreenManager1.ShowWaitForm();
                    for (int i = 0; i < dtOr_All.Rows.Count; i++)
                    {
                        xlApp.Cells[i + 4,1] = dtpIssueDateNB.Value; // issue date
                        xlApp.Cells[i + 4,2] = dtOr_All.Rows[i][0].ToString(); // order number
                        xlApp.Cells[i + 4,27] = dtOr_All.Rows[i][1].ToString(); // T1 code 6 digit
                        xlApp.Cells[i + 4,53] = dtOr_All.Rows[i][6].ToString(); // T1 Material Description 
                        xlApp.Cells[i + 4,64] = dtOr_All.Rows[i][31].ToString(); //Size
                        xlApp.Cells[i + 4,65] = dtOr_All.Rows[i][30].ToString(); //Size Range
                        xlApp.Cells[i + 4,66] = dtOr_All.Rows[i][26].ToString(); //Color Code
                        xlApp.Cells[i + 4,68] = dtOr_All.Rows[i][8].ToString(); //Quantity
                        xlApp.Cells[i + 4,71] = dtOr_All.Rows[i][3].ToString(); //Mold
                        xlApp.Cells[i + 4, 73] = dtOr_All.Rows[i][13].ToString(); //X factory = Buyer Request Date
                        xlApp.Cells[i + 4, 74] = dtOr_All.Rows[i][15].ToString(); //FGPO x-factory = Adidas Plan Date
                        xlApp.Cells[i + 4, 76] = dtOr_All.Rows[i][23].ToString(); //Actual ETD = Seller Confirm Delivery
                        xlApp.Cells[i + 4, 85] = dtOr_All.Rows[i][14].ToString(); //Related Style No  = Adidas Article Number 
                        xlApp.Cells[i + 4, 87] = dtOr_All.Rows[i][14].ToString(); //Related Style No  = Season
                        xlApp.Cells[i + 4, 162] = dtOr_All.Rows[i][14].ToString(); //Related Style No  = Additional Optional 4
                        xlApp.Cells[i + 4, 163] = dtOr_All.Rows[i][6].ToString(); //Related Style No  = Additional Optional 5

                        //int percents = (i * 100) / dtOr_All.Rows.Count;
                        //progressBar2.Value = percents;
                        #region bo 
                        //if (dt.Rows[0]["LineCenter"].ToString().Trim() != "")
                        //{
                        // dsETD = info.ExportETDTemplateAdidas(dt.Rows[0]["OrderNumberH"].ToString(), dt.Rows[0]["Version"].ToString(), lke_FsYearCode.EditValue.ToString());
                        //DataRow[] foundRows;
                        //if (dtE.Rows.Count > 0)
                        //{
                        //    foundRows = dtE.Select("OrderNumberH = '" + dt.Rows[i]["OrderNumberH"].ToString().Trim() + "'");
                        //    if (foundRows.Length > 0)
                        //    {
                        //        for (int f = 0; f < foundRows.Length; f++)
                        //        {
                        //            //SetDataintoExcel(txtExpFile.Text, long.Parse(dt.Rows[i]["RowNo"].ToString()), foundRows[f]["SellerConfDeliDate"].ToString(), foundRows[f]["SellerUpdaDeliDate"].ToString(),
                        //            //    foundRows[f]["ConfDeliQty"].ToString(), foundRows[f]["UpdaDeliQty"].ToString(),
                        //            //    foundRows[f]["SellerConfDeliDateLast"].ToString(), foundRows[f]["SellerUpdaDeliDateLast"].ToString(),
                        //            //    foundRows[f]["ConfDeliQtyLast"].ToString(), foundRows[f]["UpdaDeliQtyLast"].ToString());
                        //            DateTime da_date = new DateTime();
                        //            string daStr = "";
                        //            try
                        //            {
                        //                da_date = Convert.ToDateTime(foundRows[f]["ETD"].ToString());
                        //                daStr = da_date.ToString("yyyy-MM-dd");
                        //            }
                        //            catch
                        //            {
                        //                return;
                        //            }
                        //            xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 75 + 1] = daStr;
                        //            if (daStr != "")
                        //            {
                        //                if (dsDT.Tables[0].Rows.Count > 0)
                        //                {
                        //                    xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 2 + 1] = dsDT.Tables[0].Rows[0][0].ToString();
                        //                }
                        //            }
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 26 + 1] = foundRows[f]["SellerUpdaDeliDate"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 27 + 1] = foundRows[f]["ConfDeliQty"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 28 + 1] = foundRows[f]["UpdaDeliQty"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 29 + 1] = foundRows[f]["SellerConfDeliDateLast"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 30 + 1] = foundRows[f]["SellerUpdaDeliDateLast"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 31 + 1] = foundRows[f]["ConfDeliQtyLast"].ToString();
                        //            //xlApp.Cells[long.Parse(dt.Rows[i]["RowNo"].ToString()) + 2, 32 + 1] = foundRows[f]["UpdaDeliQtyLast"].ToString();
                        //        }
                        //    }
                        //}
                        //}
                        #endregion
                    }
                    splashScreenManager1.CloseWaitForm();
                }
                if (Filepath != null || Filepath != "")
                {
                    try
                    {
                        xlApp.ActiveWorkbook.SaveAs(Filepath);
                        xlApp.Quit();

                        xlWorkSheet = null;
                        xlWorkBook = null;
                        xlApp = null;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Can not save file [" + ex.Message + "]");
                    }
                }
                else
                {
                    xlApp.Visible = true;
                }
                MessageBox.Show("Fill data into PO Adidas template successfully!");
                progressBar2.Value = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            #endregion
        }
        private void AddFileAdidas()
        {
         
            System.Data.DataTable dtOr_All = new System.Data.DataTable();
            if (txtSheetName.Text == "")
            {
                MessageBox.Show("Please entry sheet name excel !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
                return;
            }
            else
            {
                if (txtPathFile.Text=="")
                {
                    try
                    {
                        #region get openFileDialog
                        OpenFileDialog openFileDialog1 = new OpenFileDialog();

                        openFileDialog1.InitialDirectory = @"C:\";

                        openFileDialog1.Title = "Browse Excel tempalte Files";

                        openFileDialog1.CheckFileExists = true;

                        openFileDialog1.CheckPathExists = true;

                        openFileDialog1.DefaultExt = "xls";

                        openFileDialog1.Filter = "Excel 2003 files (*.xls)|*.xls";

                        openFileDialog1.FilterIndex = 2;

                        openFileDialog1.RestoreDirectory = true;

                        openFileDialog1.ReadOnlyChecked = true;

                        openFileDialog1.ShowReadOnly = true;

                        if (openFileDialog1.ShowDialog() == DialogResult.OK)
                        {
                            txtPathFile.Text = openFileDialog1.FileName;
                        }
                        else
                        {
                            return;
                        }
                        #endregion
                    }
                    catch (Exception ex)
                    {
                        return;
                    }
                }
               
                dtOr_All = GetDataTabletFromCSVFile(txtPathFile.Text, ".xls", "Yes", txtSheetName.Text);
            }
            // PO Download New 
            if (rdVerticalDL.Checked == true)
            {
                this.TransferData_OrPODowloadVertical(dtOr_All);
            }
            else if (rdHorizontalDL.Checked == true)
            {
                this.TransferData_OrPODowloadHorizontal(dtOr_All);
            }
            else if (rdGroupSizeDL.Checked == true)
            {
                TransferData_OrPODowloadGroupSizeDL(dtOr_All);
            }
            // backgroundWorker1.WorkerReportsProgress = true;
            // backgroundWorker1.RunWorkerAsync();
            this.GetdataforGrv_Or();
            #region grv Header
            clsHam.CreateGrid(dsH_Or.Tables[0], grvH_Ori);
            clsHam.SetDataSourceGrid(grdH_Ori, dsH_Or);

            //string StrColE = "BoMID,ItemNo,ItemName,ColorNo,ColorName,ItemColorID_H,Type,CreatedDate,CreatedUser";
            //clsHam.SetStrColEditable(grv_BoMH, false, StrColE);
            //string StrColVis = "BoMID,ColorNo,ItemColorID_H";
            //clsHam.SetStrColVisible(grv_BoMH, false, StrColVis);
            grvH_Ori.BestFitColumns();
            grvH_Ori.OptionsSelection.MultiSelect = true;
            grvH_Ori.OptionsSelection.MultiSelectMode = GridMultiSelectMode.CellSelect;
            grvH_Ori.OptionsBehavior.CopyToClipboardWithColumnHeaders = false;

            #endregion
            #region grv Center
            clsHam.CreateGrid(dsC_Or.Tables[0], grvC_Ori);
            clsHam.SetDataSourceGrid(grdC_Ori, dsC_Or);

            //string StrColE = "BoMID,ItemNo,ItemName,ColorNo,ColorName,ItemColorID_H,Type,CreatedDate,CreatedUser";
            //clsHam.SetStrColEditable(grv_BoMH, false, StrColE);
            //string StrColVis = "BoMID,ColorNo,ItemColorID_H";
            //clsHam.SetStrColVisible(grv_BoMH, false, StrColVis);
            grvC_Ori.BestFitColumns();
            #endregion

        }
        private void TransferData_OrPODowloadHorizontal(System.Data.DataTable dtOr_All)
        {
            #region data header
            #region define
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            //DataColumn PaymentTermColumn;
            //DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;

            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            //PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));

            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            //dt.Columns.Add(PaymentTermColumn);
            //dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);
            dt.Columns.Add(T1SupplierNameColumn);
            dt.Columns.Add(T1AddressL1Column);
            dt.Columns.Add(T1AddressCountryColumn);
            dt.Columns.Add(Contact_BuyerColumn);
            dt.Columns.Add(ShipTo_T1FactoryNameColumn);
            dt.Columns.Add(T1AddressL1_ShipToColumn);
            dt.Columns.Add(T1AddressCountry_ShipToColumn);
            dt.Columns.Add(PaymentTermTextColumn);
            dt.Columns.Add(CountryofOriginColumn);

            #endregion
            #region get data area
            int vitri = 0;
            // get data account 
            for (int y = 2; y < dtOr_All.Rows.Count; y++) //0
            {
                //if (dtOr_All.Rows[y][1].ToString().Trim() == "Order Number:")
                //{
                //    vitri = y;

                //}
                //if (y > vitri)
                //{
                    if (dtOr_All.Rows[y][1].ToString() != "") // Order Number[PO header]
                    {
                        dr = dt.NewRow();
                        // set data 
                        if (dtOr_All.Rows[y][26].ToString() != "") //156.Buyer Account---> 25.T1 Code 
                        {
                            DataSet ds1 = new DataSet();
                            DataSet ds2 = new DataSet();
                            ds1 = info.LoadAccountByNumberV5(dtOr_All.Rows[y][26].ToString(),lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                                dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                                if (ds1.Tables[0].Rows[0]["AccShipTo"].ToString()!="")
                                {
                                    ds2 = info.LoadDeliveryNumberV5(ds1.Tables[0].Rows[0]["AccShipTo"].ToString(),lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                                    if (ds2.Tables[0].Rows.Count > 0)
                                    {
                                        dr["AccountShip"] = ds2.Tables[0].Rows[0]["AccNo"].ToString();
                                        dr["C010-ShipName"] = ds2.Tables[0].Rows[0]["DeliveryName"].ToString();
                                    }
                                    else
                                    {
                                        dr["AccountShip"] = "";
                                        dr["C010-ShipName"] = "";
                                    }
                                }
                            }
                            else
                            {
                                dr["C021_AccountNumber"] = "";
                                dr["C024_InvoiceName"] = "";
                            }
                        }
                        #region cancel
                        //if (dtOr_All.Rows[y][157].ToString() != "")
                        //{
                        //    DataSet ds1 = new DataSet();
                        //    ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[y][157].ToString());
                        //    if (ds1.Tables[0].Rows.Count > 0)
                        //    {
                        //        dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                        //        dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                        //    }
                        //    else
                        //    {
                        //        dr["AccountShip"] = "";
                        //        dr["C010-ShipName"] = "";
                        //    }
                        //}
                        #endregion
                        dr["InvoiceNameText"] = dtOr_All.Rows[y][5].ToString();//[6][3]
                        dr["ShipNameText"] = dtOr_All.Rows[y][17].ToString();//[20][3]
                        dr["C066-OrderDate"] = dtOr_All.Rows[y][0].ToString();//[6][9]  DateTime.FromOADate(int.Parse())
                        dr["C065-PONo"] = dtOr_All.Rows[y][1].ToString();//[7][9]
                        dr["C067-OrderBy"] = dtOr_All.Rows[y][14].ToString();
                        dr["Inconterm"] = "";
                        dr["IncontermText"] = dtOr_All.Rows[y][42].ToString();//[33][6]
                        dr["ShipBy"] = "";
                        dr["ShipByText"] = dtOr_All.Rows[y][43].ToString();//[33][7]
                        //dr["C051-TermofPayment"] = "";
                        //dr["C037-NetDays"] = 0;
                        dr["Version"] = dtOr_All.Rows[y][3].ToString();//[9][9]
                        dr["Purpose"] = dtOr_All.Rows[y][4].ToString();//[10][9]
                        dr["T1SupplierName"] = dtOr_All.Rows[y][5].ToString();
                        dr["T1AddressL1"] = dtOr_All.Rows[y][6].ToString();
                        dr["T1AddressCountry"] = dtOr_All.Rows[y][13].ToString();
                        dr["Contact_Buyer"] = dtOr_All.Rows[y][14].ToString();
                        dr["ShipTo_T1FactoryName"] = dtOr_All.Rows[y][17].ToString();
                        dr["T1AddressL1_ShipTo"] = dtOr_All.Rows[y][18].ToString();
                        dr["T1AddressCountry_ShipTo"] = dtOr_All.Rows[y][25].ToString();
                        dr["PaymentTerm"] = dtOr_All.Rows[y][41].ToString();
                        dr["CountryofOrigin"] = dtOr_All.Rows[y][44].ToString();

                        dt.Rows.Add(dr);
                    }
                //}
            }
            dsH_Or.Tables.Add(dt);
            #endregion
            //------------------------------------------------
            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;
            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn SizeGroupColumn;
            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;
            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;
            #endregion
            #region size range
            DataColumn SizeK1Column;
            DataColumn SizeK1_5Column;
            DataColumn SizeK2Column;
            DataColumn SizeK2_5Column;
            DataColumn SizeK3Column;
            DataColumn SizeK3_5Column;
            DataColumn SizeK4Column;
            DataColumn SizeK4_5Column;
            DataColumn SizeK5Column;
            DataColumn SizeK5_5Column;
            DataColumn SizeK6Column;
            DataColumn SizeK6_5Column;
            DataColumn SizeK7Column;
            DataColumn SizeK7_5Column;
            DataColumn SizeK8Column;
            DataColumn SizeK8_5Column;
            DataColumn SizeK9Column;
            DataColumn SizeK9_5Column;
            DataColumn SizeK10Column;
            DataColumn SizeK10_5Column;
            DataColumn SizeK11Column;
            DataColumn SizeK11_5Column;
            DataColumn SizeK12Column;
            DataColumn SizeK12_5Column;
            DataColumn SizeK13Column;
            DataColumn SizeK13_5Column;
            DataColumn SizeUK1Column;
            DataColumn SizeUK1_5Column;
            DataColumn SizeUK2Column;
            DataColumn SizeUK2_5Column;
            DataColumn SizeUK3Column;
            DataColumn SizeUK3_5Column;
            DataColumn SizeUK4Column;
            DataColumn SizeUK4_5Column;
            DataColumn SizeUK5Column;
            DataColumn SizeUK5_5Column;
            DataColumn SizeUK6Column;
            DataColumn SizeUK6_5Column;
            DataColumn SizeUK7Column;
            DataColumn SizeUK7_5Column;
            DataColumn SizeUK8Column;
            DataColumn SizeUK8_5Column;
            DataColumn SizeUK9Column;
            DataColumn SizeUK9_5Column;
            DataColumn SizeUK10Column;
            DataColumn SizeUK10_5Column;
            DataColumn SizeUK11Column;
            DataColumn SizeUK11_5Column;
            DataColumn SizeUK12Column;
            DataColumn SizeUK12_5Column;
            DataColumn SizeUK13Column;
            DataColumn SizeUK13_5Column;
            DataColumn SizeUK14Column;
            DataColumn SizeUK14_5Column;
            DataColumn SizeUK15Column;
            DataColumn SizeUK15_5Column;
            DataColumn SizeUK16Column;
            DataColumn SizeUK16_5Column;
            DataColumn SizeUK17Column;
            DataColumn SizeUK17_5Column;
            DataColumn SizeUK18Column;
            DataColumn SizeUK18_5Column;
            DataColumn SizeUK19Column;
            DataColumn SizeUK19_5Column;
            DataColumn SizeUK20Column;
            DataColumn SizeUK20_5Column;
            DataColumn SizeUK21Column;
            DataColumn SizeUK21_5Column;
            DataColumn SizeUK22Column;

            #endregion
            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));
            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));
            #endregion
            #region Size range type define
            SizeK1Column = new DataColumn("SizeK1", Type.GetType("System.Int32"));
            SizeK1_5Column = new DataColumn("SizeK1_5", Type.GetType("System.Int32"));
            SizeK2Column = new DataColumn("SizeK2", Type.GetType("System.Int32"));
            SizeK2_5Column = new DataColumn("SizeK2_5", Type.GetType("System.Int32"));
            SizeK3Column = new DataColumn("SizeK3", Type.GetType("System.Int32"));
            SizeK3_5Column = new DataColumn("SizeK3_5", Type.GetType("System.Int32"));
            SizeK4Column = new DataColumn("SizeK4", Type.GetType("System.Int32"));
            SizeK4_5Column = new DataColumn("SizeK4_5", Type.GetType("System.Int32"));
            SizeK5Column = new DataColumn("SizeK5", Type.GetType("System.Int32"));
            SizeK5_5Column = new DataColumn("SizeK5_5", Type.GetType("System.Int32"));
            SizeK6Column = new DataColumn("SizeK6", Type.GetType("System.Int32"));
            SizeK6_5Column = new DataColumn("SizeK6_5", Type.GetType("System.Int32"));
            SizeK7Column = new DataColumn("SizeK7", Type.GetType("System.Int32"));
            SizeK7_5Column = new DataColumn("SizeK7_5", Type.GetType("System.Int32"));
            SizeK8Column = new DataColumn("SizeK8", Type.GetType("System.Int32"));
            SizeK8_5Column = new DataColumn("SizeK8_5", Type.GetType("System.Int32"));
            SizeK9Column = new DataColumn("SizeK9", Type.GetType("System.Int32"));
            SizeK9_5Column = new DataColumn("SizeK9_5", Type.GetType("System.Int32"));
            SizeK10Column = new DataColumn("SizeK10", Type.GetType("System.Int32"));
            SizeK10_5Column = new DataColumn("SizeK10_5", Type.GetType("System.Int32"));
            SizeK11Column = new DataColumn("SizeK11", Type.GetType("System.Int32"));
            SizeK11_5Column = new DataColumn("SizeK11_5", Type.GetType("System.Int32"));
            SizeK12Column = new DataColumn("SizeK12", Type.GetType("System.Int32"));
            SizeK12_5Column = new DataColumn("SizeK12_5", Type.GetType("System.Int32"));
            SizeK13Column = new DataColumn("SizeK13", Type.GetType("System.Int32"));
            SizeK13_5Column = new DataColumn("SizeK13_5", Type.GetType("System.Int32"));
            SizeUK1Column = new DataColumn("SizeUK1", Type.GetType("System.Int32"));
            SizeUK1_5Column = new DataColumn("SizeUK1_5", Type.GetType("System.Int32"));
            SizeUK2Column = new DataColumn("SizeUK2", Type.GetType("System.Int32"));
            SizeUK2_5Column = new DataColumn("SizeUK2_5", Type.GetType("System.Int32"));
            SizeUK3Column = new DataColumn("SizeUK3", Type.GetType("System.Int32"));
            SizeUK3_5Column = new DataColumn("SizeUK3_5", Type.GetType("System.Int32"));
            SizeUK4Column = new DataColumn("SizeUK4", Type.GetType("System.Int32"));
            SizeUK4_5Column = new DataColumn("SizeUK4_5", Type.GetType("System.Int32"));
            SizeUK5Column = new DataColumn("SizeUK5", Type.GetType("System.Int32"));
            SizeUK5_5Column = new DataColumn("SizeUK5_5", Type.GetType("System.Int32"));
            SizeUK6Column = new DataColumn("SizeUK6", Type.GetType("System.Int32"));
            SizeUK6_5Column = new DataColumn("SizeUK6_5", Type.GetType("System.Int32"));
            SizeUK7Column = new DataColumn("SizeUK7", Type.GetType("System.Int32"));
            SizeUK7_5Column = new DataColumn("SizeUK7_5", Type.GetType("System.Int32"));
            SizeUK8Column = new DataColumn("SizeUK8", Type.GetType("System.Int32"));
            SizeUK8_5Column = new DataColumn("SizeUK8_5", Type.GetType("System.Int32"));
            SizeUK9Column = new DataColumn("SizeUK9", Type.GetType("System.Int32"));
            SizeUK9_5Column = new DataColumn("SizeUK9_5", Type.GetType("System.Int32"));
            SizeUK10Column = new DataColumn("SizeUK10", Type.GetType("System.Int32"));
            SizeUK10_5Column = new DataColumn("SizeUK10_5", Type.GetType("System.Int32"));
            SizeUK11Column = new DataColumn("SizeUK11", Type.GetType("System.Int32"));
            SizeUK11_5Column = new DataColumn("SizeUK11_5", Type.GetType("System.Int32"));
            SizeUK12Column = new DataColumn("SizeUK12", Type.GetType("System.Int32"));
            SizeUK12_5Column = new DataColumn("SizeUK12_5", Type.GetType("System.Int32"));
            SizeUK13Column = new DataColumn("SizeUK13", Type.GetType("System.Int32"));
            SizeUK13_5Column = new DataColumn("SizeUK13_5", Type.GetType("System.Int32"));
            SizeUK14Column = new DataColumn("SizeUK14", Type.GetType("System.Int32"));
            SizeUK14_5Column = new DataColumn("SizeUK14_5", Type.GetType("System.Int32"));
            SizeUK15Column = new DataColumn("SizeUK15", Type.GetType("System.Int32"));
            SizeUK15_5Column = new DataColumn("SizeUK15_5", Type.GetType("System.Int32"));
            SizeUK16Column = new DataColumn("SizeUK16", Type.GetType("System.Int32"));
            SizeUK16_5Column = new DataColumn("SizeUK16_5", Type.GetType("System.Int32"));
            SizeUK17Column = new DataColumn("SizeUK17", Type.GetType("System.Int32"));
            SizeUK17_5Column = new DataColumn("SizeUK17_5", Type.GetType("System.Int32"));
            SizeUK18Column = new DataColumn("SizeUK18", Type.GetType("System.Int32"));
            SizeUK18_5Column = new DataColumn("SizeUK18_5", Type.GetType("System.Int32"));
            SizeUK19Column = new DataColumn("SizeUK19", Type.GetType("System.Int32"));
            SizeUK19_5Column = new DataColumn("SizeUK19_5", Type.GetType("System.Int32"));
            SizeUK20Column = new DataColumn("SizeUK20", Type.GetType("System.Int32"));
            SizeUK20_5Column = new DataColumn("SizeUK20_5", Type.GetType("System.Int32"));
            SizeUK21Column = new DataColumn("SizeUK21", Type.GetType("System.Int32"));
            SizeUK21_5Column = new DataColumn("SizeUK21_5", Type.GetType("System.Int32"));
            SizeUK22Column = new DataColumn("SizeUK22", Type.GetType("System.Int32"));
            #endregion
            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            dtC_Or.Columns.Add(UnitPriceAdColumn);

            dtC_Or.Columns.Add(SizeGroupColumn);
            dtC_Or.Columns.Add(MaterialColorColumn);
            dtC_Or.Columns.Add(UOMColumn);
            dtC_Or.Columns.Add(AdidasPlanDateColumn);
            dtC_Or.Columns.Add(AdidasOrderNumberColumn);

            dtC_Or.Columns.Add(AdditionalOpt1Column);
            dtC_Or.Columns.Add(AdditionalOpt2Column);
            dtC_Or.Columns.Add(AdditionalOpt3Column);
            dtC_Or.Columns.Add(AdditionalOpt4Column);
            dtC_Or.Columns.Add(AdditionalOpt5Column);
            #endregion
            #region size reange column add
            dtC_Or.Columns.Add(SizeK1Column);
            dtC_Or.Columns.Add(SizeK1_5Column);
            dtC_Or.Columns.Add(SizeK2Column);
            dtC_Or.Columns.Add(SizeK2_5Column);
            dtC_Or.Columns.Add(SizeK3Column);
            dtC_Or.Columns.Add(SizeK3_5Column);
            dtC_Or.Columns.Add(SizeK4Column);
            dtC_Or.Columns.Add(SizeK4_5Column);
            dtC_Or.Columns.Add(SizeK5Column);
            dtC_Or.Columns.Add(SizeK5_5Column);
            dtC_Or.Columns.Add(SizeK6Column);
            dtC_Or.Columns.Add(SizeK6_5Column);
            dtC_Or.Columns.Add(SizeK7Column);
            dtC_Or.Columns.Add(SizeK7_5Column);
            dtC_Or.Columns.Add(SizeK8Column);
            dtC_Or.Columns.Add(SizeK8_5Column);
            dtC_Or.Columns.Add(SizeK9Column);
            dtC_Or.Columns.Add(SizeK9_5Column);
            dtC_Or.Columns.Add(SizeK10Column);
            dtC_Or.Columns.Add(SizeK10_5Column);
            dtC_Or.Columns.Add(SizeK11Column);
            dtC_Or.Columns.Add(SizeK11_5Column);
            dtC_Or.Columns.Add(SizeK12Column);
            dtC_Or.Columns.Add(SizeK12_5Column);
            dtC_Or.Columns.Add(SizeK13Column);
            dtC_Or.Columns.Add(SizeK13_5Column);
            dtC_Or.Columns.Add(SizeUK1Column);
            dtC_Or.Columns.Add(SizeUK1_5Column);
            dtC_Or.Columns.Add(SizeUK2Column);
            dtC_Or.Columns.Add(SizeUK2_5Column);
            dtC_Or.Columns.Add(SizeUK3Column);
            dtC_Or.Columns.Add(SizeUK3_5Column);
            dtC_Or.Columns.Add(SizeUK4Column);
            dtC_Or.Columns.Add(SizeUK4_5Column);
            dtC_Or.Columns.Add(SizeUK5Column);
            dtC_Or.Columns.Add(SizeUK5_5Column);
            dtC_Or.Columns.Add(SizeUK6Column);
            dtC_Or.Columns.Add(SizeUK6_5Column);
            dtC_Or.Columns.Add(SizeUK7Column);
            dtC_Or.Columns.Add(SizeUK7_5Column);
            dtC_Or.Columns.Add(SizeUK8Column);
            dtC_Or.Columns.Add(SizeUK8_5Column);
            dtC_Or.Columns.Add(SizeUK9Column);
            dtC_Or.Columns.Add(SizeUK9_5Column);
            dtC_Or.Columns.Add(SizeUK10Column);
            dtC_Or.Columns.Add(SizeUK10_5Column);
            dtC_Or.Columns.Add(SizeUK11Column);
            dtC_Or.Columns.Add(SizeUK11_5Column);
            dtC_Or.Columns.Add(SizeUK12Column);
            dtC_Or.Columns.Add(SizeUK12_5Column);
            dtC_Or.Columns.Add(SizeUK13Column);
            dtC_Or.Columns.Add(SizeUK13_5Column);
            dtC_Or.Columns.Add(SizeUK14Column);
            dtC_Or.Columns.Add(SizeUK14_5Column);
            dtC_Or.Columns.Add(SizeUK15Column);
            dtC_Or.Columns.Add(SizeUK15_5Column);
            dtC_Or.Columns.Add(SizeUK16Column);
            dtC_Or.Columns.Add(SizeUK16_5Column);
            dtC_Or.Columns.Add(SizeUK17Column);
            dtC_Or.Columns.Add(SizeUK17_5Column);
            dtC_Or.Columns.Add(SizeUK18Column);
            dtC_Or.Columns.Add(SizeUK18_5Column);
            dtC_Or.Columns.Add(SizeUK19Column);
            dtC_Or.Columns.Add(SizeUK19_5Column);
            dtC_Or.Columns.Add(SizeUK20Column);
            dtC_Or.Columns.Add(SizeUK20_5Column);
            dtC_Or.Columns.Add(SizeUK21Column);
            dtC_Or.Columns.Add(SizeUK21_5Column);
            dtC_Or.Columns.Add(SizeUK22Column);
            #endregion
            #region set data into field
            int f_point = -1;
            int dem = 0;
            for (int i = 2; i < dtOr_All.Rows.Count; i++) //0
            {
                //if (dtOr_All.Rows[i][52].ToString().Trim() == "Description / Supplier Material Name")//[4]
                //{
                //    f_point = i;
                //}
                //else if (dtOr_All.Columns[52].Caption.Trim() == "Description / Supplier Material Name" && i == 0)
                //{
                //    f_point = i;
                //}
                //if (i > f_point && f_point > -1)
                //{
                    if (dtOr_All.Rows[i][52].ToString() == "")//[2]
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][70].ToString();//dtOr_All.Rows[i][158].ToString();//[0]
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][52].ToString();//[5]
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][84].ToString();// dtOr_All.Rows[i][81].ToString();//[34]
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][67].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][67].ToString());// dtOr_All.Rows[i][64].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][64].ToString());//17
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][51].ToString();//4
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][1].ToString().Trim();//dtOr_All.Rows[i][80].ToString();//33
                    //------------------------------------------------------
                    drC_Or["Season"] = dtOr_All.Rows[i][86].ToString();// dtOr_All.Rows[i][83].ToString();//36
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][72].ToString();//dtOr_All.Rows[i][69].ToString();//22
                    //=-----
                    drC_Or["CRD"] = dtOr_All.Rows[i][73].ToString();//dtOr_All.Rows[i][70].ToString();//23
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][50].ToString();//3
                    drC_Or["SellerConfDeliDate"] = dtOr_All.Rows[i][75].ToString();
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UpdaDeliQtyLast"] = 0;
                    drC_Or["UnitPriceAdidas"] = dtOr_All.Rows[i][66].ToString() == "" ? 0 : double.Parse(dtOr_All.Rows[i][66].ToString());

                    drC_Or["SizeGroup"] = dtOr_All.Rows[i][64].ToString();
                    drC_Or["MaterialColor"] = dtOr_All.Rows[i][65].ToString();
                    drC_Or["UOM"] = dtOr_All.Rows[i][68].ToString();
                    drC_Or["AdidasPlanDate"] = dtOr_All.Rows[i][74].ToString();
                    drC_Or["AdidasOrderNumber"] = dtOr_All.Rows[i][83].ToString();

                    drC_Or["AdditionalOpt1"] = dtOr_All.Rows[i][158].ToString();
                    drC_Or["AdditionalOpt2"] = dtOr_All.Rows[i][159].ToString();
                    drC_Or["AdditionalOpt3"] = dtOr_All.Rows[i][160].ToString();
                    drC_Or["AdditionalOpt4"] = dtOr_All.Rows[i][161].ToString();
                    drC_Or["AdditionalOpt5"] = dtOr_All.Rows[i][162].ToString();

                    #region set data into size range
                    drC_Or["SizeK1"] = dtOr_All.Rows[i][89].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][89].ToString());
                    drC_Or["SizeK1_5"] = dtOr_All.Rows[i][90].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][90].ToString());
                    drC_Or["SizeK2"] = dtOr_All.Rows[i][91].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][91].ToString());
                    drC_Or["SizeK2_5"] = dtOr_All.Rows[i][92].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][92].ToString());
                    drC_Or["SizeK3"] = dtOr_All.Rows[i][93].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][93].ToString());
                    drC_Or["SizeK3_5"] = dtOr_All.Rows[i][94].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][94].ToString());
                    drC_Or["SizeK4"] = dtOr_All.Rows[i][95].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][95].ToString());
                    drC_Or["SizeK4_5"] = dtOr_All.Rows[i][96].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][96].ToString());
                    drC_Or["SizeK5"] = dtOr_All.Rows[i][97].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][97].ToString());
                    drC_Or["SizeK5_5"] = dtOr_All.Rows[i][98].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][98].ToString());
                    drC_Or["SizeK6"] = dtOr_All.Rows[i][99].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][99].ToString());
                    drC_Or["SizeK6_5"] = dtOr_All.Rows[i][100].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][100].ToString());
                    drC_Or["SizeK7"] = dtOr_All.Rows[i][101].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][101].ToString());
                    drC_Or["SizeK7_5"] = dtOr_All.Rows[i][102].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][102].ToString());
                    drC_Or["SizeK8"] = dtOr_All.Rows[i][103].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][103].ToString());
                    drC_Or["SizeK8_5"] = dtOr_All.Rows[i][104].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][104].ToString());
                    drC_Or["SizeK9"] = dtOr_All.Rows[i][105].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][105].ToString());
                    drC_Or["SizeK9_5"] = dtOr_All.Rows[i][106].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][106].ToString());
                    drC_Or["SizeK10"] = dtOr_All.Rows[i][107].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][107].ToString());
                    drC_Or["SizeK10_5"] = dtOr_All.Rows[i][108].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][108].ToString());
                    drC_Or["SizeK11"] = dtOr_All.Rows[i][109].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][109].ToString());
                    drC_Or["SizeK11_5"] = dtOr_All.Rows[i][110].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][110].ToString());
                    drC_Or["SizeK12"] = dtOr_All.Rows[i][111].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][111].ToString());
                    drC_Or["SizeK12_5"] = dtOr_All.Rows[i][112].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][112].ToString());
                    drC_Or["SizeK13"] = dtOr_All.Rows[i][113].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][113].ToString());
                    drC_Or["SizeK13_5"] = dtOr_All.Rows[i][114].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][114].ToString());

                    drC_Or["SizeUK1"] = dtOr_All.Rows[i][115].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][115].ToString());
                    drC_Or["SizeUK1_5"] = dtOr_All.Rows[i][116].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][116].ToString());
                    drC_Or["SizeUK2"] = dtOr_All.Rows[i][117].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][117].ToString());
                    drC_Or["SizeUK2_5"] = dtOr_All.Rows[i][118].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][118].ToString());
                    drC_Or["SizeUK3"] = dtOr_All.Rows[i][119].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][119].ToString());
                    drC_Or["SizeUK3_5"] = dtOr_All.Rows[i][120].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][120].ToString());
                    drC_Or["SizeUK4"] = dtOr_All.Rows[i][121].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][121].ToString());
                    drC_Or["SizeUK4_5"] = dtOr_All.Rows[i][122].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][122].ToString());
                    drC_Or["SizeUK5"] = dtOr_All.Rows[i][123].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][123].ToString());
                    drC_Or["SizeUK5_5"] = dtOr_All.Rows[i][124].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][124].ToString());
                    drC_Or["SizeUK6"] = dtOr_All.Rows[i][125].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][125].ToString());
                    drC_Or["SizeUK6_5"] = dtOr_All.Rows[i][126].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][126].ToString());
                    drC_Or["SizeUK7"] = dtOr_All.Rows[i][127].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][127].ToString());
                    drC_Or["SizeUK7_5"] = dtOr_All.Rows[i][128].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][128].ToString());
                    drC_Or["SizeUK8"] = dtOr_All.Rows[i][129].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][129].ToString());
                    drC_Or["SizeUK8_5"] = dtOr_All.Rows[i][130].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][130].ToString());
                    drC_Or["SizeUK9"] = dtOr_All.Rows[i][131].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][131].ToString());
                    drC_Or["SizeUK9_5"] = dtOr_All.Rows[i][132].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][132].ToString());
                    drC_Or["SizeUK10"] = dtOr_All.Rows[i][133].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][133].ToString());
                    drC_Or["SizeUK10_5"] = dtOr_All.Rows[i][134].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][134].ToString());
                    drC_Or["SizeUK11"] = dtOr_All.Rows[i][135].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][135].ToString());
                    drC_Or["SizeUK11_5"] = dtOr_All.Rows[i][136].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][136].ToString());
                    drC_Or["SizeUK12"] = dtOr_All.Rows[i][137].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][137].ToString());
                    drC_Or["SizeUK12_5"] = dtOr_All.Rows[i][138].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][138].ToString());
                    drC_Or["SizeUK13"] = dtOr_All.Rows[i][139].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][139].ToString());
                    drC_Or["SizeUK13_5"] = dtOr_All.Rows[i][140].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][140].ToString());
                    drC_Or["SizeUK14"] = dtOr_All.Rows[i][141].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][141].ToString());
                    drC_Or["SizeUK14_5"] = dtOr_All.Rows[i][142].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][142].ToString());
                    drC_Or["SizeUK15"] = dtOr_All.Rows[i][143].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][143].ToString());
                    drC_Or["SizeUK15_5"] = dtOr_All.Rows[i][144].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][144].ToString());
                    drC_Or["SizeUK16"] = dtOr_All.Rows[i][145].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][145].ToString());
                    drC_Or["SizeUK16_5"] = dtOr_All.Rows[i][146].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][146].ToString());
                    drC_Or["SizeUK17"] = dtOr_All.Rows[i][147].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][147].ToString());
                    drC_Or["SizeUK17_5"] = dtOr_All.Rows[i][148].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][148].ToString());
                    drC_Or["SizeUK18"] = dtOr_All.Rows[i][149].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][149].ToString());
                    drC_Or["SizeUK18_5"] = dtOr_All.Rows[i][150].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][150].ToString());
                    drC_Or["SizeUK19"] = dtOr_All.Rows[i][151].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][151].ToString());
                    drC_Or["SizeUK19_5"] = dtOr_All.Rows[i][152].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][152].ToString());
                    drC_Or["SizeUK20"] = dtOr_All.Rows[i][153].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][153].ToString());
                    drC_Or["SizeUK20_5"] = dtOr_All.Rows[i][154].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][154].ToString());
                    drC_Or["SizeUK21"] = dtOr_All.Rows[i][155].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][155].ToString());
                    drC_Or["SizeUK21_5"] = dtOr_All.Rows[i][156].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][156].ToString());
                    drC_Or["SizeUK22"] = dtOr_All.Rows[i][157].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][157].ToString());
                    #endregion
                    dtC_Or.Rows.Add(drC_Or);
                //}
            }
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
            #endregion
        }
        private void TransferData_OrPODowloadVertical(System.Data.DataTable dtOr_All)
        {
            #region data header
            #region define
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            //DataColumn PaymentTermColumn;
            //DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;

            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            //PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));
            
            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            //dt.Columns.Add(PaymentTermColumn);
            //dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);

            dt.Columns.Add(T1SupplierNameColumn);
            dt.Columns.Add(T1AddressL1Column);
            dt.Columns.Add(T1AddressCountryColumn);
            dt.Columns.Add(Contact_BuyerColumn);
            dt.Columns.Add(ShipTo_T1FactoryNameColumn);
            dt.Columns.Add(T1AddressL1_ShipToColumn);
            dt.Columns.Add(T1AddressCountry_ShipToColumn);
            dt.Columns.Add(PaymentTermTextColumn);
            dt.Columns.Add(CountryofOriginColumn);
            #endregion
            #region get data area
            int vitri = 0;
            // get data account 
            for (int y = 2; y < dtOr_All.Rows.Count; y++)
            {
                //if (dtOr_All.Rows[y][1].ToString().Trim() == "Order Number:")
                //{
                //    vitri = y;

                //}
                //if (y > vitri)
                //{
                    if (dtOr_All.Rows[y][1].ToString() != "") // Order Number[PO header]
                    {
                        dr = dt.NewRow();
                        // set data 
                        if (dtOr_All.Rows[y][26].ToString() != "") //156.Buyer Account---> 25.T1 Code 
                        {
                            DataSet ds1 = new DataSet();
                            DataSet ds2 = new DataSet();
                            ds1 = info.LoadAccountByNumberV5(dtOr_All.Rows[y][26].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                                dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                                if (ds1.Tables[0].Rows[0]["AccShipTo"].ToString() != "")
                                {
                                    ds2 = info.LoadDeliveryNumberV5(ds1.Tables[0].Rows[0]["AccShipTo"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                    if (ds2.Tables[0].Rows.Count > 0)
                                    {
                                        dr["AccountShip"] = ds2.Tables[0].Rows[0]["AccNo"].ToString();
                                        dr["C010-ShipName"] = ds2.Tables[0].Rows[0]["DeliveryName"].ToString();
                                    }
                                    else
                                    {
                                        dr["AccountShip"] = "";
                                        dr["C010-ShipName"] = "";
                                    }
                                }
                            }
                            else
                            {
                                dr["C021_AccountNumber"] = "";
                                dr["C024_InvoiceName"] = "";
                            }

                        }
                        #region cancel
                        //if (dtOr_All.Rows[y][157].ToString() != "")
                        //{
                        //    DataSet ds1 = new DataSet();
                        //    ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[y][157].ToString());
                        //    if (ds1.Tables[0].Rows.Count > 0)
                        //    {
                        //        dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                        //        dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                        //    }
                        //    else
                        //    {
                        //        dr["AccountShip"] = "";
                        //        dr["C010-ShipName"] = "";
                        //    }
                        //}
                        #endregion
                        dr["InvoiceNameText"] = dtOr_All.Rows[y][5].ToString();//[6][3]
                        dr["ShipNameText"] = dtOr_All.Rows[y][17].ToString();//[20][3]
                        dr["C066-OrderDate"] = dtOr_All.Rows[y][0].ToString();//[6][9]  DateTime.FromOADate(int.Parse())
                        dr["C065-PONo"] = "";//dtOr_All.Rows[y][1].ToString();//[7][9]
                        dr["C067-OrderBy"] = dtOr_All.Rows[y][14].ToString();
                        dr["Inconterm"] = "";
                        dr["IncontermText"] = dtOr_All.Rows[y][42].ToString();//[33][6]
                        dr["ShipBy"] = "";
                        dr["ShipByText"] = dtOr_All.Rows[y][43].ToString();//[33][7]
                        //dr["C051-TermofPayment"] = "";
                        //dr["C037-NetDays"] = 0;
                        dr["Version"] = dtOr_All.Rows[y][3].ToString();//[9][9]
                        dr["Purpose"] = dtOr_All.Rows[y][4].ToString();//[10][9]

                        dr["T1SupplierName"] = dtOr_All.Rows[y][5].ToString();
                        dr["T1AddressL1"] = dtOr_All.Rows[y][6].ToString();
                        dr["T1AddressCountry"] = dtOr_All.Rows[y][13].ToString();
                        dr["Contact_Buyer"] = dtOr_All.Rows[y][14].ToString();
                        dr["ShipTo_T1FactoryName"] = dtOr_All.Rows[y][17].ToString();
                        dr["T1AddressL1_ShipTo"] = dtOr_All.Rows[y][18].ToString();
                        dr["T1AddressCountry_ShipTo"] = dtOr_All.Rows[y][25].ToString();
                        dr["PaymentTerm"] = dtOr_All.Rows[y][41].ToString();
                        dr["CountryofOrigin"] = dtOr_All.Rows[y][44].ToString();

                        dt.Rows.Add(dr);

                        goto ExitHtoCenter;
                    }
                //}
            }
            ExitHtoCenter :

            dsH_Or.Tables.Add(dt);
            #endregion
            //------------------------------------------------
            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;
            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn VerticalSizeColumn;

            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn SizeGroupColumn;
            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;
            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;

            #endregion
            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            VerticalSizeColumn = new DataColumn("VerticalSize", Type.GetType("System.String"));

            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));

            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));
            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));
            #endregion

            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(VerticalSizeColumn);

            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            dtC_Or.Columns.Add(UnitPriceAdColumn);

            dtC_Or.Columns.Add(SizeGroupColumn);
            dtC_Or.Columns.Add(MaterialColorColumn);
            dtC_Or.Columns.Add(UOMColumn);
            dtC_Or.Columns.Add(AdidasPlanDateColumn);
            dtC_Or.Columns.Add(AdidasOrderNumberColumn);

            dtC_Or.Columns.Add(AdditionalOpt1Column);
            dtC_Or.Columns.Add(AdditionalOpt2Column);
            dtC_Or.Columns.Add(AdditionalOpt3Column);
            dtC_Or.Columns.Add(AdditionalOpt4Column);
            dtC_Or.Columns.Add(AdditionalOpt5Column);
            #endregion

            #region set data into field
            int f_point = -1;
            int dem = 0;
            for (int i = 2; i < dtOr_All.Rows.Count; i++) //0
            {
                //MessageBox.Show(dtOr_All.Rows[i][52].ToString().Trim());
               // MessageBox.Show(dtOr_All.Rows[i][53].ToString().Trim());
                //if (dtOr_All.Rows[i][52].ToString().Trim() == "Description / Supplier Material Name")//[4]
                //{
                //    f_point = i;
                //}
                //else if (dtOr_All.Columns[52].Caption.Trim()=="Description / Supplier Material Name" && i==0)
                //{
                //     f_point = i;
                //}
                //if (i > f_point && f_point > -1)
                //{
                    if (dtOr_All.Rows[i][52].ToString() == "")//[52]
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][70].ToString();//dtOr_All.Rows[i][158].ToString();//[0]
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][52].ToString();//[5]
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][84].ToString();// dtOr_All.Rows[i][81].ToString();//[34]
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["VerticalSize"] = dtOr_All.Rows[i][63].ToString();

                    //drC_Or["VerticalSize"] = dtOr_All.Rows[i][14].ToString();
                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][67].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][67].ToString());// dtOr_All.Rows[i][64].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][64].ToString());//17
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][51].ToString();//4
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][1].ToString();//dtOr_All.Rows[i][80].ToString();//33
                    //------------------------------------------------------
                    drC_Or["Season"] = dtOr_All.Rows[i][86].ToString();// dtOr_All.Rows[i][83].ToString();//36
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][72].ToString();//dtOr_All.Rows[i][69].ToString();//22
                    //=-----
                    drC_Or["CRD"] = dtOr_All.Rows[i][73].ToString();//dtOr_All.Rows[i][70].ToString();//23
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][50].ToString();//3
                    drC_Or["SellerConfDeliDate"] = dtOr_All.Rows[i][75].ToString();
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UpdaDeliQtyLast"] = 0;
                    drC_Or["UnitPriceAdidas"] = dtOr_All.Rows[i][66].ToString() == "" ? 0 : double.Parse(dtOr_All.Rows[i][66].ToString());

                    drC_Or["SizeGroup"] = dtOr_All.Rows[i][64].ToString(); 
                    drC_Or["MaterialColor"] = dtOr_All.Rows[i][65].ToString(); 
                    drC_Or["UOM"] = dtOr_All.Rows[i][68].ToString(); 
                    drC_Or["AdidasPlanDate"] = dtOr_All.Rows[i][74].ToString();
                    drC_Or["AdidasOrderNumber"] = dtOr_All.Rows[i][83].ToString();

                    drC_Or["AdditionalOpt1"] = dtOr_All.Rows[i][158].ToString();
                    drC_Or["AdditionalOpt2"] = dtOr_All.Rows[i][159].ToString();
                    drC_Or["AdditionalOpt3"] = dtOr_All.Rows[i][160].ToString();
                    drC_Or["AdditionalOpt4"] = dtOr_All.Rows[i][161].ToString();
                    drC_Or["AdditionalOpt5"] = dtOr_All.Rows[i][162].ToString();

                    dtC_Or.Rows.Add(drC_Or);

                   // MessageBox.Show(dtOr_All.Rows[i][84].ToString());
                //}
            }
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
            #endregion
        }
        private void TransferData_OrPODowloadGroupSizeDL(System.Data.DataTable dtOr_All)
        {
            #region data header
            #region define
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            //DataColumn PaymentTermColumn;
            //DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            DataColumn T1SupplierNameColumn;
            DataColumn T1AddressL1Column;
            DataColumn T1AddressCountryColumn;
            DataColumn Contact_BuyerColumn;
            DataColumn ShipTo_T1FactoryNameColumn;
            DataColumn T1AddressL1_ShipToColumn;
            DataColumn T1AddressCountry_ShipToColumn;
            DataColumn PaymentTermTextColumn;
            DataColumn CountryofOriginColumn;

            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            //PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            //NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            T1SupplierNameColumn = new DataColumn("T1SupplierName", Type.GetType("System.String"));
            T1AddressL1Column = new DataColumn("T1AddressL1", Type.GetType("System.String"));
            T1AddressCountryColumn = new DataColumn("T1AddressCountry", Type.GetType("System.String"));
            Contact_BuyerColumn = new DataColumn("Contact_Buyer", Type.GetType("System.String"));
            ShipTo_T1FactoryNameColumn = new DataColumn("ShipTo_T1FactoryName", Type.GetType("System.String"));
            T1AddressL1_ShipToColumn = new DataColumn("T1AddressL1_ShipTo", Type.GetType("System.String"));
            T1AddressCountry_ShipToColumn = new DataColumn("T1AddressCountry_ShipTo", Type.GetType("System.String"));
            PaymentTermTextColumn = new DataColumn("PaymentTerm", Type.GetType("System.String"));
            CountryofOriginColumn = new DataColumn("CountryofOrigin", Type.GetType("System.String"));

            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            //dt.Columns.Add(PaymentTermColumn);
            //dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);

            dt.Columns.Add(T1SupplierNameColumn);
            dt.Columns.Add(T1AddressL1Column);
            dt.Columns.Add(T1AddressCountryColumn);
            dt.Columns.Add(Contact_BuyerColumn);
            dt.Columns.Add(ShipTo_T1FactoryNameColumn);
            dt.Columns.Add(T1AddressL1_ShipToColumn);
            dt.Columns.Add(T1AddressCountry_ShipToColumn);
            dt.Columns.Add(PaymentTermTextColumn);
            dt.Columns.Add(CountryofOriginColumn);

            #endregion
            #region get data area
            int vitri = 0;
            // get data account 
            for (int y = 2; y < dtOr_All.Rows.Count; y++)//0
            {
                //if (dtOr_All.Rows[y][1].ToString().Trim() == "Order Number:")
                //{
                //    vitri = y;

                //}
                //if (y > vitri)
                //{
                    if (dtOr_All.Rows[y][1].ToString() != "") // Order Number[PO header]
                    {
                        dr = dt.NewRow();
                        // set data 
                        if (dtOr_All.Rows[y][26].ToString() != "") //156.Buyer Account---> 25.T1 Code 
                        {
                            DataSet ds1 = new DataSet();
                            DataSet ds2 = new DataSet();
                            ds1 = info.LoadAccountByNumberV5(dtOr_All.Rows[y][26].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                                dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                                if (ds1.Tables[0].Rows[0]["AccShipTo"].ToString() != "")
                                {
                                    ds2 = info.LoadDeliveryNumberV5(ds1.Tables[0].Rows[0]["AccShipTo"].ToString(), lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                                    if (ds2.Tables[0].Rows.Count > 0)
                                    {
                                        dr["AccountShip"] = ds2.Tables[0].Rows[0]["AccNo"].ToString();
                                        dr["C010-ShipName"] = ds2.Tables[0].Rows[0]["DeliveryName"].ToString();
                                    }
                                    else
                                    {
                                        dr["AccountShip"] = "";
                                        dr["C010-ShipName"] = "";
                                    }
                                }
                            }
                            else
                            {
                                dr["C021_AccountNumber"] = "";
                                dr["C024_InvoiceName"] = "";
                            }

                        }
                        #region cancel
                        //if (dtOr_All.Rows[y][157].ToString() != "")
                        //{
                        //    DataSet ds1 = new DataSet();
                        //    ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[y][157].ToString());
                        //    if (ds1.Tables[0].Rows.Count > 0)
                        //    {
                        //        dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                        //        dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                        //    }
                        //    else
                        //    {
                        //        dr["AccountShip"] = "";
                        //        dr["C010-ShipName"] = "";
                        //    }
                        //}
                        #endregion
                        dr["InvoiceNameText"] = dtOr_All.Rows[y][5].ToString();//[6][3]
                        dr["ShipNameText"] = dtOr_All.Rows[y][17].ToString();//[20][3]
                        dr["C066-OrderDate"] = dtOr_All.Rows[y][0].ToString();//[6][9]  DateTime.FromOADate(int.Parse())
                        dr["C065-PONo"] = "";//dtOr_All.Rows[y][1].ToString();//[7][9]
                        dr["C067-OrderBy"] = dtOr_All.Rows[y][14].ToString();
                        dr["Inconterm"] = "";
                        dr["IncontermText"] = dtOr_All.Rows[y][42].ToString();//[33][6]
                        dr["ShipBy"] = "";
                        dr["ShipByText"] = dtOr_All.Rows[y][43].ToString();//[33][7]
                        //dr["C051-TermofPayment"] = "";
                        //dr["C037-NetDays"] = 0;
                        dr["Version"] = dtOr_All.Rows[y][3].ToString();//[9][9]
                        dr["Purpose"] = dtOr_All.Rows[y][4].ToString();//[10][9]

                        dr["T1SupplierName"] = dtOr_All.Rows[y][5].ToString();
                        dr["T1AddressL1"] = dtOr_All.Rows[y][6].ToString();
                        dr["T1AddressCountry"] = dtOr_All.Rows[y][13].ToString();
                        dr["Contact_Buyer"] = dtOr_All.Rows[y][14].ToString();
                        dr["ShipTo_T1FactoryName"] = dtOr_All.Rows[y][17].ToString();
                        dr["T1AddressL1_ShipTo"] = dtOr_All.Rows[y][18].ToString();
                        dr["T1AddressCountry_ShipTo"] = dtOr_All.Rows[y][25].ToString();
                        dr["PaymentTerm"] = dtOr_All.Rows[y][41].ToString();
                        dr["CountryofOrigin"] = dtOr_All.Rows[y][44].ToString();

                        dt.Rows.Add(dr);

                        goto ExitHtoCenter;
                    }
                //}
            }
        ExitHtoCenter:

            dsH_Or.Tables.Add(dt);
            #endregion
            //------------------------------------------------
            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;
            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn SizeGroupColumn;

            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;
            DataColumn UnitPriceAdColumn;

            DataColumn MaterialColorColumn;
            DataColumn UOMColumn;
            DataColumn AdidasPlanDateColumn;
            DataColumn AdidasOrderNumberColumn;

            DataColumn AdditionalOpt1Column;
            DataColumn AdditionalOpt2Column;
            DataColumn AdditionalOpt3Column;
            DataColumn AdditionalOpt4Column;
            DataColumn AdditionalOpt5Column;
            #endregion
            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));

            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            UnitPriceAdColumn = new DataColumn("UnitPriceAdidas", Type.GetType("System.Double"));

            MaterialColorColumn = new DataColumn("MaterialColor", Type.GetType("System.String"));
            UOMColumn = new DataColumn("UOM", Type.GetType("System.String"));
            AdidasPlanDateColumn = new DataColumn("AdidasPlanDate", Type.GetType("System.String"));
            AdidasOrderNumberColumn = new DataColumn("AdidasOrderNumber", Type.GetType("System.String"));

            AdditionalOpt1Column = new DataColumn("AdditionalOpt1", Type.GetType("System.String"));
            AdditionalOpt2Column = new DataColumn("AdditionalOpt2", Type.GetType("System.String"));
            AdditionalOpt3Column = new DataColumn("AdditionalOpt3", Type.GetType("System.String"));
            AdditionalOpt4Column = new DataColumn("AdditionalOpt4", Type.GetType("System.String"));
            AdditionalOpt5Column = new DataColumn("AdditionalOpt5", Type.GetType("System.String"));
            #endregion

            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(SizeGroupColumn);

            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            dtC_Or.Columns.Add(UnitPriceAdColumn);

            dtC_Or.Columns.Add(MaterialColorColumn);
            dtC_Or.Columns.Add(UOMColumn);
            dtC_Or.Columns.Add(AdidasPlanDateColumn);
            dtC_Or.Columns.Add(AdidasOrderNumberColumn);

            dtC_Or.Columns.Add(AdditionalOpt1Column);
            dtC_Or.Columns.Add(AdditionalOpt2Column);
            dtC_Or.Columns.Add(AdditionalOpt3Column);
            dtC_Or.Columns.Add(AdditionalOpt4Column);
            dtC_Or.Columns.Add(AdditionalOpt5Column);
            #endregion

            #region set data into field
            int f_point = -1;
            int dem = 0;
            for (int i = 2; i < dtOr_All.Rows.Count; i++)//0
            {
                //if (dtOr_All.Rows[i][52].ToString().Trim() == "Description / Supplier Material Name")//[4]
                //{
                //    f_point = i;
                //}
                //else if (dtOr_All.Columns[52].Caption.Trim() == "Description / Supplier Material Name" && i == 0)
                //{
                //    f_point = i;
                //}
                //if (i > f_point && f_point > -1)
                //{
                    if (dtOr_All.Rows[i][52].ToString() == "")//[52]
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][70].ToString();//dtOr_All.Rows[i][158].ToString();//[0]
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][52].ToString();//[5]
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][84].ToString();// dtOr_All.Rows[i][81].ToString();//[34]
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["SizeGroup"] = dtOr_All.Rows[i][64].ToString();

                    //drC_Or["VerticalSize"] = dtOr_All.Rows[i][14].ToString();
                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][67].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][67].ToString());// dtOr_All.Rows[i][64].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][64].ToString());//17
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][51].ToString();//4
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][1].ToString();//dtOr_All.Rows[i][80].ToString();//33
                    //------------------------------------------------------
                    drC_Or["Season"] = dtOr_All.Rows[i][86].ToString();// dtOr_All.Rows[i][83].ToString();//36
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][72].ToString();//dtOr_All.Rows[i][69].ToString();//22
                    //=-----
                    drC_Or["CRD"] = dtOr_All.Rows[i][73].ToString();//dtOr_All.Rows[i][70].ToString();//23
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][50].ToString();//3
                    drC_Or["SellerConfDeliDate"] = dtOr_All.Rows[i][75].ToString();
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UnitPriceAdidas"] = dtOr_All.Rows[i][66].ToString() == "" ? 0 : double.Parse(dtOr_All.Rows[i][66].ToString());

                    drC_Or["MaterialColor"] = dtOr_All.Rows[i][65].ToString();
                    drC_Or["UOM"] = dtOr_All.Rows[i][68].ToString();
                    drC_Or["AdidasPlanDate"] = dtOr_All.Rows[i][74].ToString();
                    drC_Or["AdidasOrderNumber"] = dtOr_All.Rows[i][83].ToString();

                    drC_Or["AdditionalOpt1"] = dtOr_All.Rows[i][158].ToString();
                    drC_Or["AdditionalOpt2"] = dtOr_All.Rows[i][159].ToString();
                    drC_Or["AdditionalOpt3"] = dtOr_All.Rows[i][160].ToString();
                    drC_Or["AdditionalOpt4"] = dtOr_All.Rows[i][161].ToString();
                    drC_Or["AdditionalOpt5"] = dtOr_All.Rows[i][162].ToString();

                    dtC_Or.Rows.Add(drC_Or);
               // }
            }
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
            #endregion
        }
        private void TransferData_OrSizeGroup(System.Data.DataTable dtOr_All)
        {
            #region data header
            System.Data.DataTable dt;
            DataRow dr;
            #region define column 
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            DataColumn PaymentTermColumn;
            DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;
            #endregion
            #region define column name
            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));
            #endregion
            #region add column into datatable
            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            dt.Columns.Add(PaymentTermColumn);
            dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);
            #endregion
            dr = dt.NewRow();
            #region get data header 
            if (dtOr_All.Rows[6][0].ToString() != "")
            {
                DataSet ds1 = new DataSet();
                ds1 = info.LoadAccountByNumber(dtOr_All.Rows[6][0].ToString());
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                    dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                }
                else
                {
                    dr["C021_AccountNumber"] = "";
                    dr["C024_InvoiceName"] = "";
                }
            }
            if (dtOr_All.Rows[20][0].ToString() != "")
            {
                DataSet ds1 = new DataSet();
                ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[20][0].ToString());
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                    dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                }
                else
                {
                    dr["AccountShip"] = "";
                    dr["C010-ShipName"] = "";
                }
            }

            dr["InvoiceNameText"] = dtOr_All.Rows[6][3].ToString();//[6][3]
            dr["ShipNameText"] = dtOr_All.Rows[20][3].ToString();//[20][3]
            dr["C066-OrderDate"] = dtOr_All.Rows[6][9].ToString();// DateTime.FromOADate(int.Parse())
            dr["C065-PONo"] = dtOr_All.Rows[7][9].ToString();
            dr["C067-OrderBy"] = "";
            dr["Inconterm"] = "";
            dr["IncontermText"] = dtOr_All.Rows[33][6].ToString();
            dr["ShipBy"] = "";
            dr["ShipByText"] = dtOr_All.Rows[33][7].ToString();
            dr["C051-TermofPayment"] = "";
            dr["C037-NetDays"] = 0;
            dr["Version"] = dtOr_All.Rows[9][9].ToString();
            dr["Purpose"] = dtOr_All.Rows[10][9].ToString();
            #endregion
            dt.Rows.Add(dr);
            dsH_Or.Tables.Add(dt);
            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;

            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn SizeGroupColumn;

            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;


            #endregion

            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            SizeGroupColumn = new DataColumn("SizeGroup", Type.GetType("System.String"));

            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion

            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(SizeGroupColumn);

            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion

            #region set data
            int f_point = -1;
            int dem = 0;
            for (int i = 0; i < dtOr_All.Rows.Count; i++)
            {
                if (dtOr_All.Rows[i][4].ToString() == "Ref#")
                {
                    f_point = i;
                }
                if (i > f_point && f_point > -1)
                {
                    if (dtOr_All.Rows[i][5].ToString() == "")
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][0].ToString();
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][5].ToString();
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][34].ToString();
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["SizeGroup"] = dtOr_All.Rows[i][14].ToString();

                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][17].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][17].ToString());
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][4].ToString();
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][33].ToString();
                    drC_Or["Season"] = dtOr_All.Rows[i][36].ToString();
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][22].ToString();
                    drC_Or["CRD"] = dtOr_All.Rows[i][23].ToString();
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][3].ToString();
                    drC_Or["SellerConfDeliDate"] = "";
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UpdaDeliQtyLast"] = 0;

                    dtC_Or.Rows.Add(drC_Or);
                }
            }
            #endregion
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
        }
        private void TransferData_Or(System.Data.DataTable dtOr_All)
        {
            #region data header
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            DataColumn PaymentTermColumn;
            DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            dt.Columns.Add(PaymentTermColumn);
            dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);

            dr = dt.NewRow();
            // get data account 
            if (dtOr_All.Rows[6][0].ToString()!="")
            {
                DataSet ds1= new DataSet();
                ds1 = info.LoadAccountByNumber(dtOr_All.Rows[6][0].ToString());
                if (ds1.Tables[0].Rows.Count>0)
                {
                    dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                    dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                }
                else
                {
                    dr["C021_AccountNumber"] = "";
                    dr["C024_InvoiceName"] = "";
                }
            }
            if (dtOr_All.Rows[20][0].ToString() != "")
            {
                DataSet ds1 = new DataSet();
                ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[20][0].ToString());
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                    dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                }
                else
                {
                    dr["AccountShip"] = "";
                    dr["C010-ShipName"] = "";
                }
            }
            
            dr["InvoiceNameText"] = dtOr_All.Rows[6][3].ToString();//[6][3]
            dr["ShipNameText"] = dtOr_All.Rows[20][3].ToString();//[20][3]
            dr["C066-OrderDate"] = dtOr_All.Rows[6][9].ToString();// DateTime.FromOADate(int.Parse())
            dr["C065-PONo"] = dtOr_All.Rows[7][9].ToString();
            dr["C067-OrderBy"] = "";
            dr["Inconterm"] = "";
            dr["IncontermText"] = dtOr_All.Rows[33][6].ToString();
            dr["ShipBy"] = "";
            dr["ShipByText"] = dtOr_All.Rows[33][7].ToString();
            dr["C051-TermofPayment"] = "";
            dr["C037-NetDays"] = 0;
            dr["Version"] = dtOr_All.Rows[9][9].ToString();
            dr["Purpose"] = dtOr_All.Rows[10][9].ToString();

            dt.Rows.Add(dr);
            dsH_Or.Tables.Add(dt);

            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;

            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;


            #endregion

            #region size range
            DataColumn SizeK1Column;
            DataColumn SizeK1_5Column;
            DataColumn SizeK2Column;
            DataColumn SizeK2_5Column;
            DataColumn SizeK3Column;
            DataColumn SizeK3_5Column;
            DataColumn SizeK4Column;
            DataColumn SizeK4_5Column;
            DataColumn SizeK5Column;
            DataColumn SizeK5_5Column;
            DataColumn SizeK6Column;
            DataColumn SizeK6_5Column;
            DataColumn SizeK7Column;
            DataColumn SizeK7_5Column;
            DataColumn SizeK8Column;
            DataColumn SizeK8_5Column;
            DataColumn SizeK9Column;
            DataColumn SizeK9_5Column;
            DataColumn SizeK10Column;
            DataColumn SizeK10_5Column;
            DataColumn SizeK11Column;
            DataColumn SizeK11_5Column;
            DataColumn SizeK12Column;
            DataColumn SizeK12_5Column;
            DataColumn SizeK13Column;
            DataColumn SizeK13_5Column;
            DataColumn SizeUK1Column;
            DataColumn SizeUK1_5Column;
            DataColumn SizeUK2Column;
            DataColumn SizeUK2_5Column;
            DataColumn SizeUK3Column;
            DataColumn SizeUK3_5Column;
            DataColumn SizeUK4Column;
            DataColumn SizeUK4_5Column;
            DataColumn SizeUK5Column;
            DataColumn SizeUK5_5Column;
            DataColumn SizeUK6Column;
            DataColumn SizeUK6_5Column;
            DataColumn SizeUK7Column;
            DataColumn SizeUK7_5Column;
            DataColumn SizeUK8Column;
            DataColumn SizeUK8_5Column;
            DataColumn SizeUK9Column;
            DataColumn SizeUK9_5Column;
            DataColumn SizeUK10Column;
            DataColumn SizeUK10_5Column;
            DataColumn SizeUK11Column;
            DataColumn SizeUK11_5Column;
            DataColumn SizeUK12Column;
            DataColumn SizeUK12_5Column;
            DataColumn SizeUK13Column;
            DataColumn SizeUK13_5Column;
            DataColumn SizeUK14Column;
            DataColumn SizeUK14_5Column;
            DataColumn SizeUK15Column;
            DataColumn SizeUK15_5Column;
            DataColumn SizeUK16Column;
            DataColumn SizeUK16_5Column;
            DataColumn SizeUK17Column;
            DataColumn SizeUK17_5Column;
            DataColumn SizeUK18Column;
            DataColumn SizeUK18_5Column;
            DataColumn SizeUK19Column;
            DataColumn SizeUK19_5Column;
            DataColumn SizeUK20Column;
            #endregion

            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion

            #region Size range type define
            SizeK1Column = new DataColumn("SizeK1", Type.GetType("System.Int32"));
            SizeK1_5Column = new DataColumn("SizeK1_5", Type.GetType("System.Int32"));
            SizeK2Column = new DataColumn("SizeK2", Type.GetType("System.Int32"));
            SizeK2_5Column = new DataColumn("SizeK2_5", Type.GetType("System.Int32"));
            SizeK3Column = new DataColumn("SizeK3", Type.GetType("System.Int32"));
            SizeK3_5Column = new DataColumn("SizeK3_5", Type.GetType("System.Int32"));
            SizeK4Column = new DataColumn("SizeK4", Type.GetType("System.Int32"));
            SizeK4_5Column = new DataColumn("SizeK4_5", Type.GetType("System.Int32"));
            SizeK5Column = new DataColumn("SizeK5", Type.GetType("System.Int32"));
            SizeK5_5Column = new DataColumn("SizeK5_5", Type.GetType("System.Int32"));
            SizeK6Column = new DataColumn("SizeK6", Type.GetType("System.Int32"));
            SizeK6_5Column = new DataColumn("SizeK6_5", Type.GetType("System.Int32"));
            SizeK7Column = new DataColumn("SizeK7", Type.GetType("System.Int32"));
            SizeK7_5Column = new DataColumn("SizeK7_5", Type.GetType("System.Int32"));
            SizeK8Column = new DataColumn("SizeK8", Type.GetType("System.Int32"));
            SizeK8_5Column = new DataColumn("SizeK8_5", Type.GetType("System.Int32"));
            SizeK9Column = new DataColumn("SizeK9", Type.GetType("System.Int32"));
            SizeK9_5Column = new DataColumn("SizeK9_5", Type.GetType("System.Int32"));
            SizeK10Column = new DataColumn("SizeK10", Type.GetType("System.Int32"));
            SizeK10_5Column = new DataColumn("SizeK10_5", Type.GetType("System.Int32"));
            SizeK11Column = new DataColumn("SizeK11", Type.GetType("System.Int32"));
            SizeK11_5Column = new DataColumn("SizeK11_5", Type.GetType("System.Int32"));
            SizeK12Column = new DataColumn("SizeK12", Type.GetType("System.Int32"));
            SizeK12_5Column = new DataColumn("SizeK12_5", Type.GetType("System.Int32"));
            SizeK13Column = new DataColumn("SizeK13", Type.GetType("System.Int32"));
            SizeK13_5Column = new DataColumn("SizeK13_5", Type.GetType("System.Int32"));
            SizeUK1Column = new DataColumn("SizeUK1", Type.GetType("System.Int32"));
            SizeUK1_5Column = new DataColumn("SizeUK1_5", Type.GetType("System.Int32"));
            SizeUK2Column = new DataColumn("SizeUK2", Type.GetType("System.Int32"));
            SizeUK2_5Column = new DataColumn("SizeUK2_5", Type.GetType("System.Int32"));
            SizeUK3Column = new DataColumn("SizeUK3", Type.GetType("System.Int32"));
            SizeUK3_5Column = new DataColumn("SizeUK3_5", Type.GetType("System.Int32"));
            SizeUK4Column = new DataColumn("SizeUK4", Type.GetType("System.Int32"));
            SizeUK4_5Column = new DataColumn("SizeUK4_5", Type.GetType("System.Int32"));
            SizeUK5Column = new DataColumn("SizeUK5", Type.GetType("System.Int32"));
            SizeUK5_5Column = new DataColumn("SizeUK5_5", Type.GetType("System.Int32"));
            SizeUK6Column = new DataColumn("SizeUK6", Type.GetType("System.Int32"));
            SizeUK6_5Column = new DataColumn("SizeUK6_5", Type.GetType("System.Int32"));
            SizeUK7Column = new DataColumn("SizeUK7", Type.GetType("System.Int32"));
            SizeUK7_5Column = new DataColumn("SizeUK7_5", Type.GetType("System.Int32"));
            SizeUK8Column = new DataColumn("SizeUK8", Type.GetType("System.Int32"));
            SizeUK8_5Column = new DataColumn("SizeUK8_5", Type.GetType("System.Int32"));
            SizeUK9Column = new DataColumn("SizeUK9", Type.GetType("System.Int32"));
            SizeUK9_5Column = new DataColumn("SizeUK9_5", Type.GetType("System.Int32"));
            SizeUK10Column = new DataColumn("SizeUK10", Type.GetType("System.Int32"));
            SizeUK10_5Column = new DataColumn("SizeUK10_5", Type.GetType("System.Int32"));
            SizeUK11Column = new DataColumn("SizeUK11", Type.GetType("System.Int32"));
            SizeUK11_5Column = new DataColumn("SizeUK11_5", Type.GetType("System.Int32"));
            SizeUK12Column = new DataColumn("SizeUK12", Type.GetType("System.Int32"));
            SizeUK12_5Column = new DataColumn("SizeUK12_5", Type.GetType("System.Int32"));
            SizeUK13Column = new DataColumn("SizeUK13", Type.GetType("System.Int32"));
            SizeUK13_5Column = new DataColumn("SizeUK13_5", Type.GetType("System.Int32"));
            SizeUK14Column = new DataColumn("SizeUK14", Type.GetType("System.Int32"));
            SizeUK14_5Column = new DataColumn("SizeUK14_5", Type.GetType("System.Int32"));
            SizeUK15Column = new DataColumn("SizeUK15", Type.GetType("System.Int32"));
            SizeUK15_5Column = new DataColumn("SizeUK15_5", Type.GetType("System.Int32"));
            SizeUK16Column = new DataColumn("SizeUK16", Type.GetType("System.Int32"));
            SizeUK16_5Column = new DataColumn("SizeUK16_5", Type.GetType("System.Int32"));
            SizeUK17Column = new DataColumn("SizeUK17", Type.GetType("System.Int32"));
            SizeUK17_5Column = new DataColumn("SizeUK17_5", Type.GetType("System.Int32"));
            SizeUK18Column = new DataColumn("SizeUK18", Type.GetType("System.Int32"));
            SizeUK18_5Column = new DataColumn("SizeUK18_5", Type.GetType("System.Int32"));
            SizeUK19Column = new DataColumn("SizeUK19", Type.GetType("System.Int32"));
            SizeUK19_5Column = new DataColumn("SizeUK19_5", Type.GetType("System.Int32"));
            SizeUK20Column = new DataColumn("SizeUK20", Type.GetType("System.Int32"));

            #endregion

            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion

            #region size reange column add
            dtC_Or.Columns.Add(SizeK1Column);
            dtC_Or.Columns.Add(SizeK1_5Column);
            dtC_Or.Columns.Add(SizeK2Column);
            dtC_Or.Columns.Add(SizeK2_5Column);
            dtC_Or.Columns.Add(SizeK3Column);
            dtC_Or.Columns.Add(SizeK3_5Column);
            dtC_Or.Columns.Add(SizeK4Column);
            dtC_Or.Columns.Add(SizeK4_5Column);
            dtC_Or.Columns.Add(SizeK5Column);
            dtC_Or.Columns.Add(SizeK5_5Column);
            dtC_Or.Columns.Add(SizeK6Column);
            dtC_Or.Columns.Add(SizeK6_5Column);
            dtC_Or.Columns.Add(SizeK7Column);
            dtC_Or.Columns.Add(SizeK7_5Column);
            dtC_Or.Columns.Add(SizeK8Column);
            dtC_Or.Columns.Add(SizeK8_5Column);
            dtC_Or.Columns.Add(SizeK9Column);
            dtC_Or.Columns.Add(SizeK9_5Column);
            dtC_Or.Columns.Add(SizeK10Column);
            dtC_Or.Columns.Add(SizeK10_5Column);
            dtC_Or.Columns.Add(SizeK11Column);
            dtC_Or.Columns.Add(SizeK11_5Column);
            dtC_Or.Columns.Add(SizeK12Column);
            dtC_Or.Columns.Add(SizeK12_5Column);
            dtC_Or.Columns.Add(SizeK13Column);
            dtC_Or.Columns.Add(SizeK13_5Column);
            dtC_Or.Columns.Add(SizeUK1Column);
            dtC_Or.Columns.Add(SizeUK1_5Column);
            dtC_Or.Columns.Add(SizeUK2Column);
            dtC_Or.Columns.Add(SizeUK2_5Column);
            dtC_Or.Columns.Add(SizeUK3Column);
            dtC_Or.Columns.Add(SizeUK3_5Column);
            dtC_Or.Columns.Add(SizeUK4Column);
            dtC_Or.Columns.Add(SizeUK4_5Column);
            dtC_Or.Columns.Add(SizeUK5Column);
            dtC_Or.Columns.Add(SizeUK5_5Column);
            dtC_Or.Columns.Add(SizeUK6Column);
            dtC_Or.Columns.Add(SizeUK6_5Column);
            dtC_Or.Columns.Add(SizeUK7Column);
            dtC_Or.Columns.Add(SizeUK7_5Column);
            dtC_Or.Columns.Add(SizeUK8Column);
            dtC_Or.Columns.Add(SizeUK8_5Column);
            dtC_Or.Columns.Add(SizeUK9Column);
            dtC_Or.Columns.Add(SizeUK9_5Column);
            dtC_Or.Columns.Add(SizeUK10Column);
            dtC_Or.Columns.Add(SizeUK10_5Column);
            dtC_Or.Columns.Add(SizeUK11Column);
            dtC_Or.Columns.Add(SizeUK11_5Column);
            dtC_Or.Columns.Add(SizeUK12Column);
            dtC_Or.Columns.Add(SizeUK12_5Column);
            dtC_Or.Columns.Add(SizeUK13Column);
            dtC_Or.Columns.Add(SizeUK13_5Column);
            dtC_Or.Columns.Add(SizeUK14Column);
            dtC_Or.Columns.Add(SizeUK14_5Column);
            dtC_Or.Columns.Add(SizeUK15Column);
            dtC_Or.Columns.Add(SizeUK15_5Column);
            dtC_Or.Columns.Add(SizeUK16Column);
            dtC_Or.Columns.Add(SizeUK16_5Column);
            dtC_Or.Columns.Add(SizeUK17Column);
            dtC_Or.Columns.Add(SizeUK17_5Column);
            dtC_Or.Columns.Add(SizeUK18Column);
            dtC_Or.Columns.Add(SizeUK18_5Column);
            dtC_Or.Columns.Add(SizeUK19Column);
            dtC_Or.Columns.Add(SizeUK19_5Column);
            dtC_Or.Columns.Add(SizeUK20Column);
            #endregion

            
            int f_point = -1;
            int dem = 0;
            for (int i = 0; i < dtOr_All.Rows.Count; i++)
            {
                if (dtOr_All.Rows[i][4].ToString()=="Ref#")
                {
                    f_point = i;
                }
                if (i>f_point && f_point>-1)
                {
                    if (dtOr_All.Rows[i][5].ToString()=="")
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][0].ToString();
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][5].ToString();
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][34].ToString();
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][17].ToString()==""?0:int.Parse(dtOr_All.Rows[i][17].ToString()) ;
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][4].ToString();
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][33].ToString();
                    drC_Or["Season"] = dtOr_All.Rows[i][36].ToString();
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][22].ToString();
                    drC_Or["CRD"] = dtOr_All.Rows[i][23].ToString();
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][3].ToString();
                    drC_Or["SellerConfDeliDate"] = "";
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UpdaDeliQtyLast"] = 0;

                    #region set data into size range
                    drC_Or["SizeK1"] = dtOr_All.Rows[i][39].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][39].ToString());
                    drC_Or["SizeK1_5"] = dtOr_All.Rows[i][40].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][40].ToString());
                    drC_Or["SizeK2"] = dtOr_All.Rows[i][41].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][41].ToString());
                    drC_Or["SizeK2_5"] = dtOr_All.Rows[i][42].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][42].ToString());
                    drC_Or["SizeK3"] = dtOr_All.Rows[i][43].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][43].ToString());
                    drC_Or["SizeK3_5"] = dtOr_All.Rows[i][44].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][44].ToString());
                    drC_Or["SizeK4"] = dtOr_All.Rows[i][45].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][45].ToString());
                    drC_Or["SizeK4_5"] = dtOr_All.Rows[i][46].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][46].ToString());
                    drC_Or["SizeK5"] = dtOr_All.Rows[i][47].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][47].ToString());
                    drC_Or["SizeK5_5"] = dtOr_All.Rows[i][48].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][48].ToString());
                    drC_Or["SizeK6"] = dtOr_All.Rows[i][49].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][49].ToString());
                    drC_Or["SizeK6_5"] = dtOr_All.Rows[i][50].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][50].ToString());
                    drC_Or["SizeK7"] = dtOr_All.Rows[i][51].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][51].ToString());
                    drC_Or["SizeK7_5"] = dtOr_All.Rows[i][52].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][52].ToString());
                    drC_Or["SizeK8"] = dtOr_All.Rows[i][53].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][53].ToString());
                    drC_Or["SizeK8_5"] = dtOr_All.Rows[i][54].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][54].ToString());
                    drC_Or["SizeK9"] = dtOr_All.Rows[i][55].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][55].ToString());
                    drC_Or["SizeK9_5"] = dtOr_All.Rows[i][56].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][56].ToString());
                    drC_Or["SizeK10"] = dtOr_All.Rows[i][57].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][57].ToString());
                    drC_Or["SizeK10_5"] = dtOr_All.Rows[i][58].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][58].ToString());
                    drC_Or["SizeK11"] = dtOr_All.Rows[i][59].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][59].ToString());
                    drC_Or["SizeK11_5"] = dtOr_All.Rows[i][60].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][60].ToString());
                    drC_Or["SizeK12"] = dtOr_All.Rows[i][61].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][61].ToString());
                    drC_Or["SizeK12_5"] = dtOr_All.Rows[i][62].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][62].ToString());
                    drC_Or["SizeK13"] = dtOr_All.Rows[i][63].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][63].ToString());
                    drC_Or["SizeK13_5"] = dtOr_All.Rows[i][64].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][64].ToString());

                    drC_Or["SizeUK1"] = dtOr_All.Rows[i][65].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][65].ToString());
                    drC_Or["SizeUK1_5"] = dtOr_All.Rows[i][66].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][66].ToString());
                    drC_Or["SizeUK2"] = dtOr_All.Rows[i][67].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][67].ToString());
                    drC_Or["SizeUK2_5"] = dtOr_All.Rows[i][68].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][68].ToString());
                    drC_Or["SizeUK3"] = dtOr_All.Rows[i][69].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][69].ToString());
                    drC_Or["SizeUK3_5"] = dtOr_All.Rows[i][70].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][70].ToString());
                    drC_Or["SizeUK4"] = dtOr_All.Rows[i][71].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][71].ToString());
                    drC_Or["SizeUK4_5"] = dtOr_All.Rows[i][72].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][72].ToString());
                    drC_Or["SizeUK5"] = dtOr_All.Rows[i][73].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][73].ToString());
                    drC_Or["SizeUK5_5"] = dtOr_All.Rows[i][74].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][74].ToString());
                    drC_Or["SizeUK6"] = dtOr_All.Rows[i][75].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][75].ToString());
                    drC_Or["SizeUK6_5"] = dtOr_All.Rows[i][76].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][76].ToString());
                    drC_Or["SizeUK7"] = dtOr_All.Rows[i][77].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][77].ToString());
                    drC_Or["SizeUK7_5"] = dtOr_All.Rows[i][78].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][78].ToString());
                    drC_Or["SizeUK8"] = dtOr_All.Rows[i][79].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][79].ToString());
                    drC_Or["SizeUK8_5"] = dtOr_All.Rows[i][80].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][80].ToString());
                    drC_Or["SizeUK9"] = dtOr_All.Rows[i][81].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][81].ToString());
                    drC_Or["SizeUK9_5"] = dtOr_All.Rows[i][82].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][82].ToString());
                    drC_Or["SizeUK10"] = dtOr_All.Rows[i][83].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][83].ToString());
                    drC_Or["SizeUK10_5"] = dtOr_All.Rows[i][84].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][84].ToString());
                    drC_Or["SizeUK11"] = dtOr_All.Rows[i][85].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][85].ToString());
                    drC_Or["SizeUK11_5"] = dtOr_All.Rows[i][86].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][86].ToString());
                    drC_Or["SizeUK12"] = dtOr_All.Rows[i][87].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][87].ToString());
                    drC_Or["SizeUK12_5"] = dtOr_All.Rows[i][88].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][88].ToString());
                    drC_Or["SizeUK13"] = dtOr_All.Rows[i][89].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][89].ToString());
                    drC_Or["SizeUK13_5"] = dtOr_All.Rows[i][90].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][90].ToString());
                    drC_Or["SizeUK14"] = dtOr_All.Rows[i][91].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][91].ToString());
                    drC_Or["SizeUK14_5"] = dtOr_All.Rows[i][92].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][92].ToString());
                    drC_Or["SizeUK15"] = dtOr_All.Rows[i][93].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][93].ToString());
                    drC_Or["SizeUK15_5"] = dtOr_All.Rows[i][94].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][94].ToString());
                    drC_Or["SizeUK16"] = dtOr_All.Rows[i][95].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][95].ToString());
                    drC_Or["SizeUK16_5"] = dtOr_All.Rows[i][96].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][96].ToString());
                    drC_Or["SizeUK17"] = dtOr_All.Rows[i][97].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][97].ToString());
                    drC_Or["SizeUK17_5"] = dtOr_All.Rows[i][98].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][98].ToString());
                    drC_Or["SizeUK18"] = dtOr_All.Rows[i][99].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][99].ToString());
                    drC_Or["SizeUK18_5"] = dtOr_All.Rows[i][100].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][100].ToString());
                    drC_Or["SizeUK19"] = dtOr_All.Rows[i][101].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][101].ToString());
                    drC_Or["SizeUK19_5"] = dtOr_All.Rows[i][102].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][102].ToString());
                    drC_Or["SizeUK20"] = dtOr_All.Rows[i][103].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][103].ToString());

                    #endregion
                    dtC_Or.Rows.Add(drC_Or);
                }
            }
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
        }
        private void TransferData_OrPODowload(System.Data.DataTable dtOr_All)
        {
            #region data header
            #region define
            System.Data.DataTable dt;
            DataRow dr;
            DataColumn AccColumn;
            DataColumn AccNameColumn;
            DataColumn AccNameTextColumn;
            DataColumn ShipColumn;
            DataColumn ShipNameTextColumn;
            DataColumn ShipNameColumn;
            DataColumn OrderDateColumn;
            DataColumn PONoColumn;
            DataColumn C067_OrderByColumn;
            DataColumn IncontermColumn;
            DataColumn ShipByColumn;
            DataColumn IncontermTextColumn;
            DataColumn ShipByTextColumn;
            DataColumn PaymentTermColumn;
            DataColumn NetDaysColumn;
            DataColumn VersionColumn;
            DataColumn PurposeColumn;

            dt = new System.Data.DataTable();
            AccColumn = new DataColumn("C021_AccountNumber", Type.GetType("System.String"));
            AccNameTextColumn = new DataColumn("InvoiceNameText", Type.GetType("System.String"));
            AccNameColumn = new DataColumn("C024_InvoiceName", Type.GetType("System.String"));
            ShipColumn = new DataColumn("AccountShip", Type.GetType("System.String"));
            ShipNameTextColumn = new DataColumn("ShipNameText", Type.GetType("System.String"));
            ShipNameColumn = new DataColumn("C010-ShipName", Type.GetType("System.String"));
            OrderDateColumn = new DataColumn("C066-OrderDate", Type.GetType("System.String"));
            PONoColumn = new DataColumn("C065-PONo", Type.GetType("System.String"));
            C067_OrderByColumn = new DataColumn("C067-OrderBy", Type.GetType("System.String"));
            IncontermColumn = new DataColumn("Inconterm", Type.GetType("System.String"));
            IncontermTextColumn = new DataColumn("IncontermText", Type.GetType("System.String"));
            ShipByColumn = new DataColumn("ShipBy", Type.GetType("System.String"));
            ShipByTextColumn = new DataColumn("ShipByText", Type.GetType("System.String"));
            PaymentTermColumn = new DataColumn("C051-TermofPayment", Type.GetType("System.String"));
            NetDaysColumn = new DataColumn("C037-NetDays", Type.GetType("System.Int32"));
            VersionColumn = new DataColumn("Version", Type.GetType("System.String"));
            PurposeColumn = new DataColumn("Purpose", Type.GetType("System.String"));

            dt.Columns.Add(AccColumn);
            dt.Columns.Add(AccNameTextColumn);
            dt.Columns.Add(AccNameColumn);
            dt.Columns.Add(ShipColumn);
            dt.Columns.Add(ShipNameTextColumn);
            dt.Columns.Add(ShipNameColumn);
            dt.Columns.Add(OrderDateColumn);
            dt.Columns.Add(PONoColumn);
            dt.Columns.Add(C067_OrderByColumn);
            dt.Columns.Add(IncontermColumn);
            dt.Columns.Add(IncontermTextColumn);
            dt.Columns.Add(ShipByColumn);
            dt.Columns.Add(ShipByTextColumn);
            dt.Columns.Add(PaymentTermColumn);
            dt.Columns.Add(NetDaysColumn);
            dt.Columns.Add(VersionColumn);
            dt.Columns.Add(PurposeColumn);

            #endregion
            int vitri = 0;
            // get data account 
            for (int y = 0; y < dtOr_All.Rows.Count; y++)
            {
                if (dtOr_All.Rows[y][51].ToString().Trim()=="Ref#")
                {
                    vitri = y;

                }
                if (y>vitri)
                {
                    if (dtOr_All.Rows[y][2].ToString() != "") // PO header
                    {
                        dr = dt.NewRow();
                        // set data 
                        if (dtOr_All.Rows[y][156].ToString() != "")
                        {
                            DataSet ds1 = new DataSet();
                            ds1 = info.LoadAccountByNumber(dtOr_All.Rows[y][156].ToString());
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                dr["C021_AccountNumber"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                                dr["C024_InvoiceName"] = ds1.Tables[0].Rows[0]["InvName"].ToString();
                            }
                            else
                            {
                                dr["C021_AccountNumber"] = "";
                                dr["C024_InvoiceName"] = "";
                            }

                        }
                        if (dtOr_All.Rows[y][157].ToString() != "")
                        {
                            DataSet ds1 = new DataSet();
                            ds1 = info.LoadDeliveryNumber(dtOr_All.Rows[y][157].ToString());
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                dr["AccountShip"] = ds1.Tables[0].Rows[0]["AccNo"].ToString();
                                dr["C010-ShipName"] = ds1.Tables[0].Rows[0]["DeliveryName"].ToString();
                            }
                            else
                            {
                                dr["AccountShip"] = "";
                                dr["C010-ShipName"] = "";
                            }
                        }

                        dr["InvoiceNameText"] = dtOr_All.Rows[y][5].ToString();//[6][3]
                        dr["ShipNameText"] = dtOr_All.Rows[y][17].ToString();//[20][3]
                        dr["C066-OrderDate"] = dtOr_All.Rows[y][0].ToString();//[6][9]  DateTime.FromOADate(int.Parse())
                        dr["C065-PONo"] = dtOr_All.Rows[y][1].ToString();//[7][9]
                        dr["C067-OrderBy"] = "";
                        dr["Inconterm"] = "";
                        dr["IncontermText"] = dtOr_All.Rows[y][42].ToString();//[33][6]
                        dr["ShipBy"] = "";
                        dr["ShipByText"] = dtOr_All.Rows[y][43].ToString();//[33][7]
                        dr["C051-TermofPayment"] = "";
                        dr["C037-NetDays"] = 0;
                        dr["Version"] = dtOr_All.Rows[y][3].ToString();//[9][9]
                        dr["Purpose"] = dtOr_All.Rows[y][4].ToString();//[10][9]

                        dt.Rows.Add(dr);
                    }
                }
            }
            dsH_Or.Tables.Add(dt);
            //------------------------------------------------
            #endregion
            #region data center
            System.Data.DataTable dtC_Or;
            DataRow drC_Or;
            #region define column
            DataColumn LineIDColumn;
            DataColumn ToolingTextColumn;
            DataColumn DescriptionTextColumn;
            DataColumn MainProductColumn;
            DataColumn MainProductDesColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ColorNameColumn;
            DataColumn ColorCodeColumn;
            DataColumn QtyShipColumn;
            DataColumn PriceUnitColumn;
            DataColumn RefAdColumn;
            DataColumn OrderNumberColumn;
            DataColumn SeasonColumn;
            DataColumn BuyerReqDateColumn;
            DataColumn CRDColumn;
            DataColumn LineCenterColumn;

            DataColumn SellerConfDeliDateColumn;
            DataColumn SellUpdaDeliDateColumn;
            DataColumn ConfDeliQtyColumn;
            DataColumn UpdaDeliQtyColumn;
            DataColumn SellerConfDeliDateLastColumn;
            DataColumn SellerUpdaDeliDateLastColumn;
            DataColumn ConfDeliQtyLastColumn;
            DataColumn UpdaDeliQtyLastColumn;


            #endregion
            #region size range
            DataColumn SizeK1Column;
            DataColumn SizeK1_5Column;
            DataColumn SizeK2Column;
            DataColumn SizeK2_5Column;
            DataColumn SizeK3Column;
            DataColumn SizeK3_5Column;
            DataColumn SizeK4Column;
            DataColumn SizeK4_5Column;
            DataColumn SizeK5Column;
            DataColumn SizeK5_5Column;
            DataColumn SizeK6Column;
            DataColumn SizeK6_5Column;
            DataColumn SizeK7Column;
            DataColumn SizeK7_5Column;
            DataColumn SizeK8Column;
            DataColumn SizeK8_5Column;
            DataColumn SizeK9Column;
            DataColumn SizeK9_5Column;
            DataColumn SizeK10Column;
            DataColumn SizeK10_5Column;
            DataColumn SizeK11Column;
            DataColumn SizeK11_5Column;
            DataColumn SizeK12Column;
            DataColumn SizeK12_5Column;
            DataColumn SizeK13Column;
            DataColumn SizeK13_5Column;
            DataColumn SizeUK1Column;
            DataColumn SizeUK1_5Column;
            DataColumn SizeUK2Column;
            DataColumn SizeUK2_5Column;
            DataColumn SizeUK3Column;
            DataColumn SizeUK3_5Column;
            DataColumn SizeUK4Column;
            DataColumn SizeUK4_5Column;
            DataColumn SizeUK5Column;
            DataColumn SizeUK5_5Column;
            DataColumn SizeUK6Column;
            DataColumn SizeUK6_5Column;
            DataColumn SizeUK7Column;
            DataColumn SizeUK7_5Column;
            DataColumn SizeUK8Column;
            DataColumn SizeUK8_5Column;
            DataColumn SizeUK9Column;
            DataColumn SizeUK9_5Column;
            DataColumn SizeUK10Column;
            DataColumn SizeUK10_5Column;
            DataColumn SizeUK11Column;
            DataColumn SizeUK11_5Column;
            DataColumn SizeUK12Column;
            DataColumn SizeUK12_5Column;
            DataColumn SizeUK13Column;
            DataColumn SizeUK13_5Column;
            DataColumn SizeUK14Column;
            DataColumn SizeUK14_5Column;
            DataColumn SizeUK15Column;
            DataColumn SizeUK15_5Column;
            DataColumn SizeUK16Column;
            DataColumn SizeUK16_5Column;
            DataColumn SizeUK17Column;
            DataColumn SizeUK17_5Column;
            DataColumn SizeUK18Column;
            DataColumn SizeUK18_5Column;
            DataColumn SizeUK19Column;
            DataColumn SizeUK19_5Column;
            DataColumn SizeUK20Column;
            #endregion
            dtC_Or = new System.Data.DataTable();
            #region define description name
            LineIDColumn = new DataColumn("LineID", Type.GetType("System.Int32"));
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            DescriptionTextColumn = new DataColumn("DescriptionText", Type.GetType("System.String"));
            MainProductColumn = new DataColumn("MainProduct", Type.GetType("System.String"));
            MainProductDesColumn = new DataColumn("MainProductDes", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ColorNameColumn = new DataColumn("ColorName", Type.GetType("System.String"));
            ColorCodeColumn = new DataColumn("ColorCode", Type.GetType("System.String"));
            QtyShipColumn = new DataColumn("C006-QtyShip", Type.GetType("System.Int32"));
            PriceUnitColumn = new DataColumn("C007-PriceUnit", Type.GetType("System.Double"));

            RefAdColumn = new DataColumn("Ref", Type.GetType("System.String"));
            OrderNumberColumn = new DataColumn("OrderNumber", Type.GetType("System.String"));
            SeasonColumn = new DataColumn("Season", Type.GetType("System.String"));
            BuyerReqDateColumn = new DataColumn("BuyerReqDate", Type.GetType("System.String"));
            CRDColumn = new DataColumn("CRD", Type.GetType("System.String"));

            LineCenterColumn = new DataColumn("LineCenter", Type.GetType("System.String"));
            SellerConfDeliDateColumn = new DataColumn("SellerConfDeliDate", Type.GetType("System.String"));
            SellUpdaDeliDateColumn = new DataColumn("SellUpdaDeliDate", Type.GetType("System.String"));
            ConfDeliQtyColumn = new DataColumn("ConfDeliQty", Type.GetType("System.Int32"));
            UpdaDeliQtyColumn = new DataColumn("UpdaDeliQty", Type.GetType("System.Int32"));
            SellerConfDeliDateLastColumn = new DataColumn("SellerConfDeliDateLast", Type.GetType("System.String"));
            SellerUpdaDeliDateLastColumn = new DataColumn("SellerUpdaDeliDateLast", Type.GetType("System.String"));
            ConfDeliQtyLastColumn = new DataColumn("ConfDeliQtyLast", Type.GetType("System.Int32"));
            UpdaDeliQtyLastColumn = new DataColumn("UpdaDeliQtyLast", Type.GetType("System.Int32"));
            #endregion
            #region Size range type define
            SizeK1Column = new DataColumn("SizeK1", Type.GetType("System.Int32"));
            SizeK1_5Column = new DataColumn("SizeK1_5", Type.GetType("System.Int32"));
            SizeK2Column = new DataColumn("SizeK2", Type.GetType("System.Int32"));
            SizeK2_5Column = new DataColumn("SizeK2_5", Type.GetType("System.Int32"));
            SizeK3Column = new DataColumn("SizeK3", Type.GetType("System.Int32"));
            SizeK3_5Column = new DataColumn("SizeK3_5", Type.GetType("System.Int32"));
            SizeK4Column = new DataColumn("SizeK4", Type.GetType("System.Int32"));
            SizeK4_5Column = new DataColumn("SizeK4_5", Type.GetType("System.Int32"));
            SizeK5Column = new DataColumn("SizeK5", Type.GetType("System.Int32"));
            SizeK5_5Column = new DataColumn("SizeK5_5", Type.GetType("System.Int32"));
            SizeK6Column = new DataColumn("SizeK6", Type.GetType("System.Int32"));
            SizeK6_5Column = new DataColumn("SizeK6_5", Type.GetType("System.Int32"));
            SizeK7Column = new DataColumn("SizeK7", Type.GetType("System.Int32"));
            SizeK7_5Column = new DataColumn("SizeK7_5", Type.GetType("System.Int32"));
            SizeK8Column = new DataColumn("SizeK8", Type.GetType("System.Int32"));
            SizeK8_5Column = new DataColumn("SizeK8_5", Type.GetType("System.Int32"));
            SizeK9Column = new DataColumn("SizeK9", Type.GetType("System.Int32"));
            SizeK9_5Column = new DataColumn("SizeK9_5", Type.GetType("System.Int32"));
            SizeK10Column = new DataColumn("SizeK10", Type.GetType("System.Int32"));
            SizeK10_5Column = new DataColumn("SizeK10_5", Type.GetType("System.Int32"));
            SizeK11Column = new DataColumn("SizeK11", Type.GetType("System.Int32"));
            SizeK11_5Column = new DataColumn("SizeK11_5", Type.GetType("System.Int32"));
            SizeK12Column = new DataColumn("SizeK12", Type.GetType("System.Int32"));
            SizeK12_5Column = new DataColumn("SizeK12_5", Type.GetType("System.Int32"));
            SizeK13Column = new DataColumn("SizeK13", Type.GetType("System.Int32"));
            SizeK13_5Column = new DataColumn("SizeK13_5", Type.GetType("System.Int32"));
            SizeUK1Column = new DataColumn("SizeUK1", Type.GetType("System.Int32"));
            SizeUK1_5Column = new DataColumn("SizeUK1_5", Type.GetType("System.Int32"));
            SizeUK2Column = new DataColumn("SizeUK2", Type.GetType("System.Int32"));
            SizeUK2_5Column = new DataColumn("SizeUK2_5", Type.GetType("System.Int32"));
            SizeUK3Column = new DataColumn("SizeUK3", Type.GetType("System.Int32"));
            SizeUK3_5Column = new DataColumn("SizeUK3_5", Type.GetType("System.Int32"));
            SizeUK4Column = new DataColumn("SizeUK4", Type.GetType("System.Int32"));
            SizeUK4_5Column = new DataColumn("SizeUK4_5", Type.GetType("System.Int32"));
            SizeUK5Column = new DataColumn("SizeUK5", Type.GetType("System.Int32"));
            SizeUK5_5Column = new DataColumn("SizeUK5_5", Type.GetType("System.Int32"));
            SizeUK6Column = new DataColumn("SizeUK6", Type.GetType("System.Int32"));
            SizeUK6_5Column = new DataColumn("SizeUK6_5", Type.GetType("System.Int32"));
            SizeUK7Column = new DataColumn("SizeUK7", Type.GetType("System.Int32"));
            SizeUK7_5Column = new DataColumn("SizeUK7_5", Type.GetType("System.Int32"));
            SizeUK8Column = new DataColumn("SizeUK8", Type.GetType("System.Int32"));
            SizeUK8_5Column = new DataColumn("SizeUK8_5", Type.GetType("System.Int32"));
            SizeUK9Column = new DataColumn("SizeUK9", Type.GetType("System.Int32"));
            SizeUK9_5Column = new DataColumn("SizeUK9_5", Type.GetType("System.Int32"));
            SizeUK10Column = new DataColumn("SizeUK10", Type.GetType("System.Int32"));
            SizeUK10_5Column = new DataColumn("SizeUK10_5", Type.GetType("System.Int32"));
            SizeUK11Column = new DataColumn("SizeUK11", Type.GetType("System.Int32"));
            SizeUK11_5Column = new DataColumn("SizeUK11_5", Type.GetType("System.Int32"));
            SizeUK12Column = new DataColumn("SizeUK12", Type.GetType("System.Int32"));
            SizeUK12_5Column = new DataColumn("SizeUK12_5", Type.GetType("System.Int32"));
            SizeUK13Column = new DataColumn("SizeUK13", Type.GetType("System.Int32"));
            SizeUK13_5Column = new DataColumn("SizeUK13_5", Type.GetType("System.Int32"));
            SizeUK14Column = new DataColumn("SizeUK14", Type.GetType("System.Int32"));
            SizeUK14_5Column = new DataColumn("SizeUK14_5", Type.GetType("System.Int32"));
            SizeUK15Column = new DataColumn("SizeUK15", Type.GetType("System.Int32"));
            SizeUK15_5Column = new DataColumn("SizeUK15_5", Type.GetType("System.Int32"));
            SizeUK16Column = new DataColumn("SizeUK16", Type.GetType("System.Int32"));
            SizeUK16_5Column = new DataColumn("SizeUK16_5", Type.GetType("System.Int32"));
            SizeUK17Column = new DataColumn("SizeUK17", Type.GetType("System.Int32"));
            SizeUK17_5Column = new DataColumn("SizeUK17_5", Type.GetType("System.Int32"));
            SizeUK18Column = new DataColumn("SizeUK18", Type.GetType("System.Int32"));
            SizeUK18_5Column = new DataColumn("SizeUK18_5", Type.GetType("System.Int32"));
            SizeUK19Column = new DataColumn("SizeUK19", Type.GetType("System.Int32"));
            SizeUK19_5Column = new DataColumn("SizeUK19_5", Type.GetType("System.Int32"));
            SizeUK20Column = new DataColumn("SizeUK20", Type.GetType("System.Int32"));

            #endregion
            #region add column center
            dtC_Or.Columns.Add(LineIDColumn);
            dtC_Or.Columns.Add(ToolingTextColumn);
            dtC_Or.Columns.Add(DescriptionTextColumn);
            dtC_Or.Columns.Add(MainProductColumn);
            dtC_Or.Columns.Add(MainProductDesColumn);
            dtC_Or.Columns.Add(ArticleNumberAdColumn);
            dtC_Or.Columns.Add(ColorNameColumn);
            dtC_Or.Columns.Add(ColorCodeColumn);
            dtC_Or.Columns.Add(QtyShipColumn);
            dtC_Or.Columns.Add(PriceUnitColumn);

            dtC_Or.Columns.Add(RefAdColumn);
            dtC_Or.Columns.Add(OrderNumberColumn);
            dtC_Or.Columns.Add(SeasonColumn);
            dtC_Or.Columns.Add(BuyerReqDateColumn);
            dtC_Or.Columns.Add(CRDColumn);

            dtC_Or.Columns.Add(LineCenterColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateColumn);
            dtC_Or.Columns.Add(SellUpdaDeliDateColumn);
            dtC_Or.Columns.Add(ConfDeliQtyColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyColumn);
            dtC_Or.Columns.Add(SellerConfDeliDateLastColumn);
            dtC_Or.Columns.Add(SellerUpdaDeliDateLastColumn);
            dtC_Or.Columns.Add(ConfDeliQtyLastColumn);
            dtC_Or.Columns.Add(UpdaDeliQtyLastColumn);
            #endregion
            #region size reange column add
            dtC_Or.Columns.Add(SizeK1Column);
            dtC_Or.Columns.Add(SizeK1_5Column);
            dtC_Or.Columns.Add(SizeK2Column);
            dtC_Or.Columns.Add(SizeK2_5Column);
            dtC_Or.Columns.Add(SizeK3Column);
            dtC_Or.Columns.Add(SizeK3_5Column);
            dtC_Or.Columns.Add(SizeK4Column);
            dtC_Or.Columns.Add(SizeK4_5Column);
            dtC_Or.Columns.Add(SizeK5Column);
            dtC_Or.Columns.Add(SizeK5_5Column);
            dtC_Or.Columns.Add(SizeK6Column);
            dtC_Or.Columns.Add(SizeK6_5Column);
            dtC_Or.Columns.Add(SizeK7Column);
            dtC_Or.Columns.Add(SizeK7_5Column);
            dtC_Or.Columns.Add(SizeK8Column);
            dtC_Or.Columns.Add(SizeK8_5Column);
            dtC_Or.Columns.Add(SizeK9Column);
            dtC_Or.Columns.Add(SizeK9_5Column);
            dtC_Or.Columns.Add(SizeK10Column);
            dtC_Or.Columns.Add(SizeK10_5Column);
            dtC_Or.Columns.Add(SizeK11Column);
            dtC_Or.Columns.Add(SizeK11_5Column);
            dtC_Or.Columns.Add(SizeK12Column);
            dtC_Or.Columns.Add(SizeK12_5Column);
            dtC_Or.Columns.Add(SizeK13Column);
            dtC_Or.Columns.Add(SizeK13_5Column);
            dtC_Or.Columns.Add(SizeUK1Column);
            dtC_Or.Columns.Add(SizeUK1_5Column);
            dtC_Or.Columns.Add(SizeUK2Column);
            dtC_Or.Columns.Add(SizeUK2_5Column);
            dtC_Or.Columns.Add(SizeUK3Column);
            dtC_Or.Columns.Add(SizeUK3_5Column);
            dtC_Or.Columns.Add(SizeUK4Column);
            dtC_Or.Columns.Add(SizeUK4_5Column);
            dtC_Or.Columns.Add(SizeUK5Column);
            dtC_Or.Columns.Add(SizeUK5_5Column);
            dtC_Or.Columns.Add(SizeUK6Column);
            dtC_Or.Columns.Add(SizeUK6_5Column);
            dtC_Or.Columns.Add(SizeUK7Column);
            dtC_Or.Columns.Add(SizeUK7_5Column);
            dtC_Or.Columns.Add(SizeUK8Column);
            dtC_Or.Columns.Add(SizeUK8_5Column);
            dtC_Or.Columns.Add(SizeUK9Column);
            dtC_Or.Columns.Add(SizeUK9_5Column);
            dtC_Or.Columns.Add(SizeUK10Column);
            dtC_Or.Columns.Add(SizeUK10_5Column);
            dtC_Or.Columns.Add(SizeUK11Column);
            dtC_Or.Columns.Add(SizeUK11_5Column);
            dtC_Or.Columns.Add(SizeUK12Column);
            dtC_Or.Columns.Add(SizeUK12_5Column);
            dtC_Or.Columns.Add(SizeUK13Column);
            dtC_Or.Columns.Add(SizeUK13_5Column);
            dtC_Or.Columns.Add(SizeUK14Column);
            dtC_Or.Columns.Add(SizeUK14_5Column);
            dtC_Or.Columns.Add(SizeUK15Column);
            dtC_Or.Columns.Add(SizeUK15_5Column);
            dtC_Or.Columns.Add(SizeUK16Column);
            dtC_Or.Columns.Add(SizeUK16_5Column);
            dtC_Or.Columns.Add(SizeUK17Column);
            dtC_Or.Columns.Add(SizeUK17_5Column);
            dtC_Or.Columns.Add(SizeUK18Column);
            dtC_Or.Columns.Add(SizeUK18_5Column);
            dtC_Or.Columns.Add(SizeUK19Column);
            dtC_Or.Columns.Add(SizeUK19_5Column);
            dtC_Or.Columns.Add(SizeUK20Column);
            #endregion


            int f_point = -1;
            int dem = 0;
            for (int i = 0; i < dtOr_All.Rows.Count; i++)
            {
                if (dtOr_All.Rows[i][51].ToString() == "Ref#")//[4]
                {
                    f_point = i;
                }
                if (i > f_point && f_point > -1)
                {
                    if (dtOr_All.Rows[i][52].ToString() == "")//[5]
                    {
                        break;
                    }
                    dem++;
                    drC_Or = dtC_Or.NewRow();
                    drC_Or["LineID"] = dem;
                    drC_Or["ToolingText"] = dtOr_All.Rows[i][158].ToString();//[0]
                    drC_Or["DescriptionText"] = dtOr_All.Rows[i][52].ToString();//[5]
                    drC_Or["MainProduct"] = "";
                    drC_Or["MainProductDes"] = "";
                    drC_Or["ArticleNumberAd"] = dtOr_All.Rows[i][81].ToString();//[34]
                    drC_Or["ColorName"] = "";
                    drC_Or["ColorCode"] = "";
                    drC_Or["C006-QtyShip"] = dtOr_All.Rows[i][64].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][64].ToString());//17
                    drC_Or["C007-PriceUnit"] = 0;
                    drC_Or["Ref"] = dtOr_All.Rows[i][51].ToString();//4
                    drC_Or["OrderNumber"] = dtOr_All.Rows[i][80].ToString();//33
                    //------------------------------------------------------
                    drC_Or["Season"] = dtOr_All.Rows[i][83].ToString();//36
                    drC_Or["BuyerReqDate"] = dtOr_All.Rows[i][69].ToString();//22
                    drC_Or["CRD"] = dtOr_All.Rows[i][70].ToString();//23
                    drC_Or["LineCenter"] = dtOr_All.Rows[i][50].ToString();//3
                    drC_Or["SellerConfDeliDate"] = "";
                    drC_Or["SellUpdaDeliDate"] = "";
                    drC_Or["ConfDeliQty"] = 0;
                    drC_Or["UpdaDeliQty"] = 0;
                    drC_Or["SellerConfDeliDateLast"] = "";
                    drC_Or["SellerUpdaDeliDateLast"] = "";
                    drC_Or["ConfDeliQtyLast"] = 0;
                    drC_Or["UpdaDeliQtyLast"] = 0;

                    #region set data into size range
                    drC_Or["SizeK1"] = dtOr_All.Rows[i][86].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][86].ToString());
                    drC_Or["SizeK1_5"] = dtOr_All.Rows[i][87].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][87].ToString());
                    drC_Or["SizeK2"] = dtOr_All.Rows[i][88].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][88].ToString());
                    drC_Or["SizeK2_5"] = dtOr_All.Rows[i][89].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][89].ToString());
                    drC_Or["SizeK3"] = dtOr_All.Rows[i][90].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][90].ToString());
                    drC_Or["SizeK3_5"] = dtOr_All.Rows[i][91].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][91].ToString());
                    drC_Or["SizeK4"] = dtOr_All.Rows[i][92].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][92].ToString());
                    drC_Or["SizeK4_5"] = dtOr_All.Rows[i][93].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][93].ToString());
                    drC_Or["SizeK5"] = dtOr_All.Rows[i][94].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][94].ToString());
                    drC_Or["SizeK5_5"] = dtOr_All.Rows[i][95].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][95].ToString());
                    drC_Or["SizeK6"] = dtOr_All.Rows[i][96].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][96].ToString());
                    drC_Or["SizeK6_5"] = dtOr_All.Rows[i][97].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][97].ToString());
                    drC_Or["SizeK7"] = dtOr_All.Rows[i][98].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][98].ToString());
                    drC_Or["SizeK7_5"] = dtOr_All.Rows[i][99].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][99].ToString());
                    drC_Or["SizeK8"] = dtOr_All.Rows[i][100].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][100].ToString());
                    drC_Or["SizeK8_5"] = dtOr_All.Rows[i][101].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][101].ToString());
                    drC_Or["SizeK9"] = dtOr_All.Rows[i][102].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][102].ToString());
                    drC_Or["SizeK9_5"] = dtOr_All.Rows[i][103].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][103].ToString());
                    drC_Or["SizeK10"] = dtOr_All.Rows[i][104].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][104].ToString());
                    drC_Or["SizeK10_5"] = dtOr_All.Rows[i][105].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][105].ToString());
                    drC_Or["SizeK11"] = dtOr_All.Rows[i][106].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][106].ToString());
                    drC_Or["SizeK11_5"] = dtOr_All.Rows[i][107].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][107].ToString());
                    drC_Or["SizeK12"] = dtOr_All.Rows[i][108].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][108].ToString());
                    drC_Or["SizeK12_5"] = dtOr_All.Rows[i][109].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][109].ToString());
                    drC_Or["SizeK13"] = dtOr_All.Rows[i][110].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][110].ToString());
                    drC_Or["SizeK13_5"] = dtOr_All.Rows[i][111].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][111].ToString());

                    drC_Or["SizeUK1"] = dtOr_All.Rows[i][112].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][112].ToString());
                    drC_Or["SizeUK1_5"] = dtOr_All.Rows[i][113].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][113].ToString());
                    drC_Or["SizeUK2"] = dtOr_All.Rows[i][114].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][114].ToString());
                    drC_Or["SizeUK2_5"] = dtOr_All.Rows[i][115].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][115].ToString());
                    drC_Or["SizeUK3"] = dtOr_All.Rows[i][116].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][116].ToString());
                    drC_Or["SizeUK3_5"] = dtOr_All.Rows[i][117].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][117].ToString());
                    drC_Or["SizeUK4"] = dtOr_All.Rows[i][118].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][118].ToString());
                    drC_Or["SizeUK4_5"] = dtOr_All.Rows[i][119].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][119].ToString());
                    drC_Or["SizeUK5"] = dtOr_All.Rows[i][120].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][120].ToString());
                    drC_Or["SizeUK5_5"] = dtOr_All.Rows[i][121].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][121].ToString());
                    drC_Or["SizeUK6"] = dtOr_All.Rows[i][122].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][122].ToString());
                    drC_Or["SizeUK6_5"] = dtOr_All.Rows[i][123].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][123].ToString());
                    drC_Or["SizeUK7"] = dtOr_All.Rows[i][124].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][124].ToString());
                    drC_Or["SizeUK7_5"] = dtOr_All.Rows[i][125].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][125].ToString());
                    drC_Or["SizeUK8"] = dtOr_All.Rows[i][126].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][126].ToString());
                    drC_Or["SizeUK8_5"] = dtOr_All.Rows[i][127].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][127].ToString());
                    drC_Or["SizeUK9"] = dtOr_All.Rows[i][128].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][128].ToString());
                    drC_Or["SizeUK9_5"] = dtOr_All.Rows[i][129].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][129].ToString());
                    drC_Or["SizeUK10"] = dtOr_All.Rows[i][130].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][130].ToString());
                    drC_Or["SizeUK10_5"] = dtOr_All.Rows[i][131].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][131].ToString());
                    drC_Or["SizeUK11"] = dtOr_All.Rows[i][132].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][132].ToString());
                    drC_Or["SizeUK11_5"] = dtOr_All.Rows[i][133].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][133].ToString());
                    drC_Or["SizeUK12"] = dtOr_All.Rows[i][134].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][134].ToString());
                    drC_Or["SizeUK12_5"] = dtOr_All.Rows[i][135].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][135].ToString());
                    drC_Or["SizeUK13"] = dtOr_All.Rows[i][136].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][136].ToString());
                    drC_Or["SizeUK13_5"] = dtOr_All.Rows[i][137].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][137].ToString());
                    drC_Or["SizeUK14"] = dtOr_All.Rows[i][138].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][138].ToString());
                    drC_Or["SizeUK14_5"] = dtOr_All.Rows[i][139].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][139].ToString());
                    drC_Or["SizeUK15"] = dtOr_All.Rows[i][140].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][140].ToString());
                    drC_Or["SizeUK15_5"] = dtOr_All.Rows[i][141].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][141].ToString());
                    drC_Or["SizeUK16"] = dtOr_All.Rows[i][142].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][142].ToString());
                    drC_Or["SizeUK16_5"] = dtOr_All.Rows[i][143].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][143].ToString());
                    drC_Or["SizeUK17"] = dtOr_All.Rows[i][144].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][144].ToString());
                    drC_Or["SizeUK17_5"] = dtOr_All.Rows[i][145].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][145].ToString());
                    drC_Or["SizeUK18"] = dtOr_All.Rows[i][146].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][146].ToString());
                    drC_Or["SizeUK18_5"] = dtOr_All.Rows[i][147].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][147].ToString());
                    drC_Or["SizeUK19"] = dtOr_All.Rows[i][148].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][148].ToString());
                    drC_Or["SizeUK19_5"] = dtOr_All.Rows[i][149].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][149].ToString());
                    drC_Or["SizeUK20"] = dtOr_All.Rows[i][150].ToString() == "" ? 0 : int.Parse(dtOr_All.Rows[i][150].ToString());

                    #endregion
                    dtC_Or.Rows.Add(drC_Or);
                }
            }
            dsC_Or.Tables.Add(dtC_Or);
            #endregion
        }
        private void GetdataforGrv_Or()
        {
            splashScreenManager1.ShowWaitForm();
            #region header Original
            for (int i = 0; i < dsH_Or.Tables[0].Rows.Count; i++)
			{
                DataSet ds_Inconterm = new DataSet();
                DataSet ds_ShipBy = new DataSet();
                DataSet ds_PaymentTerm = new DataSet();
                if (mod_Material.gsCompanyCode=="VNT1")
                {
                    if (dsH_Or.Tables[0].Rows[i]["IncontermText"].ToString().Trim()!="")
                    {
                        ds_Inconterm = info.LoadIncoterm(dsH_Or.Tables[0].Rows[i]["IncontermText"].ToString());
                        if (ds_Inconterm.Tables[0].Rows.Count > 0)
                        {
                            dsH_Or.Tables[0].Rows[i]["Inconterm"] = ds_Inconterm.Tables[0].Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        dsH_Or.Tables[0].Rows[i]["Inconterm"] = "";
                    }
                }
                else
                {
                    dsH_Or.Tables[0].Rows[i]["Inconterm"] = "";
                }
                if (dsH_Or.Tables[0].Rows[i]["ShipByText"].ToString().Trim() != "")
                {
                    ds_ShipBy = info.LoadShipBy(dsH_Or.Tables[0].Rows[i]["ShipByText"].ToString());//dsH_Or.Tables[0].Rows[i]["ShipByText"].ToString()
                    if (ds_ShipBy.Tables[0].Rows.Count > 0)
                    {
                        if (mod_Material.gsCompanyCode=="VNT1")
                        {
                            dsH_Or.Tables[0].Rows[i]["ShipBy"] = ds_ShipBy.Tables[0].Rows[0][0].ToString();
                        }
                        else
                        {
                            dsH_Or.Tables[0].Rows[i]["ShipBy"] = "0";
                        }

                    }
                }
                else
                {
                    dsH_Or.Tables[0].Rows[i]["ShipBy"] = "";
                }
                ds_PaymentTerm = info.LoadPaymentTermAccV5(dsH_Or.Tables[0].Rows[i]["C021_AccountNumber"].ToString(),lke_FsYearCode.EditValue.ToString(),mod_Material.gsCompanyCode);
                if (ds_PaymentTerm.Tables[0].Rows.Count > 0)
                {
                        dsH_Or.Tables[0].Rows[i]["PaymentTerm"] = ds_PaymentTerm.Tables[0].Rows[0]["PayTName"].ToString();
                        //dsH_Or.Tables[0].Rows[i]["C037-NetDays"] = ds_PaymentTerm.Tables[0].Rows[0]["NetDays"].ToString();
                }
            }
            #endregion
            #region Center Original
          
            #region define table 
            //--------------------------------------------------
            DataRow drE; System.Data.DataTable dtE;
            DataColumn ToolingTextColumn;
            DataColumn ArticleNumberAdColumn;
            DataColumn ProductCode;
            DataColumn ProductName;
            DataColumn ColorCode;
            DataColumn ColorName;

            dtE = new System.Data.DataTable();
            ToolingTextColumn = new DataColumn("ToolingText", Type.GetType("System.String"));
            ArticleNumberAdColumn = new DataColumn("ArticleNumberAd", Type.GetType("System.String"));
            ProductCode = new DataColumn("ProductCode", Type.GetType("System.String"));
            ProductName = new DataColumn("ProductName", Type.GetType("System.String"));
            ColorCode = new DataColumn("ColorCode", Type.GetType("System.String"));
            ColorName = new DataColumn("ColorName", Type.GetType("System.String"));

            dtE.Columns.Add(ToolingTextColumn);
            dtE.Columns.Add(ArticleNumberAdColumn);
            dtE.Columns.Add(ProductCode);
            dtE.Columns.Add(ProductName);
            dtE.Columns.Add(ColorCode);
            dtE.Columns.Add(ColorName);
            #endregion
            // group by Tooling , article and then get data from database
            System.Data.DataTable dt_Group = new System.Data.DataTable();

            dt_Group = dsC_Or.Tables[0].AsEnumerable()
   .GroupBy(r => new { Col1 = r["ToolingText"], Col2 = r["ArticleNumberAd"] })
   .Select(g => g.OrderBy(r => r["LineID"]).First())
   .CopyToDataTable();

            if (dt_Group.Rows.Count>0)
            {
                progressBar1.Minimum = 0;
                progressBar1.Value = 0;
                progressBar1.Maximum = 100;
                for (int t = 0; t < dt_Group.Rows.Count; t++)
                {
                    DataSet ds_ProductColor = new DataSet();
                    if (chkSizeGroup.Checked == true)
                    {
                        ds_ProductColor = info.LoadProductCodeColor(dt_Group.Rows[t]["ToolingText"].ToString(), dt_Group.Rows[t]["ArticleNumberAd"].ToString().Replace(",", ""));
                    }
                    else
                    {
                        ds_ProductColor = info.LoadProductCodeColorV5(dt_Group.Rows[t]["ToolingText"].ToString(), dt_Group.Rows[t]["ArticleNumberAd"].ToString().Replace(",", ""),
                               lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode);
                    }
                    //-----
                    if (ds_ProductColor.Tables[0].Rows.Count > 0)
                        {
                            drE = dtE.NewRow();
                            drE["ToolingText"] = dt_Group.Rows[t]["ToolingText"].ToString();//[9][9]
                            drE["ArticleNumberAd"] = dt_Group.Rows[t]["ArticleNumberAd"].ToString().Replace(",", "");//[7][9]
                            drE["ProductCode"] = ds_ProductColor.Tables[0].Rows[0]["ProductCode"].ToString();
                            drE["ProductName"] = ds_ProductColor.Tables[0].Rows[0]["ProductName"].ToString();
                            drE["ColorCode"] = ds_ProductColor.Tables[0].Rows[0]["ColorCode"].ToString();
                            drE["ColorName"] = ds_ProductColor.Tables[0].Rows[0]["ColorName"].ToString();

                            dtE.Rows.Add(drE);
                        }
                    int percents = (t * 100) / dt_Group.Rows.Count;
                        progressBar1.Value = percents;
                }
            }

            for (int i = 0; i < dsC_Or.Tables[0].Rows.Count; i++)
            {
                         DataRow[] foundRows;
                         if (dtE.Rows.Count > 0)
                         {
                             foundRows = dtE.Select("ToolingText = '" + dsC_Or.Tables[0].Rows[i]["ToolingText"].ToString().Trim() + "' and ArticleNumberAd = '" + dsC_Or.Tables[0].Rows[i]["ArticleNumberAd"].ToString().Trim() + "'");
                             if (foundRows.Length > 0)
                             {
                                 //for (int f = 0; f < foundRows.Length; f++)
                                 //{
                                     dsC_Or.Tables[0].Rows[i]["MainProduct"] = foundRows[0]["ProductCode"].ToString();
                                     dsC_Or.Tables[0].Rows[i]["MainProductDes"] = foundRows[0]["ProductName"].ToString();
                                     dsC_Or.Tables[0].Rows[i]["ColorName"] = foundRows[0]["ColorName"].ToString();
                                     dsC_Or.Tables[0].Rows[i]["ColorCode"] = foundRows[0]["ColorCode"].ToString();
                                 //}
                             }
                         }
              
                //Thread.Sleep(500);
                //backgroundWorker1.ReportProgress(percents,i);
            }
            splashScreenManager1.CloseWaitForm();
            //info.LoadProductCodeColor()
            progressBar1.Value = 0;
            #endregion
        }
        private System.Data.DataTable GetDataTabletFromCSVFile(string FilePath, string Extension, string isHDR,string SheetNameExcel)
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            string conStr = "";
            switch (Extension)
            {
                case ".xls": //Excel 97-03
                    conStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR={1}'";
                    break;
                case ".xlsm": //Excel 97-03
                    conStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR={1}'";
                    break;
            }
            conStr = String.Format(conStr, FilePath, isHDR);
            OleDbConnection connExcel = new OleDbConnection(conStr);
            OleDbCommand cmdExcel = new OleDbCommand();
            OleDbDataAdapter oda = new OleDbDataAdapter();
            cmdExcel.Connection = connExcel;

            //Get the name of First Sheet
            connExcel.Open();
            System.Data.DataTable dtExcelSchema;
            dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
            string SheetName = SheetNameExcel;// dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
            connExcel.Close();

            //Read Data from First Sheet
            connExcel.Open();
            cmdExcel.CommandText = "SELECT * From [" + SheetName + "$]";
            oda.SelectCommand = cmdExcel;
            oda.Fill(dt);
            connExcel.Close(); 

            return dt;
        }
        #region event xtragird 
        private void grvH_Ori_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {
            GridView View = sender as GridView;
            if (e.Column.FieldName == "C021_AccountNumber" || e.Column.FieldName == "AccountShip")
            {
                //string LabResult = View.GetRowCellDisplayText(e.RowHandle, View.Columns["LabResult"]);
                //if (LabResult == "Fail")
                //{
                    e.Appearance.BackColor = Color.Yellow;
                    e.Appearance.BackColor2 = Color.YellowGreen;
                //}
            }
        }
        private void grvC_Ori_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView View = sender as GridView;
            if (e.Column.FieldName == "MainProduct")
            {
                //string LabResult = View.GetRowCellDisplayText(e.RowHandle, View.Columns["LabResult"]);
                //if (LabResult == "Fail")
                //{
                e.Appearance.BackColor = Color.Yellow;
                e.Appearance.BackColor2 = Color.YellowGreen;
                //}
            }
        }
        #endregion
        #region key event for account name
        private void grdH_Ori_ProcessGridKey(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (grvH_Ori.FocusedColumn.FieldName == "C021_AccountNumber")
                {
                    // get account 
                    using (var frm = new H2T_BaseSys.Frm_GridSelect()
                    {
                        Text = "Account Invoice Listing",
                        Caption = "Account Invoice Listing",
                        DataSource = info.LoadAccountNumber(Base.GetRowSelectedValueinGrdAll(grvH_Ori, 1).Trim()).Tables[0],
                        StrColE = "AccNo,InvName,InvStreet,InvStreet2,InvCity,CountryInvAddress",
                        iDL = 2
                    })
                    {
                        // gan su kien delegate vao
                        frm.FireEventData += new FireEventTransferData(Frm_FireEventAccountNumber);
                        frm.ShowDialog();
                    }
                    // get delivery if same account inv
                    if (Base.GetRowSelectedValueinGrdAll(grvH_Ori, 1).Trim()==Base.GetRowSelectedValueinGrdAll(grvH_Ori, 4).Trim())
                    {
                        DataSet dstmp = new DataSet();
                        dstmp = info.LoadDelivery(Base.GetRowSelectedValueinGrdAll(grvH_Ori, 4).Trim());
                        if (dstmp.Tables[0].Rows.Count>0)
                        {
                            grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "AccountShip", dstmp.Tables[0].Rows[0]["AccNo"].ToString());
                            grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C010-ShipName", dstmp.Tables[0].Rows[0]["DeliveryName"].ToString());
                        }
                    }
                }
                //get delivery if it's not same account inv
                if (grvH_Ori.FocusedColumn.FieldName == "AccountShip")
                {
                    if (Base.GetRowSelectedValueinGrdAll(grvH_Ori, 1).Trim()!=Base.GetRowSelectedValueinGrdAll(grvH_Ori, 4).Trim())
                    {
                        using (var frm = new H2T_BaseSys.Frm_GridSelect()
                        {
                            Text = "Account Delivery Listing",
                            Caption = "Account Delivery Listing",
                            DataSource = info.LoadDelivery(Base.GetRowSelectedValueinGrdAll(grvH_Ori, 4).Trim()).Tables[0],
                            StrColE = "AccNo,DeliveryName,DeliveryStreet,DeliveryCity,CountryDeliveryAddress",
                            iDL = 2
                        })
                        {
                            // gan su kien delegate vao
                            frm.FireEventData += new FireEventTransferData(Frm_FireEventDeliveryNumber);
                            frm.ShowDialog();
                        }
                    }
                }
                //get payment term,netday
                if (grvH_Ori.FocusedColumn.FieldName == "PaymentTerm")
                {
                        using (var frm = new H2T_BaseSys.Frm_GridSelect()
                        {
                            Text = "Payment Term Listing",
                            Caption = "Payment Term Listing",
                            DataSource = info.LoadPaymentTerm(Base.GetRowSelectedValueinGrdAll(grvH_Ori, 13).Trim(),lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode).Tables[0],
                            StrColE = "PayTName,NetDays",
                            iDL = 2
                        })
                        {
                            // gan su kien delegate vao
                            frm.FireEventData += new FireEventTransferData(Frm_FireEventPayment);
                            frm.ShowDialog();
                        }
                }
                // get ship by.
                if (grvH_Ori.FocusedColumn.FieldName == "ShipBy")
                {
                    using (var frm = new H2T_BaseSys.Frm_GridSelect()
                    {
                        Text = "ShipBy Listing",
                        Caption = "ShipBy Listing",
                        DataSource = info.LoadShipBy("").Tables[0], //Base.GetRowSelectedValueinGrdAll(grvH_Ori, 13).Trim()
                        StrColE = "ShipBy",
                        iDL = 2
                    })
                    {
                        // gan su kien delegate vao
                        frm.FireEventData += new FireEventTransferData(Frm_FireEventShipBy);
                        frm.ShowDialog();
                    }
                }
                // get Incoterm
                if (grvH_Ori.FocusedColumn.FieldName == "Inconterm")
                {
                    using (var frm = new H2T_BaseSys.Frm_GridSelect()
                    {
                        Text = "Inconterm Listing",
                        Caption = "Inconterm Listing",
                        DataSource = info.LoadIncoterm("").Tables[0], //Base.GetRowSelectedValueinGrdAll(grvH_Ori, 13).Trim()
                        StrColE = "Inconterm",
                        iDL = 2
                    })
                    {
                        // gan su kien delegate vao
                        frm.FireEventData += new FireEventTransferData(Frm_FireEventIncoterm);
                        frm.ShowDialog();
                    }
                }
                
            }
            // copy paste
            if (e.Control && e.KeyCode == Keys.V)
            {
                string[] data = ClipboardData.Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                if (data.Length < 1) return;
                int startRow = grvH_Ori.FocusedRowHandle;
                for (int i = 0; i < grvH_Ori.SelectedRowsCount; i++)
                {
                    foreach (string row in data)
                    {
                        AddRowGrvH_Ori(row, startRow++); //row
                        if (!grvH_Ori.IsValidRowHandle(startRow))
                            break;
                    }
                }

                e.SuppressKeyPress = true;
                e.Handled = true;
            }
            if (e.Control && e.KeyCode == Keys.C)
            {
                grvH_Ori.CopyToClipboard();
                e.SuppressKeyPress = true;
                e.Handled = true;
            }
        }
        public void Frm_FireEventShipBy(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose Ship By ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, grvH_Ori.FocusedColumn, str[0].Trim());
                //grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C037-NetDays", str[1].Trim());
            }
        }
        public void Frm_FireEventIncoterm(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose Incoterm ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, grvH_Ori.FocusedColumn, str[0].Trim());
                //grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C037-NetDays", str[1].Trim());
            }
        }
        public void Frm_FireEventPayment(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose Payment term ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, grvH_Ori.FocusedColumn, str[0].Trim());
                //grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C037-NetDays", str[1].Trim());
            }
        }
        public void Frm_FireEventAccountNumber(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose Account Invoice Name ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, grvH_Ori.FocusedColumn, str[0].Trim());
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C024_InvoiceName", str[1].Trim());
            }
        }
        public void Frm_FireEventDeliveryNumber(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose account delivery name ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, grvH_Ori.FocusedColumn, str[0].Trim());
                grvH_Ori.SetRowCellValue(grvH_Ori.FocusedRowHandle, "C010-ShipName", str[1].Trim());
            }
        }
        #endregion
        #region key event for product code,color
        private void grdC_Ori_ProcessGridKey(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //   
                grvC_Ori.CloseEditor();
                grvC_Ori.UpdateCurrentRow();
                if (grvC_Ori.FocusedColumn.FieldName == "MainProduct")
                {
                    // get product code 
                    
                    using (var frm = new H2T_BaseSys.Frm_GridSelect()
                    {
                        Text = "Main product Listing",
                        Caption = "Main product Listing",
                        DataSource = info.LoadProductCodeColor(Base.GetRowSelectedValueinGrdAll(grvC_Ori, 2).Trim(), Base.GetRowSelectedValueinGrdAll(grvC_Ori, 4).Trim()).Tables[0],
                        StrColE = "ProductCode,ProductName,ColorCode,ColorName,Article ",
                        iDL = 2
                    })
                    {
                        // gan su kien delegate vao
                        frm.FireEventData += new FireEventTransferData(Frm_FireEventProductColor);
                        frm.ShowDialog();
                    }
                }
            }
                   
        }
        public void Frm_FireEventProductColor(object sender, TransferDataEventArgs e)
        {
            if (e.ID == "")
            {
                MessageBox.Show("Please choose Product Color ", "Note!");
                return;
            }
            else
            {
                String[] str = e.ID.Split(new Char[] { '|' });
                grvC_Ori.SetRowCellValue(grvC_Ori.FocusedRowHandle, grvC_Ori.FocusedColumn, str[0].Trim());
                grvC_Ori.SetRowCellValue(grvC_Ori.FocusedRowHandle, "MainProductDes", str[1].Trim());
                grvC_Ori.SetRowCellValue(grvC_Ori.FocusedRowHandle, "ColorCode", str[2].Trim());
                grvC_Ori.SetRowCellValue(grvC_Ori.FocusedRowHandle, "ColorName", str[3].Trim());
            }
        }
        #endregion
        private void btnUpdateMasterLine_Click(object sender, EventArgs e)
        {
        //    if (MessageBox.Show("Would you like update master line for these serial number?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
        //    {
        //        try
        //        {
        //            string strSeria = "";
        //            if (txtToNumber.Text != "" && txtFrmNumber.Text != "")
        //            {
        //                if (long.Parse(txtFrmNumber.Text) < long.Parse(txtToNumber.Text))
        //                {
        //                    for (long i = long.Parse(txtFrmNumber.Text); i <= long.Parse(txtToNumber.Text); i++)
        //                    {
        //                        strSeria = strSeria + "," + i.ToString();
        //                    }
        //                    strSeria = strSeria.Substring(1, strSeria.Length - 1);
        //                    if (info.UpdateMasterLine(strSeria, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode) == 0)
        //                    {
        //                        MessageBox.Show("Updated record successfully");
        //                    }
        //                    else
        //                    {
        //                        MessageBox.Show("Updated record successfully");
        //                        //MessageBox.Show("error system when update data to master line! please contact to IT team.");
        //                    }
        //                }
        //                else if (long.Parse(txtFrmNumber.Text) == long.Parse(txtToNumber.Text))
        //                {
        //                    strSeria = txtFrmNumber.Text;
        //                    if (info.UpdateMasterLine(strSeria, lke_FsYearCode.EditValue.ToString(), mod_Material.gsCompanyCode) == 0)
        //                    {
        //                        MessageBox.Show("Updated record successfully");
        //                    }
        //                    else
        //                    {
        //                        MessageBox.Show("Updated record successfully");
        //                        //MessageBox.Show("error system when update data to master line! please contact to IT team.");
        //                    }
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {

        //            MessageBox.Show("error system when update data to master line! please contact to IT team.");
        //        }
        //    }
        }

        private void chkPODownload_CheckedChanged(object sender, EventArgs e)
        {
           // if (chkPODownload.Checked==true)
           // {
           //     chkSizeGroup.Enabled = false;
           // }
           // else
           // {
           //     chkSizeGroup.Enabled = true;
           // }
        }

        private void chkNewB_CheckedChanged(object sender, EventArgs e)
        {
            if (chkNewB.Checked==true)
            {
                locPathFileNB.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                locSheetNameNB.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                locIssueDate.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                rdVerticalDL.Checked = true;
            }
            else
            {
                locPathFileNB.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                locSheetNameNB.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                locIssueDate.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                rdVerticalDL.Checked = false;
                rdHorizontalDL.Checked = true;
            }
        }

        //private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        //{
        //    GetdataforGrv_Or();
        //}

        //private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        //{
        //    progressBar1.Value = e.ProgressPercentage;
        //    System.Windows.Forms.Application.DoEvents();
        //}
    }
}
